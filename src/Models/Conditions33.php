<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Conditions33 implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $method;

    /**
     * @var string|null
     */
    private $values;

    /**
     * Returns Method.
     */
    public function getMethod(): ?string
    {
        return $this->method;
    }

    /**
     * Sets Method.
     *
     * @maps method
     * @factory \FortisAPILib\Models\Method4Enum::checkValue
     */
    public function setMethod(?string $method): void
    {
        $this->method = $method;
    }

    /**
     * Returns Values.
     */
    public function getValues(): ?string
    {
        return $this->values;
    }

    /**
     * Sets Values.
     *
     * @maps values
     * @factory \FortisAPILib\Models\Values6Enum::checkValue
     */
    public function setValues(?string $values): void
    {
        $this->values = $values;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->method)) {
            $json['method'] = Method4Enum::checkValue($this->method);
        }
        if (isset($this->values)) {
            $json['values'] = Values6Enum::checkValue($this->values);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
