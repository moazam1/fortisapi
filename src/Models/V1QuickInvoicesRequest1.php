<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class V1QuickInvoicesRequest1 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var array
     */
    private $title = [];

    /**
     * @var array
     */
    private $ccProductTransactionId = [];

    /**
     * @var array
     */
    private $achProductTransactionId = [];

    /**
     * @var array
     */
    private $dueDate = [];

    /**
     * @var ItemList5[]|null
     */
    private $itemList;

    /**
     * @var bool|null
     */
    private $allowOverpayment;

    /**
     * @var bool|null
     */
    private $bankFundedOnlyOverride;

    /**
     * @var array
     */
    private $email = [];

    /**
     * @var array
     */
    private $contactId = [];

    /**
     * @var array
     */
    private $contactApiId = [];

    /**
     * @var array
     */
    private $quickInvoiceApiId = [];

    /**
     * @var array
     */
    private $customerId = [];

    /**
     * @var array
     */
    private $expireDate = [];

    /**
     * @var bool|null
     */
    private $allowPartialPay;

    /**
     * @var bool|null
     */
    private $attachFilesToEmail;

    /**
     * @var bool|null
     */
    private $sendEmail;

    /**
     * @var array
     */
    private $invoiceNumber = [];

    /**
     * @var array
     */
    private $itemHeader = [];

    /**
     * @var array
     */
    private $itemFooter = [];

    /**
     * @var array
     */
    private $amountDue = [];

    /**
     * @var array
     */
    private $notificationEmail = [];

    /**
     * @var array
     */
    private $statusId = [];

    /**
     * @var array
     */
    private $statusCode = [];

    /**
     * @var array
     */
    private $note = [];

    /**
     * @var array
     */
    private $notificationDaysBeforeDueDate = [];

    /**
     * @var array
     */
    private $notificationDaysAfterDueDate = [];

    /**
     * @var bool|null
     */
    private $notificationOnDueDate;

    /**
     * @var bool|null
     */
    private $sendTextToPay;

    /**
     * @var array[]|null
     */
    private $files;

    /**
     * @var array
     */
    private $remainingBalance = [];

    /**
     * @var array
     */
    private $singlePaymentMinAmount = [];

    /**
     * @var array
     */
    private $singlePaymentMaxAmount = ['value' => 999999999];

    /**
     * @var array
     */
    private $cellPhone = [];

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * Location ID
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        if (count($this->title) == 0) {
            return null;
        }
        return $this->title['value'];
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title['value'] = $title;
    }

    /**
     * Unsets Title.
     * Title
     */
    public function unsetTitle(): void
    {
        $this->title = [];
    }

    /**
     * Returns Cc Product Transaction Id.
     * Transaction ID
     */
    public function getCcProductTransactionId(): ?string
    {
        if (count($this->ccProductTransactionId) == 0) {
            return null;
        }
        return $this->ccProductTransactionId['value'];
    }

    /**
     * Sets Cc Product Transaction Id.
     * Transaction ID
     *
     * @maps cc_product_transaction_id
     */
    public function setCcProductTransactionId(?string $ccProductTransactionId): void
    {
        $this->ccProductTransactionId['value'] = $ccProductTransactionId;
    }

    /**
     * Unsets Cc Product Transaction Id.
     * Transaction ID
     */
    public function unsetCcProductTransactionId(): void
    {
        $this->ccProductTransactionId = [];
    }

    /**
     * Returns Ach Product Transaction Id.
     * ACH Product Transaction Id
     */
    public function getAchProductTransactionId(): ?string
    {
        if (count($this->achProductTransactionId) == 0) {
            return null;
        }
        return $this->achProductTransactionId['value'];
    }

    /**
     * Sets Ach Product Transaction Id.
     * ACH Product Transaction Id
     *
     * @maps ach_product_transaction_id
     */
    public function setAchProductTransactionId(?string $achProductTransactionId): void
    {
        $this->achProductTransactionId['value'] = $achProductTransactionId;
    }

    /**
     * Unsets Ach Product Transaction Id.
     * ACH Product Transaction Id
     */
    public function unsetAchProductTransactionId(): void
    {
        $this->achProductTransactionId = [];
    }

    /**
     * Returns Due Date.
     * Due Date, Format: Y-m-d
     */
    public function getDueDate(): ?string
    {
        if (count($this->dueDate) == 0) {
            return null;
        }
        return $this->dueDate['value'];
    }

    /**
     * Sets Due Date.
     * Due Date, Format: Y-m-d
     *
     * @maps due_date
     */
    public function setDueDate(?string $dueDate): void
    {
        $this->dueDate['value'] = $dueDate;
    }

    /**
     * Unsets Due Date.
     * Due Date, Format: Y-m-d
     */
    public function unsetDueDate(): void
    {
        $this->dueDate = [];
    }

    /**
     * Returns Item List.
     * Item List
     *
     * @return ItemList5[]|null
     */
    public function getItemList(): ?array
    {
        return $this->itemList;
    }

    /**
     * Sets Item List.
     * Item List
     *
     * @maps item_list
     *
     * @param ItemList5[]|null $itemList
     */
    public function setItemList(?array $itemList): void
    {
        $this->itemList = $itemList;
    }

    /**
     * Returns Allow Overpayment.
     * Allow Overpayment.
     */
    public function getAllowOverpayment(): ?bool
    {
        return $this->allowOverpayment;
    }

    /**
     * Sets Allow Overpayment.
     * Allow Overpayment.
     *
     * @maps allow_overpayment
     */
    public function setAllowOverpayment(?bool $allowOverpayment): void
    {
        $this->allowOverpayment = $allowOverpayment;
    }

    /**
     * Returns Bank Funded Only Override.
     * Bank Funded Only override
     */
    public function getBankFundedOnlyOverride(): ?bool
    {
        return $this->bankFundedOnlyOverride;
    }

    /**
     * Sets Bank Funded Only Override.
     * Bank Funded Only override
     *
     * @maps bank_funded_only_override
     */
    public function setBankFundedOnlyOverride(?bool $bankFundedOnlyOverride): void
    {
        $this->bankFundedOnlyOverride = $bankFundedOnlyOverride;
    }

    /**
     * Returns Email.
     * Email
     */
    public function getEmail(): ?string
    {
        if (count($this->email) == 0) {
            return null;
        }
        return $this->email['value'];
    }

    /**
     * Sets Email.
     * Email
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email['value'] = $email;
    }

    /**
     * Unsets Email.
     * Email
     */
    public function unsetEmail(): void
    {
        $this->email = [];
    }

    /**
     * Returns Contact Id.
     * Contact ID
     */
    public function getContactId(): ?string
    {
        if (count($this->contactId) == 0) {
            return null;
        }
        return $this->contactId['value'];
    }

    /**
     * Sets Contact Id.
     * Contact ID
     *
     * @maps contact_id
     */
    public function setContactId(?string $contactId): void
    {
        $this->contactId['value'] = $contactId;
    }

    /**
     * Unsets Contact Id.
     * Contact ID
     */
    public function unsetContactId(): void
    {
        $this->contactId = [];
    }

    /**
     * Returns Contact Api Id.
     * Contact API Id
     */
    public function getContactApiId(): ?string
    {
        if (count($this->contactApiId) == 0) {
            return null;
        }
        return $this->contactApiId['value'];
    }

    /**
     * Sets Contact Api Id.
     * Contact API Id
     *
     * @maps contact_api_id
     */
    public function setContactApiId(?string $contactApiId): void
    {
        $this->contactApiId['value'] = $contactApiId;
    }

    /**
     * Unsets Contact Api Id.
     * Contact API Id
     */
    public function unsetContactApiId(): void
    {
        $this->contactApiId = [];
    }

    /**
     * Returns Quick Invoice Api Id.
     * Quick Invoice API Id
     */
    public function getQuickInvoiceApiId(): ?string
    {
        if (count($this->quickInvoiceApiId) == 0) {
            return null;
        }
        return $this->quickInvoiceApiId['value'];
    }

    /**
     * Sets Quick Invoice Api Id.
     * Quick Invoice API Id
     *
     * @maps quick_invoice_api_id
     */
    public function setQuickInvoiceApiId(?string $quickInvoiceApiId): void
    {
        $this->quickInvoiceApiId['value'] = $quickInvoiceApiId;
    }

    /**
     * Unsets Quick Invoice Api Id.
     * Quick Invoice API Id
     */
    public function unsetQuickInvoiceApiId(): void
    {
        $this->quickInvoiceApiId = [];
    }

    /**
     * Returns Customer Id.
     * Customer Id
     */
    public function getCustomerId(): ?string
    {
        if (count($this->customerId) == 0) {
            return null;
        }
        return $this->customerId['value'];
    }

    /**
     * Sets Customer Id.
     * Customer Id
     *
     * @maps customer_id
     */
    public function setCustomerId(?string $customerId): void
    {
        $this->customerId['value'] = $customerId;
    }

    /**
     * Unsets Customer Id.
     * Customer Id
     */
    public function unsetCustomerId(): void
    {
        $this->customerId = [];
    }

    /**
     * Returns Expire Date.
     * Expire Date.
     */
    public function getExpireDate(): ?string
    {
        if (count($this->expireDate) == 0) {
            return null;
        }
        return $this->expireDate['value'];
    }

    /**
     * Sets Expire Date.
     * Expire Date.
     *
     * @maps expire_date
     */
    public function setExpireDate(?string $expireDate): void
    {
        $this->expireDate['value'] = $expireDate;
    }

    /**
     * Unsets Expire Date.
     * Expire Date.
     */
    public function unsetExpireDate(): void
    {
        $this->expireDate = [];
    }

    /**
     * Returns Allow Partial Pay.
     * Allow partial pay
     */
    public function getAllowPartialPay(): ?bool
    {
        return $this->allowPartialPay;
    }

    /**
     * Sets Allow Partial Pay.
     * Allow partial pay
     *
     * @maps allow_partial_pay
     */
    public function setAllowPartialPay(?bool $allowPartialPay): void
    {
        $this->allowPartialPay = $allowPartialPay;
    }

    /**
     * Returns Attach Files to Email.
     * Attach Files to Email
     */
    public function getAttachFilesToEmail(): ?bool
    {
        return $this->attachFilesToEmail;
    }

    /**
     * Sets Attach Files to Email.
     * Attach Files to Email
     *
     * @maps attach_files_to_email
     */
    public function setAttachFilesToEmail(?bool $attachFilesToEmail): void
    {
        $this->attachFilesToEmail = $attachFilesToEmail;
    }

    /**
     * Returns Send Email.
     * Send Email
     */
    public function getSendEmail(): ?bool
    {
        return $this->sendEmail;
    }

    /**
     * Sets Send Email.
     * Send Email
     *
     * @maps send_email
     */
    public function setSendEmail(?bool $sendEmail): void
    {
        $this->sendEmail = $sendEmail;
    }

    /**
     * Returns Invoice Number.
     * Invoice number
     */
    public function getInvoiceNumber(): ?string
    {
        if (count($this->invoiceNumber) == 0) {
            return null;
        }
        return $this->invoiceNumber['value'];
    }

    /**
     * Sets Invoice Number.
     * Invoice number
     *
     * @maps invoice_number
     */
    public function setInvoiceNumber(?string $invoiceNumber): void
    {
        $this->invoiceNumber['value'] = $invoiceNumber;
    }

    /**
     * Unsets Invoice Number.
     * Invoice number
     */
    public function unsetInvoiceNumber(): void
    {
        $this->invoiceNumber = [];
    }

    /**
     * Returns Item Header.
     * Item Header
     */
    public function getItemHeader(): ?string
    {
        if (count($this->itemHeader) == 0) {
            return null;
        }
        return $this->itemHeader['value'];
    }

    /**
     * Sets Item Header.
     * Item Header
     *
     * @maps item_header
     */
    public function setItemHeader(?string $itemHeader): void
    {
        $this->itemHeader['value'] = $itemHeader;
    }

    /**
     * Unsets Item Header.
     * Item Header
     */
    public function unsetItemHeader(): void
    {
        $this->itemHeader = [];
    }

    /**
     * Returns Item Footer.
     * Item footer
     */
    public function getItemFooter(): ?string
    {
        if (count($this->itemFooter) == 0) {
            return null;
        }
        return $this->itemFooter['value'];
    }

    /**
     * Sets Item Footer.
     * Item footer
     *
     * @maps item_footer
     */
    public function setItemFooter(?string $itemFooter): void
    {
        $this->itemFooter['value'] = $itemFooter;
    }

    /**
     * Unsets Item Footer.
     * Item footer
     */
    public function unsetItemFooter(): void
    {
        $this->itemFooter = [];
    }

    /**
     * Returns Amount Due.
     * Amount Due
     */
    public function getAmountDue(): ?int
    {
        if (count($this->amountDue) == 0) {
            return null;
        }
        return $this->amountDue['value'];
    }

    /**
     * Sets Amount Due.
     * Amount Due
     *
     * @maps amount_due
     */
    public function setAmountDue(?int $amountDue): void
    {
        $this->amountDue['value'] = $amountDue;
    }

    /**
     * Unsets Amount Due.
     * Amount Due
     */
    public function unsetAmountDue(): void
    {
        $this->amountDue = [];
    }

    /**
     * Returns Notification Email.
     * Notification email
     */
    public function getNotificationEmail(): ?string
    {
        if (count($this->notificationEmail) == 0) {
            return null;
        }
        return $this->notificationEmail['value'];
    }

    /**
     * Sets Notification Email.
     * Notification email
     *
     * @maps notification_email
     */
    public function setNotificationEmail(?string $notificationEmail): void
    {
        $this->notificationEmail['value'] = $notificationEmail;
    }

    /**
     * Unsets Notification Email.
     * Notification email
     */
    public function unsetNotificationEmail(): void
    {
        $this->notificationEmail = [];
    }

    /**
     * Returns Status Id.
     * (DEPRECATED) Status Id
     */
    public function getStatusId(): ?int
    {
        if (count($this->statusId) == 0) {
            return null;
        }
        return $this->statusId['value'];
    }

    /**
     * Sets Status Id.
     * (DEPRECATED) Status Id
     *
     * @maps status_id
     */
    public function setStatusId(?int $statusId): void
    {
        $this->statusId['value'] = $statusId;
    }

    /**
     * Unsets Status Id.
     * (DEPRECATED) Status Id
     */
    public function unsetStatusId(): void
    {
        $this->statusId = [];
    }

    /**
     * Returns Status Code.
     * Status Code
     */
    public function getStatusCode(): ?int
    {
        if (count($this->statusCode) == 0) {
            return null;
        }
        return $this->statusCode['value'];
    }

    /**
     * Sets Status Code.
     * Status Code
     *
     * @maps status_code
     */
    public function setStatusCode(?int $statusCode): void
    {
        $this->statusCode['value'] = $statusCode;
    }

    /**
     * Unsets Status Code.
     * Status Code
     */
    public function unsetStatusCode(): void
    {
        $this->statusCode = [];
    }

    /**
     * Returns Note.
     * Note
     */
    public function getNote(): ?string
    {
        if (count($this->note) == 0) {
            return null;
        }
        return $this->note['value'];
    }

    /**
     * Sets Note.
     * Note
     *
     * @maps note
     */
    public function setNote(?string $note): void
    {
        $this->note['value'] = $note;
    }

    /**
     * Unsets Note.
     * Note
     */
    public function unsetNote(): void
    {
        $this->note = [];
    }

    /**
     * Returns Notification Days Before Due Date.
     * Notification days before due date
     */
    public function getNotificationDaysBeforeDueDate(): ?int
    {
        if (count($this->notificationDaysBeforeDueDate) == 0) {
            return null;
        }
        return $this->notificationDaysBeforeDueDate['value'];
    }

    /**
     * Sets Notification Days Before Due Date.
     * Notification days before due date
     *
     * @maps notification_days_before_due_date
     */
    public function setNotificationDaysBeforeDueDate(?int $notificationDaysBeforeDueDate): void
    {
        $this->notificationDaysBeforeDueDate['value'] = $notificationDaysBeforeDueDate;
    }

    /**
     * Unsets Notification Days Before Due Date.
     * Notification days before due date
     */
    public function unsetNotificationDaysBeforeDueDate(): void
    {
        $this->notificationDaysBeforeDueDate = [];
    }

    /**
     * Returns Notification Days After Due Date.
     * Notification days after due date
     */
    public function getNotificationDaysAfterDueDate(): ?int
    {
        if (count($this->notificationDaysAfterDueDate) == 0) {
            return null;
        }
        return $this->notificationDaysAfterDueDate['value'];
    }

    /**
     * Sets Notification Days After Due Date.
     * Notification days after due date
     *
     * @maps notification_days_after_due_date
     */
    public function setNotificationDaysAfterDueDate(?int $notificationDaysAfterDueDate): void
    {
        $this->notificationDaysAfterDueDate['value'] = $notificationDaysAfterDueDate;
    }

    /**
     * Unsets Notification Days After Due Date.
     * Notification days after due date
     */
    public function unsetNotificationDaysAfterDueDate(): void
    {
        $this->notificationDaysAfterDueDate = [];
    }

    /**
     * Returns Notification on Due Date.
     * Notification on due date
     */
    public function getNotificationOnDueDate(): ?bool
    {
        return $this->notificationOnDueDate;
    }

    /**
     * Sets Notification on Due Date.
     * Notification on due date
     *
     * @maps notification_on_due_date
     */
    public function setNotificationOnDueDate(?bool $notificationOnDueDate): void
    {
        $this->notificationOnDueDate = $notificationOnDueDate;
    }

    /**
     * Returns Send Text to Pay.
     * Send Text To Pay
     */
    public function getSendTextToPay(): ?bool
    {
        return $this->sendTextToPay;
    }

    /**
     * Sets Send Text to Pay.
     * Send Text To Pay
     *
     * @maps send_text_to_pay
     */
    public function setSendTextToPay(?bool $sendTextToPay): void
    {
        $this->sendTextToPay = $sendTextToPay;
    }

    /**
     * Returns Files.
     * Files
     *
     * @return array[]|null
     */
    public function getFiles(): ?array
    {
        return $this->files;
    }

    /**
     * Sets Files.
     * Files
     *
     * @maps files
     *
     * @param array[]|null $files
     */
    public function setFiles(?array $files): void
    {
        $this->files = $files;
    }

    /**
     * Returns Remaining Balance.
     * Remaining Balance
     */
    public function getRemainingBalance(): ?int
    {
        if (count($this->remainingBalance) == 0) {
            return null;
        }
        return $this->remainingBalance['value'];
    }

    /**
     * Sets Remaining Balance.
     * Remaining Balance
     *
     * @maps remaining_balance
     */
    public function setRemainingBalance(?int $remainingBalance): void
    {
        $this->remainingBalance['value'] = $remainingBalance;
    }

    /**
     * Unsets Remaining Balance.
     * Remaining Balance
     */
    public function unsetRemainingBalance(): void
    {
        $this->remainingBalance = [];
    }

    /**
     * Returns Single Payment Min Amount.
     * Single Payment Min Amount
     */
    public function getSinglePaymentMinAmount(): ?int
    {
        if (count($this->singlePaymentMinAmount) == 0) {
            return null;
        }
        return $this->singlePaymentMinAmount['value'];
    }

    /**
     * Sets Single Payment Min Amount.
     * Single Payment Min Amount
     *
     * @maps single_payment_min_amount
     */
    public function setSinglePaymentMinAmount(?int $singlePaymentMinAmount): void
    {
        $this->singlePaymentMinAmount['value'] = $singlePaymentMinAmount;
    }

    /**
     * Unsets Single Payment Min Amount.
     * Single Payment Min Amount
     */
    public function unsetSinglePaymentMinAmount(): void
    {
        $this->singlePaymentMinAmount = [];
    }

    /**
     * Returns Single Payment Max Amount.
     * Single Payment Max Amount
     */
    public function getSinglePaymentMaxAmount(): ?int
    {
        if (count($this->singlePaymentMaxAmount) == 0) {
            return null;
        }
        return $this->singlePaymentMaxAmount['value'];
    }

    /**
     * Sets Single Payment Max Amount.
     * Single Payment Max Amount
     *
     * @maps single_payment_max_amount
     */
    public function setSinglePaymentMaxAmount(?int $singlePaymentMaxAmount): void
    {
        $this->singlePaymentMaxAmount['value'] = $singlePaymentMaxAmount;
    }

    /**
     * Unsets Single Payment Max Amount.
     * Single Payment Max Amount
     */
    public function unsetSinglePaymentMaxAmount(): void
    {
        $this->singlePaymentMaxAmount = [];
    }

    /**
     * Returns Cell Phone.
     * Cell Phone
     */
    public function getCellPhone(): ?string
    {
        if (count($this->cellPhone) == 0) {
            return null;
        }
        return $this->cellPhone['value'];
    }

    /**
     * Sets Cell Phone.
     * Cell Phone
     *
     * @maps cell_phone
     */
    public function setCellPhone(?string $cellPhone): void
    {
        $this->cellPhone['value'] = $cellPhone;
    }

    /**
     * Unsets Cell Phone.
     * Cell Phone
     */
    public function unsetCellPhone(): void
    {
        $this->cellPhone = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->locationId)) {
            $json['location_id']                       = $this->locationId['value'];
        }
        if (!empty($this->title)) {
            $json['title']                             = $this->title['value'];
        }
        if (!empty($this->ccProductTransactionId)) {
            $json['cc_product_transaction_id']         = $this->ccProductTransactionId['value'];
        }
        if (!empty($this->achProductTransactionId)) {
            $json['ach_product_transaction_id']        = $this->achProductTransactionId['value'];
        }
        if (!empty($this->dueDate)) {
            $json['due_date']                          = $this->dueDate['value'];
        }
        if (isset($this->itemList)) {
            $json['item_list']                         = $this->itemList;
        }
        if (isset($this->allowOverpayment)) {
            $json['allow_overpayment']                 = $this->allowOverpayment;
        }
        if (isset($this->bankFundedOnlyOverride)) {
            $json['bank_funded_only_override']         = $this->bankFundedOnlyOverride;
        }
        if (!empty($this->email)) {
            $json['email']                             = $this->email['value'];
        }
        if (!empty($this->contactId)) {
            $json['contact_id']                        = $this->contactId['value'];
        }
        if (!empty($this->contactApiId)) {
            $json['contact_api_id']                    = $this->contactApiId['value'];
        }
        if (!empty($this->quickInvoiceApiId)) {
            $json['quick_invoice_api_id']              = $this->quickInvoiceApiId['value'];
        }
        if (!empty($this->customerId)) {
            $json['customer_id']                       = $this->customerId['value'];
        }
        if (!empty($this->expireDate)) {
            $json['expire_date']                       = $this->expireDate['value'];
        }
        if (isset($this->allowPartialPay)) {
            $json['allow_partial_pay']                 = $this->allowPartialPay;
        }
        if (isset($this->attachFilesToEmail)) {
            $json['attach_files_to_email']             = $this->attachFilesToEmail;
        }
        if (isset($this->sendEmail)) {
            $json['send_email']                        = $this->sendEmail;
        }
        if (!empty($this->invoiceNumber)) {
            $json['invoice_number']                    = $this->invoiceNumber['value'];
        }
        if (!empty($this->itemHeader)) {
            $json['item_header']                       = $this->itemHeader['value'];
        }
        if (!empty($this->itemFooter)) {
            $json['item_footer']                       = $this->itemFooter['value'];
        }
        if (!empty($this->amountDue)) {
            $json['amount_due']                        = $this->amountDue['value'];
        }
        if (!empty($this->notificationEmail)) {
            $json['notification_email']                = $this->notificationEmail['value'];
        }
        if (!empty($this->statusId)) {
            $json['status_id']                         = $this->statusId['value'];
        }
        if (!empty($this->statusCode)) {
            $json['status_code']                       = $this->statusCode['value'];
        }
        if (!empty($this->note)) {
            $json['note']                              = $this->note['value'];
        }
        if (!empty($this->notificationDaysBeforeDueDate)) {
            $json['notification_days_before_due_date'] = $this->notificationDaysBeforeDueDate['value'];
        }
        if (!empty($this->notificationDaysAfterDueDate)) {
            $json['notification_days_after_due_date']  = $this->notificationDaysAfterDueDate['value'];
        }
        if (isset($this->notificationOnDueDate)) {
            $json['notification_on_due_date']          = $this->notificationOnDueDate;
        }
        if (isset($this->sendTextToPay)) {
            $json['send_text_to_pay']                  = $this->sendTextToPay;
        }
        if (isset($this->files)) {
            $json['files']                             = $this->files;
        }
        if (!empty($this->remainingBalance)) {
            $json['remaining_balance']                 = $this->remainingBalance['value'];
        }
        if (!empty($this->singlePaymentMinAmount)) {
            $json['single_payment_min_amount']         = $this->singlePaymentMinAmount['value'];
        }
        if (!empty($this->singlePaymentMaxAmount)) {
            $json['single_payment_max_amount']         = $this->singlePaymentMaxAmount['value'];
        }
        if (!empty($this->cellPhone)) {
            $json['cell_phone']                        = $this->cellPhone['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
