<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * Resource Information on `expand`
 */
class Resources implements \JsonSerializable
{
    /**
     * @var string
     */
    private $title;

    /**
     * @var array
     */
    private $priv = [];

    /**
     * @var string
     */
    private $resourceName;

    /**
     * @var int
     */
    private $id;

    /**
     * @var array
     */
    private $lastUsedDate = [];

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $modifiedTs = [];

    /**
     * @param string $title
     * @param string $resourceName
     * @param int $id
     */
    public function __construct(string $title, string $resourceName, int $id)
    {
        $this->title = $title;
        $this->resourceName = $resourceName;
        $this->id = $id;
    }

    /**
     * Returns Title.
     * Resource Title
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Resource Title
     *
     * @required
     * @maps title
     */
    public function setTitle(string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Priv.
     * Priv
     */
    public function getPriv(): ?string
    {
        if (count($this->priv) == 0) {
            return null;
        }
        return $this->priv['value'];
    }

    /**
     * Sets Priv.
     * Priv
     *
     * @maps priv
     */
    public function setPriv(?string $priv): void
    {
        $this->priv['value'] = $priv;
    }

    /**
     * Unsets Priv.
     * Priv
     */
    public function unsetPriv(): void
    {
        $this->priv = [];
    }

    /**
     * Returns Resource Name.
     * Resource Name
     */
    public function getResourceName(): string
    {
        return $this->resourceName;
    }

    /**
     * Sets Resource Name.
     * Resource Name
     *
     * @required
     * @maps resource_name
     */
    public function setResourceName(string $resourceName): void
    {
        $this->resourceName = $resourceName;
    }

    /**
     * Returns Id.
     * Resource ID
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Resource ID
     *
     * @required
     * @maps id
     */
    public function setId(int $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Last Used Date.
     * Last Used Date
     */
    public function getLastUsedDate(): ?int
    {
        if (count($this->lastUsedDate) == 0) {
            return null;
        }
        return $this->lastUsedDate['value'];
    }

    /**
     * Sets Last Used Date.
     * Last Used Date
     *
     * @maps last_used_date
     */
    public function setLastUsedDate(?int $lastUsedDate): void
    {
        $this->lastUsedDate['value'] = $lastUsedDate;
    }

    /**
     * Unsets Last Used Date.
     * Last Used Date
     */
    public function unsetLastUsedDate(): void
    {
        $this->lastUsedDate = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        if (count($this->modifiedTs) == 0) {
            return null;
        }
        return $this->modifiedTs['value'];
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs['value'] = $modifiedTs;
    }

    /**
     * Unsets Modified Ts.
     * Modified Time Stamp
     */
    public function unsetModifiedTs(): void
    {
        $this->modifiedTs = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['title']              = $this->title;
        if (!empty($this->priv)) {
            $json['priv']           = $this->priv['value'];
        }
        $json['resource_name']      = $this->resourceName;
        $json['id']                 = $this->id;
        if (!empty($this->lastUsedDate)) {
            $json['last_used_date'] = $this->lastUsedDate['value'];
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']     = $this->createdTs['value'];
        }
        if (!empty($this->modifiedTs)) {
            $json['modified_ts']    = $this->modifiedTs['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
