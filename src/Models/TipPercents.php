<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * A JSON of tip percents the JSON MUST contain only these three fields: percent_1, percent_2,
 * percent_3
 */
class TipPercents implements \JsonSerializable
{
    /**
     * @var array
     */
    private $percent1 = [];

    /**
     * @var array
     */
    private $percent2 = [];

    /**
     * @var array
     */
    private $percent3 = [];

    /**
     * Returns Percent 1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function getPercent1(): ?int
    {
        if (count($this->percent1) == 0) {
            return null;
        }
        return $this->percent1['value'];
    }

    /**
     * Sets Percent 1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     *
     * @maps percent_1
     */
    public function setPercent1(?int $percent1): void
    {
        $this->percent1['value'] = $percent1;
    }

    /**
     * Unsets Percent 1.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function unsetPercent1(): void
    {
        $this->percent1 = [];
    }

    /**
     * Returns Percent 2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function getPercent2(): ?int
    {
        if (count($this->percent2) == 0) {
            return null;
        }
        return $this->percent2['value'];
    }

    /**
     * Sets Percent 2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     *
     * @maps percent_2
     */
    public function setPercent2(?int $percent2): void
    {
        $this->percent2['value'] = $percent2;
    }

    /**
     * Unsets Percent 2.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function unsetPercent2(): void
    {
        $this->percent2 = [];
    }

    /**
     * Returns Percent 3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function getPercent3(): ?int
    {
        if (count($this->percent3) == 0) {
            return null;
        }
        return $this->percent3['value'];
    }

    /**
     * Sets Percent 3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     *
     * @maps percent_3
     */
    public function setPercent3(?int $percent3): void
    {
        $this->percent3['value'] = $percent3;
    }

    /**
     * Unsets Percent 3.
     * field can only contain a value from 0 to 99, if 1 field is NULL, all fields must be null.
     */
    public function unsetPercent3(): void
    {
        $this->percent3 = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->percent1)) {
            $json['percent_1'] = $this->percent1['value'];
        }
        if (!empty($this->percent2)) {
            $json['percent_2'] = $this->percent2['value'];
        }
        if (!empty($this->percent3)) {
            $json['percent_3'] = $this->percent3['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
