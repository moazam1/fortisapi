<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Field13;

/**
 * Builder for model Field13
 *
 * @see Field13
 */
class Field13Builder
{
    /**
     * @var Field13
     */
    private $instance;

    private function __construct(Field13 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new field 13 Builder object.
     */
    public static function init(string $id, string $label, string $fieldType, array $position): self
    {
        return new self(new Field13($id, $label, $fieldType, $position));
    }

    /**
     * Sets required field.
     */
    public function required(?bool $value): self
    {
        $this->instance->setRequired($value);
        return $this;
    }

    /**
     * Sets readonly field.
     */
    public function readonly(?bool $value): self
    {
        $this->instance->setReadonly($value);
        return $this;
    }

    /**
     * Sets visible field.
     */
    public function visible(?bool $value): self
    {
        $this->instance->setVisible($value);
        return $this;
    }

    /**
     * Sets value field.
     */
    public function value(?string $value): self
    {
        $this->instance->setValue($value);
        return $this;
    }

    /**
     * Unsets value field.
     */
    public function unsetValue(): self
    {
        $this->instance->unsetValue();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new field 13 object.
     */
    public function build(): Field13
    {
        return CoreHelper::clone($this->instance);
    }
}
