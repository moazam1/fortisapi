<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Sort18;

/**
 * Builder for model Sort18
 *
 * @see Sort18
 */
class Sort18Builder
{
    /**
     * @var Sort18
     */
    private $instance;

    private function __construct(Sort18 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new sort 18 Builder object.
     */
    public static function init(): self
    {
        return new self(new Sort18());
    }

    /**
     * Sets location id field.
     */
    public function locationId(?array $value): self
    {
        $this->instance->setLocationId($value);
        return $this;
    }

    /**
     * Sets terminal id field.
     */
    public function terminalId(?array $value): self
    {
        $this->instance->setTerminalId($value);
        return $this;
    }

    /**
     * Sets require signature field.
     */
    public function requireSignature(?array $value): self
    {
        $this->instance->setRequireSignature($value);
        return $this;
    }

    /**
     * Sets device term api id field.
     */
    public function deviceTermApiId(?array $value): self
    {
        $this->instance->setDeviceTermApiId($value);
        return $this;
    }

    /**
     * Sets terms conditions field.
     */
    public function termsConditions(?array $value): self
    {
        $this->instance->setTermsConditions($value);
        return $this;
    }

    /**
     * Sets id field.
     */
    public function id(?array $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets reason code id field.
     */
    public function reasonCodeId(?array $value): self
    {
        $this->instance->setReasonCodeId($value);
        return $this;
    }

    /**
     * Sets signature field.
     */
    public function signature(?array $value): self
    {
        $this->instance->setSignature($value);
        return $this;
    }

    /**
     * Sets created ts field.
     */
    public function createdTs(?array $value): self
    {
        $this->instance->setCreatedTs($value);
        return $this;
    }

    /**
     * Sets modified ts field.
     */
    public function modifiedTs(?array $value): self
    {
        $this->instance->setModifiedTs($value);
        return $this;
    }

    /**
     * Sets created user id field.
     */
    public function createdUserId(?array $value): self
    {
        $this->instance->setCreatedUserId($value);
        return $this;
    }

    /**
     * Sets created user field.
     */
    public function createdUser(?array $value): self
    {
        $this->instance->setCreatedUser($value);
        return $this;
    }

    /**
     * Sets location field.
     */
    public function location(?array $value): self
    {
        $this->instance->setLocation($value);
        return $this;
    }

    /**
     * Sets terminal field.
     */
    public function terminal(?array $value): self
    {
        $this->instance->setTerminal($value);
        return $this;
    }

    /**
     * Sets changelogs field.
     */
    public function changelogs(?array $value): self
    {
        $this->instance->setChangelogs($value);
        return $this;
    }

    /**
     * Sets reason code field.
     */
    public function reasonCode(?array $value): self
    {
        $this->instance->setReasonCode($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new sort 18 object.
     */
    public function build(): Sort18
    {
        return CoreHelper::clone($this->instance);
    }
}
