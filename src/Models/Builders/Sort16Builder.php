<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Sort16;

/**
 * Builder for model Sort16
 *
 * @see Sort16
 */
class Sort16Builder
{
    /**
     * @var Sort16
     */
    private $instance;

    private function __construct(Sort16 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new sort 16 Builder object.
     */
    public static function init(): self
    {
        return new self(new Sort16());
    }

    /**
     * Sets id field.
     */
    public function id(?array $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets created ts field.
     */
    public function createdTs(?array $value): self
    {
        $this->instance->setCreatedTs($value);
        return $this;
    }

    /**
     * Sets product transaction id field.
     */
    public function productTransactionId(?array $value): self
    {
        $this->instance->setProductTransactionId($value);
        return $this;
    }

    /**
     * Sets processing status id field.
     */
    public function processingStatusId(?array $value): self
    {
        $this->instance->setProcessingStatusId($value);
        return $this;
    }

    /**
     * Sets batch num field.
     */
    public function batchNum(?array $value): self
    {
        $this->instance->setBatchNum($value);
        return $this;
    }

    /**
     * Sets is open field.
     */
    public function isOpen(?array $value): self
    {
        $this->instance->setIsOpen($value);
        return $this;
    }

    /**
     * Sets settlement file name field.
     */
    public function settlementFileName(?array $value): self
    {
        $this->instance->setSettlementFileName($value);
        return $this;
    }

    /**
     * Sets batch close ts field.
     */
    public function batchCloseTs(?array $value): self
    {
        $this->instance->setBatchCloseTs($value);
        return $this;
    }

    /**
     * Sets batch close detail field.
     */
    public function batchCloseDetail(?array $value): self
    {
        $this->instance->setBatchCloseDetail($value);
        return $this;
    }

    /**
     * Sets total sale amount field.
     */
    public function totalSaleAmount(?array $value): self
    {
        $this->instance->setTotalSaleAmount($value);
        return $this;
    }

    /**
     * Sets total sale count field.
     */
    public function totalSaleCount(?array $value): self
    {
        $this->instance->setTotalSaleCount($value);
        return $this;
    }

    /**
     * Sets total refund amount field.
     */
    public function totalRefundAmount(?array $value): self
    {
        $this->instance->setTotalRefundAmount($value);
        return $this;
    }

    /**
     * Sets total refund count field.
     */
    public function totalRefundCount(?array $value): self
    {
        $this->instance->setTotalRefundCount($value);
        return $this;
    }

    /**
     * Sets total void amount field.
     */
    public function totalVoidAmount(?array $value): self
    {
        $this->instance->setTotalVoidAmount($value);
        return $this;
    }

    /**
     * Sets total void count field.
     */
    public function totalVoidCount(?array $value): self
    {
        $this->instance->setTotalVoidCount($value);
        return $this;
    }

    /**
     * Sets changelogs field.
     */
    public function changelogs(?array $value): self
    {
        $this->instance->setChangelogs($value);
        return $this;
    }

    /**
     * Sets postback logs field.
     */
    public function postbackLogs(?array $value): self
    {
        $this->instance->setPostbackLogs($value);
        return $this;
    }

    /**
     * Sets product transaction field.
     */
    public function productTransaction(?array $value): self
    {
        $this->instance->setProductTransaction($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new sort 16 object.
     */
    public function build(): Sort16
    {
        return CoreHelper::clone($this->instance);
    }
}
