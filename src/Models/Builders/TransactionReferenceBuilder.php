<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\TransactionReference;

/**
 * Builder for model TransactionReference
 *
 * @see TransactionReference
 */
class TransactionReferenceBuilder
{
    /**
     * @var TransactionReference
     */
    private $instance;

    private function __construct(TransactionReference $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new transaction reference Builder object.
     */
    public static function init(): self
    {
        return new self(new TransactionReference());
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets transaction id field.
     */
    public function transactionId(?string $value): self
    {
        $this->instance->setTransactionId($value);
        return $this;
    }

    /**
     * Unsets transaction id field.
     */
    public function unsetTransactionId(): self
    {
        $this->instance->unsetTransactionId();
        return $this;
    }

    /**
     * Sets previous transaction id field.
     */
    public function previousTransactionId(?string $value): self
    {
        $this->instance->setPreviousTransactionId($value);
        return $this;
    }

    /**
     * Unsets previous transaction id field.
     */
    public function unsetPreviousTransactionId(): self
    {
        $this->instance->unsetPreviousTransactionId();
        return $this;
    }

    /**
     * Sets transaction amount field.
     */
    public function transactionAmount(?int $value): self
    {
        $this->instance->setTransactionAmount($value);
        return $this;
    }

    /**
     * Unsets transaction amount field.
     */
    public function unsetTransactionAmount(): self
    {
        $this->instance->unsetTransactionAmount();
        return $this;
    }

    /**
     * Sets previous transaction amount field.
     */
    public function previousTransactionAmount(?int $value): self
    {
        $this->instance->setPreviousTransactionAmount($value);
        return $this;
    }

    /**
     * Unsets previous transaction amount field.
     */
    public function unsetPreviousTransactionAmount(): self
    {
        $this->instance->unsetPreviousTransactionAmount();
        return $this;
    }

    /**
     * Sets previous transaction created ts field.
     */
    public function previousTransactionCreatedTs(?float $value): self
    {
        $this->instance->setPreviousTransactionCreatedTs($value);
        return $this;
    }

    /**
     * Unsets previous transaction created ts field.
     */
    public function unsetPreviousTransactionCreatedTs(): self
    {
        $this->instance->unsetPreviousTransactionCreatedTs();
        return $this;
    }

    /**
     * Sets reference type field.
     */
    public function referenceType(?string $value): self
    {
        $this->instance->setReferenceType($value);
        return $this;
    }

    /**
     * Unsets reference type field.
     */
    public function unsetReferenceType(): self
    {
        $this->instance->unsetReferenceType();
        return $this;
    }

    /**
     * Sets created ts field.
     */
    public function createdTs(?int $value): self
    {
        $this->instance->setCreatedTs($value);
        return $this;
    }

    /**
     * Unsets created ts field.
     */
    public function unsetCreatedTs(): self
    {
        $this->instance->unsetCreatedTs();
        return $this;
    }

    /**
     * Sets created user id field.
     */
    public function createdUserId(?string $value): self
    {
        $this->instance->setCreatedUserId($value);
        return $this;
    }

    /**
     * Unsets created user id field.
     */
    public function unsetCreatedUserId(): self
    {
        $this->instance->unsetCreatedUserId();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new transaction reference object.
     */
    public function build(): TransactionReference
    {
        return CoreHelper::clone($this->instance);
    }
}
