<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\AltBankAccount;
use FortisAPILib\Models\BankAccount;
use FortisAPILib\Models\Contact;
use FortisAPILib\Models\Data8;
use FortisAPILib\Models\Location4;
use FortisAPILib\Models\PrimaryPrincipal;

/**
 * Builder for model Data8
 *
 * @see Data8
 */
class Data8Builder
{
    /**
     * @var Data8
     */
    private $instance;

    private function __construct(Data8 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new data 8 Builder object.
     */
    public static function init(
        PrimaryPrincipal $primaryPrincipal,
        string $templateCode,
        string $email,
        string $dbaName,
        Location4 $location,
        string $appDelivery,
        BankAccount $bankAccount,
        AltBankAccount $altBankAccount,
        Contact $contact,
        string $clientAppId
    ): self {
        return new self(new Data8(
            $primaryPrincipal,
            $templateCode,
            $email,
            $dbaName,
            $location,
            $appDelivery,
            $bankAccount,
            $altBankAccount,
            $contact,
            $clientAppId
        ));
    }

    /**
     * Sets parent id field.
     */
    public function parentId(?string $value): self
    {
        $this->instance->setParentId($value);
        return $this;
    }

    /**
     * Unsets parent id field.
     */
    public function unsetParentId(): self
    {
        $this->instance->unsetParentId();
        return $this;
    }

    /**
     * Sets business category field.
     */
    public function businessCategory(?string $value): self
    {
        $this->instance->setBusinessCategory($value);
        return $this;
    }

    /**
     * Unsets business category field.
     */
    public function unsetBusinessCategory(): self
    {
        $this->instance->unsetBusinessCategory();
        return $this;
    }

    /**
     * Sets business type field.
     */
    public function businessType(?string $value): self
    {
        $this->instance->setBusinessType($value);
        return $this;
    }

    /**
     * Unsets business type field.
     */
    public function unsetBusinessType(): self
    {
        $this->instance->unsetBusinessType();
        return $this;
    }

    /**
     * Sets business description field.
     */
    public function businessDescription(?string $value): self
    {
        $this->instance->setBusinessDescription($value);
        return $this;
    }

    /**
     * Unsets business description field.
     */
    public function unsetBusinessDescription(): self
    {
        $this->instance->unsetBusinessDescription();
        return $this;
    }

    /**
     * Sets swiped percent field.
     */
    public function swipedPercent(?int $value): self
    {
        $this->instance->setSwipedPercent($value);
        return $this;
    }

    /**
     * Unsets swiped percent field.
     */
    public function unsetSwipedPercent(): self
    {
        $this->instance->unsetSwipedPercent();
        return $this;
    }

    /**
     * Sets keyed percent field.
     */
    public function keyedPercent(?int $value): self
    {
        $this->instance->setKeyedPercent($value);
        return $this;
    }

    /**
     * Unsets keyed percent field.
     */
    public function unsetKeyedPercent(): self
    {
        $this->instance->unsetKeyedPercent();
        return $this;
    }

    /**
     * Sets ecommerce percent field.
     */
    public function ecommercePercent(?int $value): self
    {
        $this->instance->setEcommercePercent($value);
        return $this;
    }

    /**
     * Unsets ecommerce percent field.
     */
    public function unsetEcommercePercent(): self
    {
        $this->instance->unsetEcommercePercent();
        return $this;
    }

    /**
     * Sets ownership type field.
     */
    public function ownershipType(?string $value): self
    {
        $this->instance->setOwnershipType($value);
        return $this;
    }

    /**
     * Unsets ownership type field.
     */
    public function unsetOwnershipType(): self
    {
        $this->instance->unsetOwnershipType();
        return $this;
    }

    /**
     * Sets fed tax id field.
     */
    public function fedTaxId(?string $value): self
    {
        $this->instance->setFedTaxId($value);
        return $this;
    }

    /**
     * Unsets fed tax id field.
     */
    public function unsetFedTaxId(): self
    {
        $this->instance->unsetFedTaxId();
        return $this;
    }

    /**
     * Sets cc average ticket range field.
     */
    public function ccAverageTicketRange(?int $value): self
    {
        $this->instance->setCcAverageTicketRange($value);
        return $this;
    }

    /**
     * Unsets cc average ticket range field.
     */
    public function unsetCcAverageTicketRange(): self
    {
        $this->instance->unsetCcAverageTicketRange();
        return $this;
    }

    /**
     * Sets cc monthly volume range field.
     */
    public function ccMonthlyVolumeRange(?int $value): self
    {
        $this->instance->setCcMonthlyVolumeRange($value);
        return $this;
    }

    /**
     * Unsets cc monthly volume range field.
     */
    public function unsetCcMonthlyVolumeRange(): self
    {
        $this->instance->unsetCcMonthlyVolumeRange();
        return $this;
    }

    /**
     * Sets cc high ticket field.
     */
    public function ccHighTicket(?int $value): self
    {
        $this->instance->setCcHighTicket($value);
        return $this;
    }

    /**
     * Unsets cc high ticket field.
     */
    public function unsetCcHighTicket(): self
    {
        $this->instance->unsetCcHighTicket();
        return $this;
    }

    /**
     * Sets ec average ticket range field.
     */
    public function ecAverageTicketRange(?int $value): self
    {
        $this->instance->setEcAverageTicketRange($value);
        return $this;
    }

    /**
     * Unsets ec average ticket range field.
     */
    public function unsetEcAverageTicketRange(): self
    {
        $this->instance->unsetEcAverageTicketRange();
        return $this;
    }

    /**
     * Sets ec monthly volume range field.
     */
    public function ecMonthlyVolumeRange(?int $value): self
    {
        $this->instance->setEcMonthlyVolumeRange($value);
        return $this;
    }

    /**
     * Unsets ec monthly volume range field.
     */
    public function unsetEcMonthlyVolumeRange(): self
    {
        $this->instance->unsetEcMonthlyVolumeRange();
        return $this;
    }

    /**
     * Sets ec high ticket field.
     */
    public function ecHighTicket(?int $value): self
    {
        $this->instance->setEcHighTicket($value);
        return $this;
    }

    /**
     * Unsets ec high ticket field.
     */
    public function unsetEcHighTicket(): self
    {
        $this->instance->unsetEcHighTicket();
        return $this;
    }

    /**
     * Sets website field.
     */
    public function website(?string $value): self
    {
        $this->instance->setWebsite($value);
        return $this;
    }

    /**
     * Unsets website field.
     */
    public function unsetWebsite(): self
    {
        $this->instance->unsetWebsite();
        return $this;
    }

    /**
     * Sets legal name field.
     */
    public function legalName(?string $value): self
    {
        $this->instance->setLegalName($value);
        return $this;
    }

    /**
     * Unsets legal name field.
     */
    public function unsetLegalName(): self
    {
        $this->instance->unsetLegalName();
        return $this;
    }

    /**
     * Sets app link field.
     */
    public function appLink(?string $value): self
    {
        $this->instance->setAppLink($value);
        return $this;
    }

    /**
     * Unsets app link field.
     */
    public function unsetAppLink(): self
    {
        $this->instance->unsetAppLink();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new data 8 object.
     */
    public function build(): Data8
    {
        return CoreHelper::clone($this->instance);
    }
}
