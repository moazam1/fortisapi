<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\SurchargeTransaction;

/**
 * Builder for model SurchargeTransaction
 *
 * @see SurchargeTransaction
 */
class SurchargeTransactionBuilder
{
    /**
     * @var SurchargeTransaction
     */
    private $instance;

    private function __construct(SurchargeTransaction $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new surcharge transaction Builder object.
     */
    public static function init(string $modelName, string $transactionId, int $surchargeFee, int $surchargeRate): self
    {
        return new self(new SurchargeTransaction($modelName, $transactionId, $surchargeFee, $surchargeRate));
    }

    /**
     * Sets id field.
     */
    public function id(?string $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets surcharge amount field.
     */
    public function surchargeAmount(?int $value): self
    {
        $this->instance->setSurchargeAmount($value);
        return $this;
    }

    /**
     * Unsets surcharge amount field.
     */
    public function unsetSurchargeAmount(): self
    {
        $this->instance->unsetSurchargeAmount();
        return $this;
    }

    /**
     * Sets surcharge transaction min field.
     */
    public function surchargeTransactionMin(?int $value): self
    {
        $this->instance->setSurchargeTransactionMin($value);
        return $this;
    }

    /**
     * Unsets surcharge transaction min field.
     */
    public function unsetSurchargeTransactionMin(): self
    {
        $this->instance->unsetSurchargeTransactionMin();
        return $this;
    }

    /**
     * Sets surcharge transaction max field.
     */
    public function surchargeTransactionMax(?int $value): self
    {
        $this->instance->setSurchargeTransactionMax($value);
        return $this;
    }

    /**
     * Unsets surcharge transaction max field.
     */
    public function unsetSurchargeTransactionMax(): self
    {
        $this->instance->unsetSurchargeTransactionMax();
        return $this;
    }

    /**
     * Sets created field.
     */
    public function created(?int $value): self
    {
        $this->instance->setCreated($value);
        return $this;
    }

    /**
     * Unsets created field.
     */
    public function unsetCreated(): self
    {
        $this->instance->unsetCreated();
        return $this;
    }

    /**
     * Sets modified field.
     */
    public function modified(?int $value): self
    {
        $this->instance->setModified($value);
        return $this;
    }

    /**
     * Unsets modified field.
     */
    public function unsetModified(): self
    {
        $this->instance->unsetModified();
        return $this;
    }

    /**
     * Sets created user id field.
     */
    public function createdUserId(?string $value): self
    {
        $this->instance->setCreatedUserId($value);
        return $this;
    }

    /**
     * Unsets created user id field.
     */
    public function unsetCreatedUserId(): self
    {
        $this->instance->unsetCreatedUserId();
        return $this;
    }

    /**
     * Sets modified user id field.
     */
    public function modifiedUserId(?string $value): self
    {
        $this->instance->setModifiedUserId($value);
        return $this;
    }

    /**
     * Unsets modified user id field.
     */
    public function unsetModifiedUserId(): self
    {
        $this->instance->unsetModifiedUserId();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new surcharge transaction object.
     */
    public function build(): SurchargeTransaction
    {
        return CoreHelper::clone($this->instance);
    }
}
