<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Address2;
use FortisAPILib\Models\UiPrefs;
use FortisAPILib\Models\User1;

/**
 * Builder for model User1
 *
 * @see User1
 */
class User1Builder
{
    /**
     * @var User1
     */
    private $instance;

    private function __construct(User1 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new user 1 Builder object.
     */
    public static function init(
        string $email,
        string $lastName,
        string $primaryLocationId,
        string $tz,
        string $username,
        int $userTypeCode,
        string $id,
        bool $status,
        int $loginAttempts,
        int $lastLoginTs,
        int $createdTs,
        int $modifiedTs,
        string $createdUserId,
        string $currentDateTime
    ): self {
        return new self(new User1(
            $email,
            $lastName,
            $primaryLocationId,
            $tz,
            $username,
            $userTypeCode,
            $id,
            $status,
            $loginAttempts,
            $lastLoginTs,
            $createdTs,
            $modifiedTs,
            $createdUserId,
            $currentDateTime
        ));
    }

    /**
     * Sets account number field.
     */
    public function accountNumber(?string $value): self
    {
        $this->instance->setAccountNumber($value);
        return $this;
    }

    /**
     * Unsets account number field.
     */
    public function unsetAccountNumber(): self
    {
        $this->instance->unsetAccountNumber();
        return $this;
    }

    /**
     * Sets branding domain url field.
     */
    public function brandingDomainUrl(?string $value): self
    {
        $this->instance->setBrandingDomainUrl($value);
        return $this;
    }

    /**
     * Unsets branding domain url field.
     */
    public function unsetBrandingDomainUrl(): self
    {
        $this->instance->unsetBrandingDomainUrl();
        return $this;
    }

    /**
     * Sets cell phone field.
     */
    public function cellPhone(?string $value): self
    {
        $this->instance->setCellPhone($value);
        return $this;
    }

    /**
     * Unsets cell phone field.
     */
    public function unsetCellPhone(): self
    {
        $this->instance->unsetCellPhone();
        return $this;
    }

    /**
     * Sets company name field.
     */
    public function companyName(?string $value): self
    {
        $this->instance->setCompanyName($value);
        return $this;
    }

    /**
     * Unsets company name field.
     */
    public function unsetCompanyName(): self
    {
        $this->instance->unsetCompanyName();
        return $this;
    }

    /**
     * Sets contact id field.
     */
    public function contactId(?string $value): self
    {
        $this->instance->setContactId($value);
        return $this;
    }

    /**
     * Unsets contact id field.
     */
    public function unsetContactId(): self
    {
        $this->instance->unsetContactId();
        return $this;
    }

    /**
     * Sets date of birth field.
     */
    public function dateOfBirth(?string $value): self
    {
        $this->instance->setDateOfBirth($value);
        return $this;
    }

    /**
     * Unsets date of birth field.
     */
    public function unsetDateOfBirth(): self
    {
        $this->instance->unsetDateOfBirth();
        return $this;
    }

    /**
     * Sets domain id field.
     */
    public function domainId(?string $value): self
    {
        $this->instance->setDomainId($value);
        return $this;
    }

    /**
     * Unsets domain id field.
     */
    public function unsetDomainId(): self
    {
        $this->instance->unsetDomainId();
        return $this;
    }

    /**
     * Sets email trx receipt field.
     */
    public function emailTrxReceipt(?bool $value): self
    {
        $this->instance->setEmailTrxReceipt($value);
        return $this;
    }

    /**
     * Sets home phone field.
     */
    public function homePhone(?string $value): self
    {
        $this->instance->setHomePhone($value);
        return $this;
    }

    /**
     * Unsets home phone field.
     */
    public function unsetHomePhone(): self
    {
        $this->instance->unsetHomePhone();
        return $this;
    }

    /**
     * Sets first name field.
     */
    public function firstName(?string $value): self
    {
        $this->instance->setFirstName($value);
        return $this;
    }

    /**
     * Unsets first name field.
     */
    public function unsetFirstName(): self
    {
        $this->instance->unsetFirstName();
        return $this;
    }

    /**
     * Sets locale field.
     */
    public function locale(?string $value): self
    {
        $this->instance->setLocale($value);
        return $this;
    }

    /**
     * Unsets locale field.
     */
    public function unsetLocale(): self
    {
        $this->instance->unsetLocale();
        return $this;
    }

    /**
     * Sets office phone field.
     */
    public function officePhone(?string $value): self
    {
        $this->instance->setOfficePhone($value);
        return $this;
    }

    /**
     * Unsets office phone field.
     */
    public function unsetOfficePhone(): self
    {
        $this->instance->unsetOfficePhone();
        return $this;
    }

    /**
     * Sets office ext phone field.
     */
    public function officeExtPhone(?string $value): self
    {
        $this->instance->setOfficeExtPhone($value);
        return $this;
    }

    /**
     * Unsets office ext phone field.
     */
    public function unsetOfficeExtPhone(): self
    {
        $this->instance->unsetOfficeExtPhone();
        return $this;
    }

    /**
     * Sets requires new password field.
     */
    public function requiresNewPassword(?string $value): self
    {
        $this->instance->setRequiresNewPassword($value);
        return $this;
    }

    /**
     * Unsets requires new password field.
     */
    public function unsetRequiresNewPassword(): self
    {
        $this->instance->unsetRequiresNewPassword();
        return $this;
    }

    /**
     * Sets terms condition code field.
     */
    public function termsConditionCode(?string $value): self
    {
        $this->instance->setTermsConditionCode($value);
        return $this;
    }

    /**
     * Unsets terms condition code field.
     */
    public function unsetTermsConditionCode(): self
    {
        $this->instance->unsetTermsConditionCode();
        return $this;
    }

    /**
     * Sets ui prefs field.
     */
    public function uiPrefs(?UiPrefs $value): self
    {
        $this->instance->setUiPrefs($value);
        return $this;
    }

    /**
     * Sets user api key field.
     */
    public function userApiKey(?string $value): self
    {
        $this->instance->setUserApiKey($value);
        return $this;
    }

    /**
     * Unsets user api key field.
     */
    public function unsetUserApiKey(): self
    {
        $this->instance->unsetUserApiKey();
        return $this;
    }

    /**
     * Sets user hash key field.
     */
    public function userHashKey(?string $value): self
    {
        $this->instance->setUserHashKey($value);
        return $this;
    }

    /**
     * Unsets user hash key field.
     */
    public function unsetUserHashKey(): self
    {
        $this->instance->unsetUserHashKey();
        return $this;
    }

    /**
     * Sets password field.
     */
    public function password(?string $value): self
    {
        $this->instance->setPassword($value);
        return $this;
    }

    /**
     * Unsets password field.
     */
    public function unsetPassword(): self
    {
        $this->instance->unsetPassword();
        return $this;
    }

    /**
     * Sets zip field.
     */
    public function zip(?string $value): self
    {
        $this->instance->setZip($value);
        return $this;
    }

    /**
     * Unsets zip field.
     */
    public function unsetZip(): self
    {
        $this->instance->unsetZip();
        return $this;
    }

    /**
     * Sets location id field.
     */
    public function locationId(?string $value): self
    {
        $this->instance->setLocationId($value);
        return $this;
    }

    /**
     * Unsets location id field.
     */
    public function unsetLocationId(): self
    {
        $this->instance->unsetLocationId();
        return $this;
    }

    /**
     * Sets contact api id field.
     */
    public function contactApiId(?string $value): self
    {
        $this->instance->setContactApiId($value);
        return $this;
    }

    /**
     * Unsets contact api id field.
     */
    public function unsetContactApiId(): self
    {
        $this->instance->unsetContactApiId();
        return $this;
    }

    /**
     * Sets primary location api id field.
     */
    public function primaryLocationApiId(?string $value): self
    {
        $this->instance->setPrimaryLocationApiId($value);
        return $this;
    }

    /**
     * Unsets primary location api id field.
     */
    public function unsetPrimaryLocationApiId(): self
    {
        $this->instance->unsetPrimaryLocationApiId();
        return $this;
    }

    /**
     * Sets status id field.
     */
    public function statusId(?int $value): self
    {
        $this->instance->setStatusId($value);
        return $this;
    }

    /**
     * Unsets status id field.
     */
    public function unsetStatusId(): self
    {
        $this->instance->unsetStatusId();
        return $this;
    }

    /**
     * Sets api only field.
     */
    public function apiOnly(?bool $value): self
    {
        $this->instance->setApiOnly($value);
        return $this;
    }

    /**
     * Sets is invitation field.
     */
    public function isInvitation(?bool $value): self
    {
        $this->instance->setIsInvitation($value);
        return $this;
    }

    /**
     * Sets address field.
     */
    public function address(?Address2 $value): self
    {
        $this->instance->setAddress($value);
        return $this;
    }

    /**
     * Sets terms accepted ts field.
     */
    public function termsAcceptedTs(?int $value): self
    {
        $this->instance->setTermsAcceptedTs($value);
        return $this;
    }

    /**
     * Unsets terms accepted ts field.
     */
    public function unsetTermsAcceptedTs(): self
    {
        $this->instance->unsetTermsAcceptedTs();
        return $this;
    }

    /**
     * Sets terms agree ip field.
     */
    public function termsAgreeIp(?string $value): self
    {
        $this->instance->setTermsAgreeIp($value);
        return $this;
    }

    /**
     * Unsets terms agree ip field.
     */
    public function unsetTermsAgreeIp(): self
    {
        $this->instance->unsetTermsAgreeIp();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new user 1 object.
     */
    public function build(): User1
    {
        return CoreHelper::clone($this->instance);
    }
}
