<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Domain;

/**
 * Builder for model Domain
 *
 * @see Domain
 */
class DomainBuilder
{
    /**
     * @var Domain
     */
    private $instance;

    private function __construct(Domain $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new domain Builder object.
     */
    public static function init(
        string $url,
        string $title,
        bool $allowContactSignup,
        bool $allowContactRegistration,
        bool $allowContactLogin,
        string $id,
        int $createdTs,
        int $modifiedTs
    ): self {
        return new self(new Domain(
            $url,
            $title,
            $allowContactSignup,
            $allowContactRegistration,
            $allowContactLogin,
            $id,
            $createdTs,
            $modifiedTs
        ));
    }

    /**
     * Sets logo field.
     */
    public function logo(?string $value): self
    {
        $this->instance->setLogo($value);
        return $this;
    }

    /**
     * Unsets logo field.
     */
    public function unsetLogo(): self
    {
        $this->instance->unsetLogo();
        return $this;
    }

    /**
     * Sets support email field.
     */
    public function supportEmail(?string $value): self
    {
        $this->instance->setSupportEmail($value);
        return $this;
    }

    /**
     * Unsets support email field.
     */
    public function unsetSupportEmail(): self
    {
        $this->instance->unsetSupportEmail();
        return $this;
    }

    /**
     * Sets registration fields field.
     */
    public function registrationFields(?array $value): self
    {
        $this->instance->setRegistrationFields($value);
        return $this;
    }

    /**
     * Sets company name field.
     */
    public function companyName(?string $value): self
    {
        $this->instance->setCompanyName($value);
        return $this;
    }

    /**
     * Unsets company name field.
     */
    public function unsetCompanyName(): self
    {
        $this->instance->unsetCompanyName();
        return $this;
    }

    /**
     * Sets nav color field.
     */
    public function navColor(?string $value): self
    {
        $this->instance->setNavColor($value);
        return $this;
    }

    /**
     * Unsets nav color field.
     */
    public function unsetNavColor(): self
    {
        $this->instance->unsetNavColor();
        return $this;
    }

    /**
     * Sets button primary color field.
     */
    public function buttonPrimaryColor(?string $value): self
    {
        $this->instance->setButtonPrimaryColor($value);
        return $this;
    }

    /**
     * Unsets button primary color field.
     */
    public function unsetButtonPrimaryColor(): self
    {
        $this->instance->unsetButtonPrimaryColor();
        return $this;
    }

    /**
     * Sets logo background color field.
     */
    public function logoBackgroundColor(?string $value): self
    {
        $this->instance->setLogoBackgroundColor($value);
        return $this;
    }

    /**
     * Unsets logo background color field.
     */
    public function unsetLogoBackgroundColor(): self
    {
        $this->instance->unsetLogoBackgroundColor();
        return $this;
    }

    /**
     * Sets icon background color field.
     */
    public function iconBackgroundColor(?string $value): self
    {
        $this->instance->setIconBackgroundColor($value);
        return $this;
    }

    /**
     * Unsets icon background color field.
     */
    public function unsetIconBackgroundColor(): self
    {
        $this->instance->unsetIconBackgroundColor();
        return $this;
    }

    /**
     * Sets menu text background color field.
     */
    public function menuTextBackgroundColor(?string $value): self
    {
        $this->instance->setMenuTextBackgroundColor($value);
        return $this;
    }

    /**
     * Unsets menu text background color field.
     */
    public function unsetMenuTextBackgroundColor(): self
    {
        $this->instance->unsetMenuTextBackgroundColor();
        return $this;
    }

    /**
     * Sets menu text color field.
     */
    public function menuTextColor(?string $value): self
    {
        $this->instance->setMenuTextColor($value);
        return $this;
    }

    /**
     * Unsets menu text color field.
     */
    public function unsetMenuTextColor(): self
    {
        $this->instance->unsetMenuTextColor();
        return $this;
    }

    /**
     * Sets right menu background color field.
     */
    public function rightMenuBackgroundColor(?string $value): self
    {
        $this->instance->setRightMenuBackgroundColor($value);
        return $this;
    }

    /**
     * Unsets right menu background color field.
     */
    public function unsetRightMenuBackgroundColor(): self
    {
        $this->instance->unsetRightMenuBackgroundColor();
        return $this;
    }

    /**
     * Sets right menu text color field.
     */
    public function rightMenuTextColor(?string $value): self
    {
        $this->instance->setRightMenuTextColor($value);
        return $this;
    }

    /**
     * Unsets right menu text color field.
     */
    public function unsetRightMenuTextColor(): self
    {
        $this->instance->unsetRightMenuTextColor();
        return $this;
    }

    /**
     * Sets button primary text color field.
     */
    public function buttonPrimaryTextColor(?string $value): self
    {
        $this->instance->setButtonPrimaryTextColor($value);
        return $this;
    }

    /**
     * Unsets button primary text color field.
     */
    public function unsetButtonPrimaryTextColor(): self
    {
        $this->instance->unsetButtonPrimaryTextColor();
        return $this;
    }

    /**
     * Sets nav logo field.
     */
    public function navLogo(?string $value): self
    {
        $this->instance->setNavLogo($value);
        return $this;
    }

    /**
     * Unsets nav logo field.
     */
    public function unsetNavLogo(): self
    {
        $this->instance->unsetNavLogo();
        return $this;
    }

    /**
     * Sets fav icon field.
     */
    public function favIcon(?string $value): self
    {
        $this->instance->setFavIcon($value);
        return $this;
    }

    /**
     * Unsets fav icon field.
     */
    public function unsetFavIcon(): self
    {
        $this->instance->unsetFavIcon();
        return $this;
    }

    /**
     * Sets aes key field.
     */
    public function aesKey(?string $value): self
    {
        $this->instance->setAesKey($value);
        return $this;
    }

    /**
     * Unsets aes key field.
     */
    public function unsetAesKey(): self
    {
        $this->instance->unsetAesKey();
        return $this;
    }

    /**
     * Sets help text field.
     */
    public function helpText(?string $value): self
    {
        $this->instance->setHelpText($value);
        return $this;
    }

    /**
     * Unsets help text field.
     */
    public function unsetHelpText(): self
    {
        $this->instance->unsetHelpText();
        return $this;
    }

    /**
     * Sets email reply to field.
     */
    public function emailReplyTo(?string $value): self
    {
        $this->instance->setEmailReplyTo($value);
        return $this;
    }

    /**
     * Unsets email reply to field.
     */
    public function unsetEmailReplyTo(): self
    {
        $this->instance->unsetEmailReplyTo();
        return $this;
    }

    /**
     * Sets email field.
     */
    public function email(?string $value): self
    {
        $this->instance->setEmail($value);
        return $this;
    }

    /**
     * Unsets email field.
     */
    public function unsetEmail(): self
    {
        $this->instance->unsetEmail();
        return $this;
    }

    /**
     * Sets custom javascript field.
     */
    public function customJavascript(?string $value): self
    {
        $this->instance->setCustomJavascript($value);
        return $this;
    }

    /**
     * Unsets custom javascript field.
     */
    public function unsetCustomJavascript(): self
    {
        $this->instance->unsetCustomJavascript();
        return $this;
    }

    /**
     * Sets custom theme field.
     */
    public function customTheme(?string $value): self
    {
        $this->instance->setCustomTheme($value);
        return $this;
    }

    /**
     * Unsets custom theme field.
     */
    public function unsetCustomTheme(): self
    {
        $this->instance->unsetCustomTheme();
        return $this;
    }

    /**
     * Sets custom css field.
     */
    public function customCss(?string $value): self
    {
        $this->instance->setCustomCss($value);
        return $this;
    }

    /**
     * Unsets custom css field.
     */
    public function unsetCustomCss(): self
    {
        $this->instance->unsetCustomCss();
        return $this;
    }

    /**
     * Sets contact user default entry page field.
     */
    public function contactUserDefaultEntryPage(?string $value): self
    {
        $this->instance->setContactUserDefaultEntryPage($value);
        return $this;
    }

    /**
     * Unsets contact user default entry page field.
     */
    public function unsetContactUserDefaultEntryPage(): self
    {
        $this->instance->unsetContactUserDefaultEntryPage();
        return $this;
    }

    /**
     * Sets contact user default auth roles field.
     */
    public function contactUserDefaultAuthRoles(?array $value): self
    {
        $this->instance->setContactUserDefaultAuthRoles($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new domain object.
     */
    public function build(): Domain
    {
        return CoreHelper::clone($this->instance);
    }
}
