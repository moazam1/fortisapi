<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Filter7;

/**
 * Builder for model Filter7
 *
 * @see Filter7
 */
class Filter7Builder
{
    /**
     * @var Filter7
     */
    private $instance;

    private function __construct(Filter7 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new filter 7 Builder object.
     */
    public static function init(): self
    {
        return new self(new Filter7());
    }

    /**
     * Sets account vault id field.
     */
    public function accountVaultId(?array $value): self
    {
        $this->instance->setAccountVaultId($value);
        return $this;
    }

    /**
     * Sets token id field.
     */
    public function tokenId(?array $value): self
    {
        $this->instance->setTokenId($value);
        return $this;
    }

    /**
     * Sets account vault api id field.
     */
    public function accountVaultApiId(?array $value): self
    {
        $this->instance->setAccountVaultApiId($value);
        return $this;
    }

    /**
     * Sets token api id field.
     */
    public function tokenApiId(?array $value): self
    {
        $this->instance->setTokenApiId($value);
        return $this;
    }

    /**
     * Sets joi field.
     */
    public function joi(?array $value): self
    {
        $this->instance->setJoi($value);
        return $this;
    }

    /**
     * Sets active field.
     */
    public function active(?array $value): self
    {
        $this->instance->setActive($value);
        return $this;
    }

    /**
     * Sets description field.
     */
    public function description(?array $value): self
    {
        $this->instance->setDescription($value);
        return $this;
    }

    /**
     * Sets end date field.
     */
    public function endDate(?array $value): self
    {
        $this->instance->setEndDate($value);
        return $this;
    }

    /**
     * Sets installment total count field.
     */
    public function installmentTotalCount(?array $value): self
    {
        $this->instance->setInstallmentTotalCount($value);
        return $this;
    }

    /**
     * Sets interval field.
     */
    public function interval(?array $value): self
    {
        $this->instance->setInterval($value);
        return $this;
    }

    /**
     * Sets interval type field.
     */
    public function intervalType(?array $value): self
    {
        $this->instance->setIntervalType($value);
        return $this;
    }

    /**
     * Sets location id field.
     */
    public function locationId(?array $value): self
    {
        $this->instance->setLocationId($value);
        return $this;
    }

    /**
     * Sets notification days field.
     */
    public function notificationDays(?array $value): self
    {
        $this->instance->setNotificationDays($value);
        return $this;
    }

    /**
     * Sets payment method field.
     */
    public function paymentMethod(?array $value): self
    {
        $this->instance->setPaymentMethod($value);
        return $this;
    }

    /**
     * Sets product transaction id field.
     */
    public function productTransactionId(?array $value): self
    {
        $this->instance->setProductTransactionId($value);
        return $this;
    }

    /**
     * Sets recurring id field.
     */
    public function recurringId(?array $value): self
    {
        $this->instance->setRecurringId($value);
        return $this;
    }

    /**
     * Sets recurring api id field.
     */
    public function recurringApiId(?array $value): self
    {
        $this->instance->setRecurringApiId($value);
        return $this;
    }

    /**
     * Sets start date field.
     */
    public function startDate(?array $value): self
    {
        $this->instance->setStartDate($value);
        return $this;
    }

    /**
     * Sets status field.
     */
    public function status(?array $value): self
    {
        $this->instance->setStatus($value);
        return $this;
    }

    /**
     * Sets transaction amount field.
     */
    public function transactionAmount(?array $value): self
    {
        $this->instance->setTransactionAmount($value);
        return $this;
    }

    /**
     * Sets terms agree field.
     */
    public function termsAgree(?array $value): self
    {
        $this->instance->setTermsAgree($value);
        return $this;
    }

    /**
     * Sets terms agree ip field.
     */
    public function termsAgreeIp(?array $value): self
    {
        $this->instance->setTermsAgreeIp($value);
        return $this;
    }

    /**
     * Sets recurring c 1 field.
     */
    public function recurringC1(?array $value): self
    {
        $this->instance->setRecurringC1($value);
        return $this;
    }

    /**
     * Sets recurring c 2 field.
     */
    public function recurringC2(?array $value): self
    {
        $this->instance->setRecurringC2($value);
        return $this;
    }

    /**
     * Sets recurring c 3 field.
     */
    public function recurringC3(?array $value): self
    {
        $this->instance->setRecurringC3($value);
        return $this;
    }

    /**
     * Sets send to proc as recur field.
     */
    public function sendToProcAsRecur(?array $value): self
    {
        $this->instance->setSendToProcAsRecur($value);
        return $this;
    }

    /**
     * Sets id field.
     */
    public function id(?array $value): self
    {
        $this->instance->setId($value);
        return $this;
    }

    /**
     * Sets next run date field.
     */
    public function nextRunDate(?array $value): self
    {
        $this->instance->setNextRunDate($value);
        return $this;
    }

    /**
     * Sets created ts field.
     */
    public function createdTs($value): self
    {
        $this->instance->setCreatedTs($value);
        return $this;
    }

    /**
     * Sets modified ts field.
     */
    public function modifiedTs($value): self
    {
        $this->instance->setModifiedTs($value);
        return $this;
    }

    /**
     * Sets recurring type id field.
     */
    public function recurringTypeId(?array $value): self
    {
        $this->instance->setRecurringTypeId($value);
        return $this;
    }

    /**
     * Sets installment amount total field.
     */
    public function installmentAmountTotal(?array $value): self
    {
        $this->instance->setInstallmentAmountTotal($value);
        return $this;
    }

    /**
     * Sets log emails field.
     */
    public function logEmails(?array $value): self
    {
        $this->instance->setLogEmails($value);
        return $this;
    }

    /**
     * Sets contact field.
     */
    public function contact(?array $value): self
    {
        $this->instance->setContact($value);
        return $this;
    }

    /**
     * Sets account vault field.
     */
    public function accountVault(?array $value): self
    {
        $this->instance->setAccountVault($value);
        return $this;
    }

    /**
     * Sets created user field.
     */
    public function createdUser(?array $value): self
    {
        $this->instance->setCreatedUser($value);
        return $this;
    }

    /**
     * Sets signature field.
     */
    public function signature(?array $value): self
    {
        $this->instance->setSignature($value);
        return $this;
    }

    /**
     * Sets payment schedule field.
     */
    public function paymentSchedule(?array $value): self
    {
        $this->instance->setPaymentSchedule($value);
        return $this;
    }

    /**
     * Sets location field.
     */
    public function location(?array $value): self
    {
        $this->instance->setLocation($value);
        return $this;
    }

    /**
     * Sets product transaction field.
     */
    public function productTransaction(?array $value): self
    {
        $this->instance->setProductTransaction($value);
        return $this;
    }

    /**
     * Sets next run date min field.
     */
    public function nextRunDateMin(?array $value): self
    {
        $this->instance->setNextRunDateMin($value);
        return $this;
    }

    /**
     * Sets next run date max field.
     */
    public function nextRunDateMax(?array $value): self
    {
        $this->instance->setNextRunDateMax($value);
        return $this;
    }

    /**
     * Sets tags field.
     */
    public function tags(?array $value): self
    {
        $this->instance->setTags($value);
        return $this;
    }

    /**
     * Sets all tags field.
     */
    public function allTags(?array $value): self
    {
        $this->instance->setAllTags($value);
        return $this;
    }

    /**
     * Sets changelogs field.
     */
    public function changelogs(?array $value): self
    {
        $this->instance->setChangelogs($value);
        return $this;
    }

    /**
     * Sets forecast field.
     */
    public function forecast(?array $value): self
    {
        $this->instance->setForecast($value);
        return $this;
    }

    /**
     * Sets recurring splits field.
     */
    public function recurringSplits(?array $value): self
    {
        $this->instance->setRecurringSplits($value);
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new filter 7 object.
     */
    public function build(): Filter7
    {
        return CoreHelper::clone($this->instance);
    }
}
