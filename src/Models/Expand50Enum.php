<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

class Expand50Enum
{
    public const LOG_EMAILS = 'log_emails';

    public const IS_VOIDABLE = 'is_voidable';

    public const IS_REVERSIBLE = 'is_reversible';

    public const IS_REFUNDABLE = 'is_refundable';

    public const IS_COMPLETABLE = 'is_completable';

    public const IS_SETTLED = 'is_settled';

    public const CREATED_USER = 'created_user';

    public const LOCATION = 'location';

    public const CONTACT = 'contact';

    public const CHANGELOGS = 'changelogs';

    public const PRODUCT_TRANSACTION = 'product_transaction';

    public const TAGS = 'tags';

    public const ALL_TAGS = 'all_tags';

    public const RECURRING = 'recurring';

    public const TAGTRANSACTIONS = 'tagTransactions';

    public const DECLINED_RECURRING_NOTIFICATION = 'declined_recurring_notification';

    public const PAYMENT_RECURRING_NOTIFICATION = 'payment_recurring_notification';

    public const ACCOUNT_VAULT = 'account_vault';

    public const QUICK_INVOICE = 'quick_invoice';

    public const DEVELOPER_COMPANY = 'developer_company';

    public const TERMINAL = 'terminal';

    public const HOSTED_PAYMENT_PAGE = 'hosted_payment_page';

    public const TRANSACTION_LEVEL3 = 'transaction_level3';

    public const DEVELOPER_COMPANY_ID = 'developer_company_id';

    public const TRANSACTION_HISTORIES = 'transaction_histories';

    public const SURCHARGE_TRANSACTION = 'surcharge_transaction';

    public const SURCHARGE = 'surcharge';

    public const SIGNATURE = 'signature';

    public const REASON_CODE = 'reason_code';

    public const TYPE = 'type';

    public const STATUS = 'status';

    public const TRANSACTION_BATCH = 'transaction_batch';

    public const TRANSACTION_SPLITS = 'transaction_splits';

    public const POSTBACK_LOGS = 'postback_logs';

    public const CURRENCY_TYPE = 'currency_type';

    public const TRANSACTION_REFERENCES = 'transaction_references';

    public const SAVED_ACCOUNT = 'saved_account';

    private const _ALL_VALUES = [
        self::LOG_EMAILS,
        self::IS_VOIDABLE,
        self::IS_REVERSIBLE,
        self::IS_REFUNDABLE,
        self::IS_COMPLETABLE,
        self::IS_SETTLED,
        self::CREATED_USER,
        self::LOCATION,
        self::CONTACT,
        self::CHANGELOGS,
        self::PRODUCT_TRANSACTION,
        self::TAGS,
        self::ALL_TAGS,
        self::RECURRING,
        self::TAGTRANSACTIONS,
        self::DECLINED_RECURRING_NOTIFICATION,
        self::PAYMENT_RECURRING_NOTIFICATION,
        self::ACCOUNT_VAULT,
        self::QUICK_INVOICE,
        self::DEVELOPER_COMPANY,
        self::TERMINAL,
        self::HOSTED_PAYMENT_PAGE,
        self::TRANSACTION_LEVEL3,
        self::DEVELOPER_COMPANY_ID,
        self::TRANSACTION_HISTORIES,
        self::SURCHARGE_TRANSACTION,
        self::SURCHARGE,
        self::SIGNATURE,
        self::REASON_CODE,
        self::TYPE,
        self::STATUS,
        self::TRANSACTION_BATCH,
        self::TRANSACTION_SPLITS,
        self::POSTBACK_LOGS,
        self::CURRENCY_TYPE,
        self::TRANSACTION_REFERENCES,
        self::SAVED_ACCOUNT
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for Expand50Enum.");
    }
}
