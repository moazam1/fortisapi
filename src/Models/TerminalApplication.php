<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * Terminal Application Information on `expand`
 */
class TerminalApplication implements \JsonSerializable
{
    /**
     * @var bool
     */
    private $standalone;

    /**
     * @var bool
     */
    private $emvCapable;

    /**
     * @var bool
     */
    private $nfcCapable;

    /**
     * @var bool
     */
    private $pinCapable;

    /**
     * @var bool
     */
    private $printCapable;

    /**
     * @var bool
     */
    private $msrCapable;

    /**
     * @var bool
     */
    private $sigCaptureCapable;

    /**
     * @var bool
     */
    private $mposTerminal;

    /**
     * @var array
     */
    private $title = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $modifiedTs = [];

    /**
     * @var array
     */
    private $createdUserId = [];

    /**
     * @param bool $standalone
     * @param bool $emvCapable
     * @param bool $nfcCapable
     * @param bool $pinCapable
     * @param bool $printCapable
     * @param bool $msrCapable
     * @param bool $sigCaptureCapable
     * @param bool $mposTerminal
     * @param string $id
     */
    public function __construct(
        bool $standalone,
        bool $emvCapable,
        bool $nfcCapable,
        bool $pinCapable,
        bool $printCapable,
        bool $msrCapable,
        bool $sigCaptureCapable,
        bool $mposTerminal,
        string $id
    ) {
        $this->standalone = $standalone;
        $this->emvCapable = $emvCapable;
        $this->nfcCapable = $nfcCapable;
        $this->pinCapable = $pinCapable;
        $this->printCapable = $printCapable;
        $this->msrCapable = $msrCapable;
        $this->sigCaptureCapable = $sigCaptureCapable;
        $this->mposTerminal = $mposTerminal;
        $this->id = $id;
    }

    /**
     * Returns Standalone.
     * Standalone
     */
    public function getStandalone(): bool
    {
        return $this->standalone;
    }

    /**
     * Sets Standalone.
     * Standalone
     *
     * @required
     * @maps standalone
     */
    public function setStandalone(bool $standalone): void
    {
        $this->standalone = $standalone;
    }

    /**
     * Returns Emv Capable.
     * Emv Capable
     */
    public function getEmvCapable(): bool
    {
        return $this->emvCapable;
    }

    /**
     * Sets Emv Capable.
     * Emv Capable
     *
     * @required
     * @maps emv_capable
     */
    public function setEmvCapable(bool $emvCapable): void
    {
        $this->emvCapable = $emvCapable;
    }

    /**
     * Returns Nfc Capable.
     * Nfc Capable
     */
    public function getNfcCapable(): bool
    {
        return $this->nfcCapable;
    }

    /**
     * Sets Nfc Capable.
     * Nfc Capable
     *
     * @required
     * @maps nfc_capable
     */
    public function setNfcCapable(bool $nfcCapable): void
    {
        $this->nfcCapable = $nfcCapable;
    }

    /**
     * Returns Pin Capable.
     * Pin Capable
     */
    public function getPinCapable(): bool
    {
        return $this->pinCapable;
    }

    /**
     * Sets Pin Capable.
     * Pin Capable
     *
     * @required
     * @maps pin_capable
     */
    public function setPinCapable(bool $pinCapable): void
    {
        $this->pinCapable = $pinCapable;
    }

    /**
     * Returns Print Capable.
     * Print Capable
     */
    public function getPrintCapable(): bool
    {
        return $this->printCapable;
    }

    /**
     * Sets Print Capable.
     * Print Capable
     *
     * @required
     * @maps print_capable
     */
    public function setPrintCapable(bool $printCapable): void
    {
        $this->printCapable = $printCapable;
    }

    /**
     * Returns Msr Capable.
     * Msr Capable
     */
    public function getMsrCapable(): bool
    {
        return $this->msrCapable;
    }

    /**
     * Sets Msr Capable.
     * Msr Capable
     *
     * @required
     * @maps msr_capable
     */
    public function setMsrCapable(bool $msrCapable): void
    {
        $this->msrCapable = $msrCapable;
    }

    /**
     * Returns Sig Capture Capable.
     * Sig Capture Capable
     */
    public function getSigCaptureCapable(): bool
    {
        return $this->sigCaptureCapable;
    }

    /**
     * Sets Sig Capture Capable.
     * Sig Capture Capable
     *
     * @required
     * @maps sig_capture_capable
     */
    public function setSigCaptureCapable(bool $sigCaptureCapable): void
    {
        $this->sigCaptureCapable = $sigCaptureCapable;
    }

    /**
     * Returns Mpos Terminal.
     * Mpos Terminal
     */
    public function getMposTerminal(): bool
    {
        return $this->mposTerminal;
    }

    /**
     * Sets Mpos Terminal.
     * Mpos Terminal
     *
     * @required
     * @maps mpos_terminal
     */
    public function setMposTerminal(bool $mposTerminal): void
    {
        $this->mposTerminal = $mposTerminal;
    }

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        if (count($this->title) == 0) {
            return null;
        }
        return $this->title['value'];
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title['value'] = $title;
    }

    /**
     * Unsets Title.
     * Title
     */
    public function unsetTitle(): void
    {
        $this->title = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Id.
     * Terminal Application Id
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Terminal Application Id
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        if (count($this->modifiedTs) == 0) {
            return null;
        }
        return $this->modifiedTs['value'];
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs['value'] = $modifiedTs;
    }

    /**
     * Unsets Modified Ts.
     * Modified Time Stamp
     */
    public function unsetModifiedTs(): void
    {
        $this->modifiedTs = [];
    }

    /**
     * Returns Created User Id.
     * User ID Created the register
     */
    public function getCreatedUserId(): ?string
    {
        if (count($this->createdUserId) == 0) {
            return null;
        }
        return $this->createdUserId['value'];
    }

    /**
     * Sets Created User Id.
     * User ID Created the register
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId['value'] = $createdUserId;
    }

    /**
     * Unsets Created User Id.
     * User ID Created the register
     */
    public function unsetCreatedUserId(): void
    {
        $this->createdUserId = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['standalone']          = $this->standalone;
        $json['emv_capable']         = $this->emvCapable;
        $json['nfc_capable']         = $this->nfcCapable;
        $json['pin_capable']         = $this->pinCapable;
        $json['print_capable']       = $this->printCapable;
        $json['msr_capable']         = $this->msrCapable;
        $json['sig_capture_capable'] = $this->sigCaptureCapable;
        $json['mpos_terminal']       = $this->mposTerminal;
        if (!empty($this->title)) {
            $json['title']           = $this->title['value'];
        }
        if (!empty($this->description)) {
            $json['description']     = $this->description['value'];
        }
        $json['id']                  = $this->id;
        if (!empty($this->createdTs)) {
            $json['created_ts']      = $this->createdTs['value'];
        }
        if (!empty($this->modifiedTs)) {
            $json['modified_ts']     = $this->modifiedTs['value'];
        }
        if (!empty($this->createdUserId)) {
            $json['created_user_id'] = $this->createdUserId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
