<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * Domain Information on `expand`
 */
class Domain implements \JsonSerializable
{
    /**
     * @var string
     */
    private $url;

    /**
     * @var string
     */
    private $title;

    /**
     * @var array
     */
    private $logo = [];

    /**
     * @var array
     */
    private $supportEmail = [];

    /**
     * @var bool
     */
    private $allowContactSignup;

    /**
     * @var bool
     */
    private $allowContactRegistration;

    /**
     * @var bool
     */
    private $allowContactLogin;

    /**
     * @var string[]|null
     */
    private $registrationFields;

    /**
     * @var array
     */
    private $companyName = [];

    /**
     * @var array
     */
    private $navColor = [];

    /**
     * @var array
     */
    private $buttonPrimaryColor = [];

    /**
     * @var array
     */
    private $logoBackgroundColor = [];

    /**
     * @var array
     */
    private $iconBackgroundColor = [];

    /**
     * @var array
     */
    private $menuTextBackgroundColor = [];

    /**
     * @var array
     */
    private $menuTextColor = [];

    /**
     * @var array
     */
    private $rightMenuBackgroundColor = [];

    /**
     * @var array
     */
    private $rightMenuTextColor = [];

    /**
     * @var array
     */
    private $buttonPrimaryTextColor = [];

    /**
     * @var array
     */
    private $navLogo = [];

    /**
     * @var array
     */
    private $favIcon = [];

    /**
     * @var array
     */
    private $aesKey = [];

    /**
     * @var array
     */
    private $helpText = [];

    /**
     * @var array
     */
    private $emailReplyTo = [];

    /**
     * @var array
     */
    private $email = [];

    /**
     * @var array
     */
    private $customJavascript = [];

    /**
     * @var array
     */
    private $customTheme = [];

    /**
     * @var array
     */
    private $customCss = [];

    /**
     * @var array
     */
    private $contactUserDefaultEntryPage = [];

    /**
     * @var array[]|null
     */
    private $contactUserDefaultAuthRoles;

    /**
     * @var string
     */
    private $id;

    /**
     * @var int
     */
    private $createdTs;

    /**
     * @var int
     */
    private $modifiedTs;

    /**
     * @param string $url
     * @param string $title
     * @param bool $allowContactSignup
     * @param bool $allowContactRegistration
     * @param bool $allowContactLogin
     * @param string $id
     * @param int $createdTs
     * @param int $modifiedTs
     */
    public function __construct(
        string $url,
        string $title,
        bool $allowContactSignup,
        bool $allowContactRegistration,
        bool $allowContactLogin,
        string $id,
        int $createdTs,
        int $modifiedTs
    ) {
        $this->url = $url;
        $this->title = $title;
        $this->allowContactSignup = $allowContactSignup;
        $this->allowContactRegistration = $allowContactRegistration;
        $this->allowContactLogin = $allowContactLogin;
        $this->id = $id;
        $this->createdTs = $createdTs;
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Url.
     * URL
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * Sets Url.
     * URL
     *
     * @required
     * @maps url
     */
    public function setUrl(string $url): void
    {
        $this->url = $url;
    }

    /**
     * Returns Title.
     * Domain Name
     */
    public function getTitle(): string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Domain Name
     *
     * @required
     * @maps title
     */
    public function setTitle(string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Logo.
     * Logo
     */
    public function getLogo(): ?string
    {
        if (count($this->logo) == 0) {
            return null;
        }
        return $this->logo['value'];
    }

    /**
     * Sets Logo.
     * Logo
     *
     * @maps logo
     */
    public function setLogo(?string $logo): void
    {
        $this->logo['value'] = $logo;
    }

    /**
     * Unsets Logo.
     * Logo
     */
    public function unsetLogo(): void
    {
        $this->logo = [];
    }

    /**
     * Returns Support Email.
     * Support Email
     */
    public function getSupportEmail(): ?string
    {
        if (count($this->supportEmail) == 0) {
            return null;
        }
        return $this->supportEmail['value'];
    }

    /**
     * Sets Support Email.
     * Support Email
     *
     * @maps support_email
     */
    public function setSupportEmail(?string $supportEmail): void
    {
        $this->supportEmail['value'] = $supportEmail;
    }

    /**
     * Unsets Support Email.
     * Support Email
     */
    public function unsetSupportEmail(): void
    {
        $this->supportEmail = [];
    }

    /**
     * Returns Allow Contact Signup.
     * Allow Contact Signup.
     */
    public function getAllowContactSignup(): bool
    {
        return $this->allowContactSignup;
    }

    /**
     * Sets Allow Contact Signup.
     * Allow Contact Signup.
     *
     * @required
     * @maps allow_contact_signup
     */
    public function setAllowContactSignup(bool $allowContactSignup): void
    {
        $this->allowContactSignup = $allowContactSignup;
    }

    /**
     * Returns Allow Contact Registration.
     * Allow Contact Registration.
     */
    public function getAllowContactRegistration(): bool
    {
        return $this->allowContactRegistration;
    }

    /**
     * Sets Allow Contact Registration.
     * Allow Contact Registration.
     *
     * @required
     * @maps allow_contact_registration
     */
    public function setAllowContactRegistration(bool $allowContactRegistration): void
    {
        $this->allowContactRegistration = $allowContactRegistration;
    }

    /**
     * Returns Allow Contact Login.
     * Allow Contact Login.
     */
    public function getAllowContactLogin(): bool
    {
        return $this->allowContactLogin;
    }

    /**
     * Sets Allow Contact Login.
     * Allow Contact Login.
     *
     * @required
     * @maps allow_contact_login
     */
    public function setAllowContactLogin(bool $allowContactLogin): void
    {
        $this->allowContactLogin = $allowContactLogin;
    }

    /**
     * Returns Registration Fields.
     * Registration Fields
     *
     * @return string[]|null
     */
    public function getRegistrationFields(): ?array
    {
        return $this->registrationFields;
    }

    /**
     * Sets Registration Fields.
     * Registration Fields
     *
     * @maps registration_fields
     * @factory \FortisAPILib\Models\RegistrationFieldEnum::checkValue
     *
     * @param string[]|null $registrationFields
     */
    public function setRegistrationFields(?array $registrationFields): void
    {
        $this->registrationFields = $registrationFields;
    }

    /**
     * Returns Company Name.
     * Company Name.
     */
    public function getCompanyName(): ?string
    {
        if (count($this->companyName) == 0) {
            return null;
        }
        return $this->companyName['value'];
    }

    /**
     * Sets Company Name.
     * Company Name.
     *
     * @maps company_name
     */
    public function setCompanyName(?string $companyName): void
    {
        $this->companyName['value'] = $companyName;
    }

    /**
     * Unsets Company Name.
     * Company Name.
     */
    public function unsetCompanyName(): void
    {
        $this->companyName = [];
    }

    /**
     * Returns Nav Color.
     * Nav Color.
     */
    public function getNavColor(): ?string
    {
        if (count($this->navColor) == 0) {
            return null;
        }
        return $this->navColor['value'];
    }

    /**
     * Sets Nav Color.
     * Nav Color.
     *
     * @maps nav_color
     */
    public function setNavColor(?string $navColor): void
    {
        $this->navColor['value'] = $navColor;
    }

    /**
     * Unsets Nav Color.
     * Nav Color.
     */
    public function unsetNavColor(): void
    {
        $this->navColor = [];
    }

    /**
     * Returns Button Primary Color.
     * Button Primary Color.
     */
    public function getButtonPrimaryColor(): ?string
    {
        if (count($this->buttonPrimaryColor) == 0) {
            return null;
        }
        return $this->buttonPrimaryColor['value'];
    }

    /**
     * Sets Button Primary Color.
     * Button Primary Color.
     *
     * @maps button_primary_color
     */
    public function setButtonPrimaryColor(?string $buttonPrimaryColor): void
    {
        $this->buttonPrimaryColor['value'] = $buttonPrimaryColor;
    }

    /**
     * Unsets Button Primary Color.
     * Button Primary Color.
     */
    public function unsetButtonPrimaryColor(): void
    {
        $this->buttonPrimaryColor = [];
    }

    /**
     * Returns Logo Background Color.
     * Logo Background Color.
     */
    public function getLogoBackgroundColor(): ?string
    {
        if (count($this->logoBackgroundColor) == 0) {
            return null;
        }
        return $this->logoBackgroundColor['value'];
    }

    /**
     * Sets Logo Background Color.
     * Logo Background Color.
     *
     * @maps logo_background_color
     */
    public function setLogoBackgroundColor(?string $logoBackgroundColor): void
    {
        $this->logoBackgroundColor['value'] = $logoBackgroundColor;
    }

    /**
     * Unsets Logo Background Color.
     * Logo Background Color.
     */
    public function unsetLogoBackgroundColor(): void
    {
        $this->logoBackgroundColor = [];
    }

    /**
     * Returns Icon Background Color.
     * Icon Background Color.
     */
    public function getIconBackgroundColor(): ?string
    {
        if (count($this->iconBackgroundColor) == 0) {
            return null;
        }
        return $this->iconBackgroundColor['value'];
    }

    /**
     * Sets Icon Background Color.
     * Icon Background Color.
     *
     * @maps icon_background_color
     */
    public function setIconBackgroundColor(?string $iconBackgroundColor): void
    {
        $this->iconBackgroundColor['value'] = $iconBackgroundColor;
    }

    /**
     * Unsets Icon Background Color.
     * Icon Background Color.
     */
    public function unsetIconBackgroundColor(): void
    {
        $this->iconBackgroundColor = [];
    }

    /**
     * Returns Menu Text Background Color.
     * Menu Text Background Color
     */
    public function getMenuTextBackgroundColor(): ?string
    {
        if (count($this->menuTextBackgroundColor) == 0) {
            return null;
        }
        return $this->menuTextBackgroundColor['value'];
    }

    /**
     * Sets Menu Text Background Color.
     * Menu Text Background Color
     *
     * @maps menu_text_background_color
     */
    public function setMenuTextBackgroundColor(?string $menuTextBackgroundColor): void
    {
        $this->menuTextBackgroundColor['value'] = $menuTextBackgroundColor;
    }

    /**
     * Unsets Menu Text Background Color.
     * Menu Text Background Color
     */
    public function unsetMenuTextBackgroundColor(): void
    {
        $this->menuTextBackgroundColor = [];
    }

    /**
     * Returns Menu Text Color.
     * Menu Text Color.
     */
    public function getMenuTextColor(): ?string
    {
        if (count($this->menuTextColor) == 0) {
            return null;
        }
        return $this->menuTextColor['value'];
    }

    /**
     * Sets Menu Text Color.
     * Menu Text Color.
     *
     * @maps menu_text_color
     */
    public function setMenuTextColor(?string $menuTextColor): void
    {
        $this->menuTextColor['value'] = $menuTextColor;
    }

    /**
     * Unsets Menu Text Color.
     * Menu Text Color.
     */
    public function unsetMenuTextColor(): void
    {
        $this->menuTextColor = [];
    }

    /**
     * Returns Right Menu Background Color.
     * Right Menu Background Color.
     */
    public function getRightMenuBackgroundColor(): ?string
    {
        if (count($this->rightMenuBackgroundColor) == 0) {
            return null;
        }
        return $this->rightMenuBackgroundColor['value'];
    }

    /**
     * Sets Right Menu Background Color.
     * Right Menu Background Color.
     *
     * @maps right_menu_background_color
     */
    public function setRightMenuBackgroundColor(?string $rightMenuBackgroundColor): void
    {
        $this->rightMenuBackgroundColor['value'] = $rightMenuBackgroundColor;
    }

    /**
     * Unsets Right Menu Background Color.
     * Right Menu Background Color.
     */
    public function unsetRightMenuBackgroundColor(): void
    {
        $this->rightMenuBackgroundColor = [];
    }

    /**
     * Returns Right Menu Text Color.
     * Right Menu Text Color.
     */
    public function getRightMenuTextColor(): ?string
    {
        if (count($this->rightMenuTextColor) == 0) {
            return null;
        }
        return $this->rightMenuTextColor['value'];
    }

    /**
     * Sets Right Menu Text Color.
     * Right Menu Text Color.
     *
     * @maps right_menu_text_color
     */
    public function setRightMenuTextColor(?string $rightMenuTextColor): void
    {
        $this->rightMenuTextColor['value'] = $rightMenuTextColor;
    }

    /**
     * Unsets Right Menu Text Color.
     * Right Menu Text Color.
     */
    public function unsetRightMenuTextColor(): void
    {
        $this->rightMenuTextColor = [];
    }

    /**
     * Returns Button Primary Text Color.
     * Button Primary Text Color.
     */
    public function getButtonPrimaryTextColor(): ?string
    {
        if (count($this->buttonPrimaryTextColor) == 0) {
            return null;
        }
        return $this->buttonPrimaryTextColor['value'];
    }

    /**
     * Sets Button Primary Text Color.
     * Button Primary Text Color.
     *
     * @maps button_primary_text_color
     */
    public function setButtonPrimaryTextColor(?string $buttonPrimaryTextColor): void
    {
        $this->buttonPrimaryTextColor['value'] = $buttonPrimaryTextColor;
    }

    /**
     * Unsets Button Primary Text Color.
     * Button Primary Text Color.
     */
    public function unsetButtonPrimaryTextColor(): void
    {
        $this->buttonPrimaryTextColor = [];
    }

    /**
     * Returns Nav Logo.
     * Nav Logo.
     */
    public function getNavLogo(): ?string
    {
        if (count($this->navLogo) == 0) {
            return null;
        }
        return $this->navLogo['value'];
    }

    /**
     * Sets Nav Logo.
     * Nav Logo.
     *
     * @maps nav_logo
     */
    public function setNavLogo(?string $navLogo): void
    {
        $this->navLogo['value'] = $navLogo;
    }

    /**
     * Unsets Nav Logo.
     * Nav Logo.
     */
    public function unsetNavLogo(): void
    {
        $this->navLogo = [];
    }

    /**
     * Returns Fav Icon.
     * Fav Icon.
     */
    public function getFavIcon(): ?string
    {
        if (count($this->favIcon) == 0) {
            return null;
        }
        return $this->favIcon['value'];
    }

    /**
     * Sets Fav Icon.
     * Fav Icon.
     *
     * @maps fav_icon
     */
    public function setFavIcon(?string $favIcon): void
    {
        $this->favIcon['value'] = $favIcon;
    }

    /**
     * Unsets Fav Icon.
     * Fav Icon.
     */
    public function unsetFavIcon(): void
    {
        $this->favIcon = [];
    }

    /**
     * Returns Aes Key.
     * Aes Key.
     */
    public function getAesKey(): ?string
    {
        if (count($this->aesKey) == 0) {
            return null;
        }
        return $this->aesKey['value'];
    }

    /**
     * Sets Aes Key.
     * Aes Key.
     *
     * @maps aes_key
     */
    public function setAesKey(?string $aesKey): void
    {
        $this->aesKey['value'] = $aesKey;
    }

    /**
     * Unsets Aes Key.
     * Aes Key.
     */
    public function unsetAesKey(): void
    {
        $this->aesKey = [];
    }

    /**
     * Returns Help Text.
     * Help Text.
     */
    public function getHelpText(): ?string
    {
        if (count($this->helpText) == 0) {
            return null;
        }
        return $this->helpText['value'];
    }

    /**
     * Sets Help Text.
     * Help Text.
     *
     * @maps help_text
     */
    public function setHelpText(?string $helpText): void
    {
        $this->helpText['value'] = $helpText;
    }

    /**
     * Unsets Help Text.
     * Help Text.
     */
    public function unsetHelpText(): void
    {
        $this->helpText = [];
    }

    /**
     * Returns Email Reply To.
     * Email Reply To.
     */
    public function getEmailReplyTo(): ?string
    {
        if (count($this->emailReplyTo) == 0) {
            return null;
        }
        return $this->emailReplyTo['value'];
    }

    /**
     * Sets Email Reply To.
     * Email Reply To.
     *
     * @maps email_reply_to
     */
    public function setEmailReplyTo(?string $emailReplyTo): void
    {
        $this->emailReplyTo['value'] = $emailReplyTo;
    }

    /**
     * Unsets Email Reply To.
     * Email Reply To.
     */
    public function unsetEmailReplyTo(): void
    {
        $this->emailReplyTo = [];
    }

    /**
     * Returns Email.
     * Email.
     */
    public function getEmail(): ?string
    {
        if (count($this->email) == 0) {
            return null;
        }
        return $this->email['value'];
    }

    /**
     * Sets Email.
     * Email.
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email['value'] = $email;
    }

    /**
     * Unsets Email.
     * Email.
     */
    public function unsetEmail(): void
    {
        $this->email = [];
    }

    /**
     * Returns Custom Javascript.
     * Custom Javascript.
     */
    public function getCustomJavascript(): ?string
    {
        if (count($this->customJavascript) == 0) {
            return null;
        }
        return $this->customJavascript['value'];
    }

    /**
     * Sets Custom Javascript.
     * Custom Javascript.
     *
     * @maps custom_javascript
     */
    public function setCustomJavascript(?string $customJavascript): void
    {
        $this->customJavascript['value'] = $customJavascript;
    }

    /**
     * Unsets Custom Javascript.
     * Custom Javascript.
     */
    public function unsetCustomJavascript(): void
    {
        $this->customJavascript = [];
    }

    /**
     * Returns Custom Theme.
     * Custom Theme
     */
    public function getCustomTheme(): ?string
    {
        if (count($this->customTheme) == 0) {
            return null;
        }
        return $this->customTheme['value'];
    }

    /**
     * Sets Custom Theme.
     * Custom Theme
     *
     * @maps custom_theme
     */
    public function setCustomTheme(?string $customTheme): void
    {
        $this->customTheme['value'] = $customTheme;
    }

    /**
     * Unsets Custom Theme.
     * Custom Theme
     */
    public function unsetCustomTheme(): void
    {
        $this->customTheme = [];
    }

    /**
     * Returns Custom Css.
     * Custom CSS
     */
    public function getCustomCss(): ?string
    {
        if (count($this->customCss) == 0) {
            return null;
        }
        return $this->customCss['value'];
    }

    /**
     * Sets Custom Css.
     * Custom CSS
     *
     * @maps custom_css
     */
    public function setCustomCss(?string $customCss): void
    {
        $this->customCss['value'] = $customCss;
    }

    /**
     * Unsets Custom Css.
     * Custom CSS
     */
    public function unsetCustomCss(): void
    {
        $this->customCss = [];
    }

    /**
     * Returns Contact User Default Entry Page.
     * Contact User Default Entry Page
     */
    public function getContactUserDefaultEntryPage(): ?string
    {
        if (count($this->contactUserDefaultEntryPage) == 0) {
            return null;
        }
        return $this->contactUserDefaultEntryPage['value'];
    }

    /**
     * Sets Contact User Default Entry Page.
     * Contact User Default Entry Page
     *
     * @maps contact_user_default_entry_page
     * @factory \FortisAPILib\Models\ContactUserDefaultEntryPageEnum::checkValue
     */
    public function setContactUserDefaultEntryPage(?string $contactUserDefaultEntryPage): void
    {
        $this->contactUserDefaultEntryPage['value'] = $contactUserDefaultEntryPage;
    }

    /**
     * Unsets Contact User Default Entry Page.
     * Contact User Default Entry Page
     */
    public function unsetContactUserDefaultEntryPage(): void
    {
        $this->contactUserDefaultEntryPage = [];
    }

    /**
     * Returns Contact User Default Auth Roles.
     * Contact User Default Auth Role
     *
     * @return array[]|null
     */
    public function getContactUserDefaultAuthRoles(): ?array
    {
        return $this->contactUserDefaultAuthRoles;
    }

    /**
     * Sets Contact User Default Auth Roles.
     * Contact User Default Auth Role
     *
     * @maps contact_user_default_auth_roles
     *
     * @param array[]|null $contactUserDefaultAuthRoles
     */
    public function setContactUserDefaultAuthRoles(?array $contactUserDefaultAuthRoles): void
    {
        $this->contactUserDefaultAuthRoles = $contactUserDefaultAuthRoles;
    }

    /**
     * Returns Id.
     * Id
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Id
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @required
     * @maps created_ts
     */
    public function setCreatedTs(int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @required
     * @maps modified_ts
     */
    public function setModifiedTs(int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['url']                                 = $this->url;
        $json['title']                               = $this->title;
        if (!empty($this->logo)) {
            $json['logo']                            = $this->logo['value'];
        }
        if (!empty($this->supportEmail)) {
            $json['support_email']                   = $this->supportEmail['value'];
        }
        $json['allow_contact_signup']                = $this->allowContactSignup;
        $json['allow_contact_registration']          = $this->allowContactRegistration;
        $json['allow_contact_login']                 = $this->allowContactLogin;
        if (isset($this->registrationFields)) {
            $json['registration_fields']             = RegistrationFieldEnum::checkValue($this->registrationFields);
        }
        if (!empty($this->companyName)) {
            $json['company_name']                    = $this->companyName['value'];
        }
        if (!empty($this->navColor)) {
            $json['nav_color']                       = $this->navColor['value'];
        }
        if (!empty($this->buttonPrimaryColor)) {
            $json['button_primary_color']            = $this->buttonPrimaryColor['value'];
        }
        if (!empty($this->logoBackgroundColor)) {
            $json['logo_background_color']           = $this->logoBackgroundColor['value'];
        }
        if (!empty($this->iconBackgroundColor)) {
            $json['icon_background_color']           = $this->iconBackgroundColor['value'];
        }
        if (!empty($this->menuTextBackgroundColor)) {
            $json['menu_text_background_color']      = $this->menuTextBackgroundColor['value'];
        }
        if (!empty($this->menuTextColor)) {
            $json['menu_text_color']                 = $this->menuTextColor['value'];
        }
        if (!empty($this->rightMenuBackgroundColor)) {
            $json['right_menu_background_color']     = $this->rightMenuBackgroundColor['value'];
        }
        if (!empty($this->rightMenuTextColor)) {
            $json['right_menu_text_color']           = $this->rightMenuTextColor['value'];
        }
        if (!empty($this->buttonPrimaryTextColor)) {
            $json['button_primary_text_color']       = $this->buttonPrimaryTextColor['value'];
        }
        if (!empty($this->navLogo)) {
            $json['nav_logo']                        = $this->navLogo['value'];
        }
        if (!empty($this->favIcon)) {
            $json['fav_icon']                        = $this->favIcon['value'];
        }
        if (!empty($this->aesKey)) {
            $json['aes_key']                         = $this->aesKey['value'];
        }
        if (!empty($this->helpText)) {
            $json['help_text']                       = $this->helpText['value'];
        }
        if (!empty($this->emailReplyTo)) {
            $json['email_reply_to']                  = $this->emailReplyTo['value'];
        }
        if (!empty($this->email)) {
            $json['email']                           = $this->email['value'];
        }
        if (!empty($this->customJavascript)) {
            $json['custom_javascript']               = $this->customJavascript['value'];
        }
        if (!empty($this->customTheme)) {
            $json['custom_theme']                    = $this->customTheme['value'];
        }
        if (!empty($this->customCss)) {
            $json['custom_css']                      = $this->customCss['value'];
        }
        if (!empty($this->contactUserDefaultEntryPage)) {
            $json['contact_user_default_entry_page'] =
                ContactUserDefaultEntryPageEnum::checkValue(
                    $this->contactUserDefaultEntryPage['value']
                );
        }
        if (isset($this->contactUserDefaultAuthRoles)) {
            $json['contact_user_default_auth_roles'] = $this->contactUserDefaultAuthRoles;
        }
        $json['id']                                  = $this->id;
        $json['created_ts']                          = $this->createdTs;
        $json['modified_ts']                         = $this->modifiedTs;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
