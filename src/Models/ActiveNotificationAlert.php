<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class ActiveNotificationAlert implements \JsonSerializable
{
    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var array
     */
    private $locationApiId = [];

    /**
     * @var string
     */
    private $dateStart;

    /**
     * @var string
     */
    private $dateEnd;

    /**
     * @var bool|null
     */
    private $userLocation;

    /**
     * @var bool|null
     */
    private $userContact;

    /**
     * @var bool|null
     */
    private $includeChildren;

    /**
     * @var array
     */
    private $alertType = [];

    /**
     * @var array
     */
    private $alertTypeId = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $alertMessage = [];

    /**
     * @var string
     */
    private $id;

    /**
     * @var int
     */
    private $createdTs;

    /**
     * @var int
     */
    private $modifiedTs;

    /**
     * @var array
     */
    private $createdUserId = [];

    /**
     * @var array
     */
    private $modifiedUserId = [];

    /**
     * @param string $dateStart
     * @param string $dateEnd
     * @param string $id
     * @param int $createdTs
     * @param int $modifiedTs
     */
    public function __construct(string $dateStart, string $dateEnd, string $id, int $createdTs, int $modifiedTs)
    {
        $this->dateStart = $dateStart;
        $this->dateEnd = $dateEnd;
        $this->id = $id;
        $this->createdTs = $createdTs;
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * Location ID
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Location Api Id.
     * Location Api ID
     */
    public function getLocationApiId(): ?string
    {
        if (count($this->locationApiId) == 0) {
            return null;
        }
        return $this->locationApiId['value'];
    }

    /**
     * Sets Location Api Id.
     * Location Api ID
     *
     * @maps location_api_id
     */
    public function setLocationApiId(?string $locationApiId): void
    {
        $this->locationApiId['value'] = $locationApiId;
    }

    /**
     * Unsets Location Api Id.
     * Location Api ID
     */
    public function unsetLocationApiId(): void
    {
        $this->locationApiId = [];
    }

    /**
     * Returns Date Start.
     * Date Start
     */
    public function getDateStart(): string
    {
        return $this->dateStart;
    }

    /**
     * Sets Date Start.
     * Date Start
     *
     * @required
     * @maps date_start
     */
    public function setDateStart(string $dateStart): void
    {
        $this->dateStart = $dateStart;
    }

    /**
     * Returns Date End.
     * Date End
     */
    public function getDateEnd(): string
    {
        return $this->dateEnd;
    }

    /**
     * Sets Date End.
     * Date End
     *
     * @required
     * @maps date_end
     */
    public function setDateEnd(string $dateEnd): void
    {
        $this->dateEnd = $dateEnd;
    }

    /**
     * Returns User Location.
     * User Location
     */
    public function getUserLocation(): ?bool
    {
        return $this->userLocation;
    }

    /**
     * Sets User Location.
     * User Location
     *
     * @maps user_location
     */
    public function setUserLocation(?bool $userLocation): void
    {
        $this->userLocation = $userLocation;
    }

    /**
     * Returns User Contact.
     * User Contact
     */
    public function getUserContact(): ?bool
    {
        return $this->userContact;
    }

    /**
     * Sets User Contact.
     * User Contact
     *
     * @maps user_contact
     */
    public function setUserContact(?bool $userContact): void
    {
        $this->userContact = $userContact;
    }

    /**
     * Returns Include Children.
     * Include Children
     */
    public function getIncludeChildren(): ?bool
    {
        return $this->includeChildren;
    }

    /**
     * Sets Include Children.
     * Include Children
     *
     * @maps include_children
     */
    public function setIncludeChildren(?bool $includeChildren): void
    {
        $this->includeChildren = $includeChildren;
    }

    /**
     * Returns Alert Type.
     * Alert Type
     */
    public function getAlertType(): ?int
    {
        if (count($this->alertType) == 0) {
            return null;
        }
        return $this->alertType['value'];
    }

    /**
     * Sets Alert Type.
     * Alert Type
     *
     * @maps alert_type
     * @factory \FortisAPILib\Models\AlertTypeEnum::checkValue
     */
    public function setAlertType(?int $alertType): void
    {
        $this->alertType['value'] = $alertType;
    }

    /**
     * Unsets Alert Type.
     * Alert Type
     */
    public function unsetAlertType(): void
    {
        $this->alertType = [];
    }

    /**
     * Returns Alert Type Id.
     * Alert Type ID
     */
    public function getAlertTypeId(): ?int
    {
        if (count($this->alertTypeId) == 0) {
            return null;
        }
        return $this->alertTypeId['value'];
    }

    /**
     * Sets Alert Type Id.
     * Alert Type ID
     *
     * @maps alert_type_id
     * @factory \FortisAPILib\Models\AlertTypeIdEnum::checkValue
     */
    public function setAlertTypeId(?int $alertTypeId): void
    {
        $this->alertTypeId['value'] = $alertTypeId;
    }

    /**
     * Unsets Alert Type Id.
     * Alert Type ID
     */
    public function unsetAlertTypeId(): void
    {
        $this->alertTypeId = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Alert Message.
     * Alert Message
     */
    public function getAlertMessage(): ?string
    {
        if (count($this->alertMessage) == 0) {
            return null;
        }
        return $this->alertMessage['value'];
    }

    /**
     * Sets Alert Message.
     * Alert Message
     *
     * @maps alert_message
     */
    public function setAlertMessage(?string $alertMessage): void
    {
        $this->alertMessage['value'] = $alertMessage;
    }

    /**
     * Unsets Alert Message.
     * Alert Message
     */
    public function unsetAlertMessage(): void
    {
        $this->alertMessage = [];
    }

    /**
     * Returns Id.
     * Notification Alert ID
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Notification Alert ID
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @required
     * @maps created_ts
     */
    public function setCreatedTs(int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @required
     * @maps modified_ts
     */
    public function setModifiedTs(int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Created User Id.
     * User ID Created the register
     */
    public function getCreatedUserId(): ?string
    {
        if (count($this->createdUserId) == 0) {
            return null;
        }
        return $this->createdUserId['value'];
    }

    /**
     * Sets Created User Id.
     * User ID Created the register
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId['value'] = $createdUserId;
    }

    /**
     * Unsets Created User Id.
     * User ID Created the register
     */
    public function unsetCreatedUserId(): void
    {
        $this->createdUserId = [];
    }

    /**
     * Returns Modified User Id.
     * Last User ID that updated the register
     */
    public function getModifiedUserId(): ?string
    {
        if (count($this->modifiedUserId) == 0) {
            return null;
        }
        return $this->modifiedUserId['value'];
    }

    /**
     * Sets Modified User Id.
     * Last User ID that updated the register
     *
     * @maps modified_user_id
     */
    public function setModifiedUserId(?string $modifiedUserId): void
    {
        $this->modifiedUserId['value'] = $modifiedUserId;
    }

    /**
     * Unsets Modified User Id.
     * Last User ID that updated the register
     */
    public function unsetModifiedUserId(): void
    {
        $this->modifiedUserId = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->locationId)) {
            $json['location_id']      = $this->locationId['value'];
        }
        if (!empty($this->locationApiId)) {
            $json['location_api_id']  = $this->locationApiId['value'];
        }
        $json['date_start']           = $this->dateStart;
        $json['date_end']             = $this->dateEnd;
        if (isset($this->userLocation)) {
            $json['user_location']    = $this->userLocation;
        }
        if (isset($this->userContact)) {
            $json['user_contact']     = $this->userContact;
        }
        if (isset($this->includeChildren)) {
            $json['include_children'] = $this->includeChildren;
        }
        if (!empty($this->alertType)) {
            $json['alert_type']       = AlertTypeEnum::checkValue($this->alertType['value']);
        }
        if (!empty($this->alertTypeId)) {
            $json['alert_type_id']    = AlertTypeIdEnum::checkValue($this->alertTypeId['value']);
        }
        if (!empty($this->description)) {
            $json['description']      = $this->description['value'];
        }
        if (!empty($this->alertMessage)) {
            $json['alert_message']    = $this->alertMessage['value'];
        }
        $json['id']                   = $this->id;
        $json['created_ts']           = $this->createdTs;
        $json['modified_ts']          = $this->modifiedTs;
        if (!empty($this->createdUserId)) {
            $json['created_user_id']  = $this->createdUserId['value'];
        }
        if (!empty($this->modifiedUserId)) {
            $json['modified_user_id'] = $this->modifiedUserId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
