<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class V1RecurringsRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $accountVaultId;

    /**
     * @var string|null
     */
    private $tokenId;

    /**
     * @var array
     */
    private $accountVaultApiId = [];

    /**
     * @var array
     */
    private $tokenApiId = [];

    /**
     * @var Joi|null
     */
    private $joi;

    /**
     * @var bool|null
     */
    private $active;

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var array
     */
    private $endDate = [];

    /**
     * @var array
     */
    private $installmentTotalCount = [];

    /**
     * @var int
     */
    private $interval;

    /**
     * @var string
     */
    private $intervalType;

    /**
     * @var string
     */
    private $locationId;

    /**
     * @var array
     */
    private $notificationDays = [];

    /**
     * @var array
     */
    private $paymentMethod = [];

    /**
     * @var array
     */
    private $productTransactionId = [];

    /**
     * @var array
     */
    private $recurringId = [];

    /**
     * @var array
     */
    private $recurringApiId = [];

    /**
     * @var string
     */
    private $startDate;

    /**
     * @var array
     */
    private $status = [];

    /**
     * @var int
     */
    private $transactionAmount;

    /**
     * @var bool|null
     */
    private $termsAgree;

    /**
     * @var array
     */
    private $termsAgreeIp = [];

    /**
     * @var array
     */
    private $recurringC1 = [];

    /**
     * @var array
     */
    private $recurringC2 = [];

    /**
     * @var array
     */
    private $recurringC3 = [];

    /**
     * @var bool|null
     */
    private $sendToProcAsRecur;

    /**
     * @param int $interval
     * @param string $intervalType
     * @param string $locationId
     * @param string $startDate
     * @param int $transactionAmount
     */
    public function __construct(
        int $interval,
        string $intervalType,
        string $locationId,
        string $startDate,
        int $transactionAmount
    ) {
        $this->interval = $interval;
        $this->intervalType = $intervalType;
        $this->locationId = $locationId;
        $this->startDate = $startDate;
        $this->transactionAmount = $transactionAmount;
    }

    /**
     * Returns Account Vault Id.
     * Token ID
     */
    public function getAccountVaultId(): ?string
    {
        return $this->accountVaultId;
    }

    /**
     * Sets Account Vault Id.
     * Token ID
     *
     * @maps account_vault_id
     */
    public function setAccountVaultId(?string $accountVaultId): void
    {
        $this->accountVaultId = $accountVaultId;
    }

    /**
     * Returns Token Id.
     * Token ID
     */
    public function getTokenId(): ?string
    {
        return $this->tokenId;
    }

    /**
     * Sets Token Id.
     * Token ID
     *
     * @maps token_id
     */
    public function setTokenId(?string $tokenId): void
    {
        $this->tokenId = $tokenId;
    }

    /**
     * Returns Account Vault Api Id.
     * Token API ID
     */
    public function getAccountVaultApiId(): ?string
    {
        if (count($this->accountVaultApiId) == 0) {
            return null;
        }
        return $this->accountVaultApiId['value'];
    }

    /**
     * Sets Account Vault Api Id.
     * Token API ID
     *
     * @maps account_vault_api_id
     */
    public function setAccountVaultApiId(?string $accountVaultApiId): void
    {
        $this->accountVaultApiId['value'] = $accountVaultApiId;
    }

    /**
     * Unsets Account Vault Api Id.
     * Token API ID
     */
    public function unsetAccountVaultApiId(): void
    {
        $this->accountVaultApiId = [];
    }

    /**
     * Returns Token Api Id.
     * Token API ID
     */
    public function getTokenApiId(): ?string
    {
        if (count($this->tokenApiId) == 0) {
            return null;
        }
        return $this->tokenApiId['value'];
    }

    /**
     * Sets Token Api Id.
     * Token API ID
     *
     * @maps token_api_id
     */
    public function setTokenApiId(?string $tokenApiId): void
    {
        $this->tokenApiId['value'] = $tokenApiId;
    }

    /**
     * Unsets Token Api Id.
     * Token API ID
     */
    public function unsetTokenApiId(): void
    {
        $this->tokenApiId = [];
    }

    /**
     * Returns Joi.
     */
    public function getJoi(): ?Joi
    {
        return $this->joi;
    }

    /**
     * Sets Joi.
     *
     * @maps _joi
     */
    public function setJoi(?Joi $joi): void
    {
        $this->joi = $joi;
    }

    /**
     * Returns Active.
     * Active
     */
    public function getActive(): ?bool
    {
        return $this->active;
    }

    /**
     * Sets Active.
     * Active
     *
     * @maps active
     */
    public function setActive(?bool $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns End Date.
     * End date
     */
    public function getEndDate(): ?string
    {
        if (count($this->endDate) == 0) {
            return null;
        }
        return $this->endDate['value'];
    }

    /**
     * Sets End Date.
     * End date
     *
     * @maps end_date
     */
    public function setEndDate(?string $endDate): void
    {
        $this->endDate['value'] = $endDate;
    }

    /**
     * Unsets End Date.
     * End date
     */
    public function unsetEndDate(): void
    {
        $this->endDate = [];
    }

    /**
     * Returns Installment Total Count.
     * Installment Total Count
     */
    public function getInstallmentTotalCount(): ?int
    {
        if (count($this->installmentTotalCount) == 0) {
            return null;
        }
        return $this->installmentTotalCount['value'];
    }

    /**
     * Sets Installment Total Count.
     * Installment Total Count
     *
     * @maps installment_total_count
     */
    public function setInstallmentTotalCount(?int $installmentTotalCount): void
    {
        $this->installmentTotalCount['value'] = $installmentTotalCount;
    }

    /**
     * Unsets Installment Total Count.
     * Installment Total Count
     */
    public function unsetInstallmentTotalCount(): void
    {
        $this->installmentTotalCount = [];
    }

    /**
     * Returns Interval.
     * Interval
     */
    public function getInterval(): int
    {
        return $this->interval;
    }

    /**
     * Sets Interval.
     * Interval
     *
     * @required
     * @maps interval
     */
    public function setInterval(int $interval): void
    {
        $this->interval = $interval;
    }

    /**
     * Returns Interval Type.
     * Interval Type
     */
    public function getIntervalType(): string
    {
        return $this->intervalType;
    }

    /**
     * Sets Interval Type.
     * Interval Type
     *
     * @required
     * @maps interval_type
     * @factory \FortisAPILib\Models\IntervalTypeEnum::checkValue
     */
    public function setIntervalType(string $intervalType): void
    {
        $this->intervalType = $intervalType;
    }

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): string
    {
        return $this->locationId;
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @required
     * @maps location_id
     */
    public function setLocationId(string $locationId): void
    {
        $this->locationId = $locationId;
    }

    /**
     * Returns Notification Days.
     * Notification Days
     */
    public function getNotificationDays(): ?int
    {
        if (count($this->notificationDays) == 0) {
            return null;
        }
        return $this->notificationDays['value'];
    }

    /**
     * Sets Notification Days.
     * Notification Days
     *
     * @maps notification_days
     */
    public function setNotificationDays(?int $notificationDays): void
    {
        $this->notificationDays['value'] = $notificationDays;
    }

    /**
     * Unsets Notification Days.
     * Notification Days
     */
    public function unsetNotificationDays(): void
    {
        $this->notificationDays = [];
    }

    /**
     * Returns Payment Method.
     * Payment Method
     */
    public function getPaymentMethod(): ?string
    {
        if (count($this->paymentMethod) == 0) {
            return null;
        }
        return $this->paymentMethod['value'];
    }

    /**
     * Sets Payment Method.
     * Payment Method
     *
     * @maps payment_method
     * @factory \FortisAPILib\Models\PaymentMethod1Enum::checkValue
     */
    public function setPaymentMethod(?string $paymentMethod): void
    {
        $this->paymentMethod['value'] = $paymentMethod;
    }

    /**
     * Unsets Payment Method.
     * Payment Method
     */
    public function unsetPaymentMethod(): void
    {
        $this->paymentMethod = [];
    }

    /**
     * Returns Product Transaction Id.
     * Product Transaction ID
     */
    public function getProductTransactionId(): ?string
    {
        if (count($this->productTransactionId) == 0) {
            return null;
        }
        return $this->productTransactionId['value'];
    }

    /**
     * Sets Product Transaction Id.
     * Product Transaction ID
     *
     * @maps product_transaction_id
     */
    public function setProductTransactionId(?string $productTransactionId): void
    {
        $this->productTransactionId['value'] = $productTransactionId;
    }

    /**
     * Unsets Product Transaction Id.
     * Product Transaction ID
     */
    public function unsetProductTransactionId(): void
    {
        $this->productTransactionId = [];
    }

    /**
     * Returns Recurring Id.
     * Recurring ID
     */
    public function getRecurringId(): ?string
    {
        if (count($this->recurringId) == 0) {
            return null;
        }
        return $this->recurringId['value'];
    }

    /**
     * Sets Recurring Id.
     * Recurring ID
     *
     * @maps recurring_id
     */
    public function setRecurringId(?string $recurringId): void
    {
        $this->recurringId['value'] = $recurringId;
    }

    /**
     * Unsets Recurring Id.
     * Recurring ID
     */
    public function unsetRecurringId(): void
    {
        $this->recurringId = [];
    }

    /**
     * Returns Recurring Api Id.
     * Recurring Api ID
     */
    public function getRecurringApiId(): ?string
    {
        if (count($this->recurringApiId) == 0) {
            return null;
        }
        return $this->recurringApiId['value'];
    }

    /**
     * Sets Recurring Api Id.
     * Recurring Api ID
     *
     * @maps recurring_api_id
     */
    public function setRecurringApiId(?string $recurringApiId): void
    {
        $this->recurringApiId['value'] = $recurringApiId;
    }

    /**
     * Unsets Recurring Api Id.
     * Recurring Api ID
     */
    public function unsetRecurringApiId(): void
    {
        $this->recurringApiId = [];
    }

    /**
     * Returns Start Date.
     * Start date
     */
    public function getStartDate(): string
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     * Start date
     *
     * @required
     * @maps start_date
     */
    public function setStartDate(string $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns Status.
     * Status
     */
    public function getStatus(): ?string
    {
        if (count($this->status) == 0) {
            return null;
        }
        return $this->status['value'];
    }

    /**
     * Sets Status.
     * Status
     *
     * @maps status
     * @factory \FortisAPILib\Models\StatusEnum::checkValue
     */
    public function setStatus(?string $status): void
    {
        $this->status['value'] = $status;
    }

    /**
     * Unsets Status.
     * Status
     */
    public function unsetStatus(): void
    {
        $this->status = [];
    }

    /**
     * Returns Transaction Amount.
     * Transaction amount
     */
    public function getTransactionAmount(): int
    {
        return $this->transactionAmount;
    }

    /**
     * Sets Transaction Amount.
     * Transaction amount
     *
     * @required
     * @maps transaction_amount
     */
    public function setTransactionAmount(int $transactionAmount): void
    {
        $this->transactionAmount = $transactionAmount;
    }

    /**
     * Returns Terms Agree.
     * Terms Agree
     */
    public function getTermsAgree(): ?bool
    {
        return $this->termsAgree;
    }

    /**
     * Sets Terms Agree.
     * Terms Agree
     *
     * @maps terms_agree
     */
    public function setTermsAgree(?bool $termsAgree): void
    {
        $this->termsAgree = $termsAgree;
    }

    /**
     * Returns Terms Agree Ip.
     * Terms Agree Ip
     */
    public function getTermsAgreeIp(): ?string
    {
        if (count($this->termsAgreeIp) == 0) {
            return null;
        }
        return $this->termsAgreeIp['value'];
    }

    /**
     * Sets Terms Agree Ip.
     * Terms Agree Ip
     *
     * @maps terms_agree_ip
     */
    public function setTermsAgreeIp(?string $termsAgreeIp): void
    {
        $this->termsAgreeIp['value'] = $termsAgreeIp;
    }

    /**
     * Unsets Terms Agree Ip.
     * Terms Agree Ip
     */
    public function unsetTermsAgreeIp(): void
    {
        $this->termsAgreeIp = [];
    }

    /**
     * Returns Recurring C1.
     * Custom field used for integrations
     */
    public function getRecurringC1(): ?string
    {
        if (count($this->recurringC1) == 0) {
            return null;
        }
        return $this->recurringC1['value'];
    }

    /**
     * Sets Recurring C1.
     * Custom field used for integrations
     *
     * @maps recurring_c1
     */
    public function setRecurringC1(?string $recurringC1): void
    {
        $this->recurringC1['value'] = $recurringC1;
    }

    /**
     * Unsets Recurring C1.
     * Custom field used for integrations
     */
    public function unsetRecurringC1(): void
    {
        $this->recurringC1 = [];
    }

    /**
     * Returns Recurring C2.
     * Custom field used for integrations
     */
    public function getRecurringC2(): ?string
    {
        if (count($this->recurringC2) == 0) {
            return null;
        }
        return $this->recurringC2['value'];
    }

    /**
     * Sets Recurring C2.
     * Custom field used for integrations
     *
     * @maps recurring_c2
     */
    public function setRecurringC2(?string $recurringC2): void
    {
        $this->recurringC2['value'] = $recurringC2;
    }

    /**
     * Unsets Recurring C2.
     * Custom field used for integrations
     */
    public function unsetRecurringC2(): void
    {
        $this->recurringC2 = [];
    }

    /**
     * Returns Recurring C3.
     * Custom field used for integrations
     */
    public function getRecurringC3(): ?string
    {
        if (count($this->recurringC3) == 0) {
            return null;
        }
        return $this->recurringC3['value'];
    }

    /**
     * Sets Recurring C3.
     * Custom field used for integrations
     *
     * @maps recurring_c3
     */
    public function setRecurringC3(?string $recurringC3): void
    {
        $this->recurringC3['value'] = $recurringC3;
    }

    /**
     * Unsets Recurring C3.
     * Custom field used for integrations
     */
    public function unsetRecurringC3(): void
    {
        $this->recurringC3 = [];
    }

    /**
     * Returns Send to Proc as Recur.
     * Send To Proc As Recur
     */
    public function getSendToProcAsRecur(): ?bool
    {
        return $this->sendToProcAsRecur;
    }

    /**
     * Sets Send to Proc as Recur.
     * Send To Proc As Recur
     *
     * @maps send_to_proc_as_recur
     */
    public function setSendToProcAsRecur(?bool $sendToProcAsRecur): void
    {
        $this->sendToProcAsRecur = $sendToProcAsRecur;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountVaultId)) {
            $json['account_vault_id']        = $this->accountVaultId;
        }
        if (isset($this->tokenId)) {
            $json['token_id']                = $this->tokenId;
        }
        if (!empty($this->accountVaultApiId)) {
            $json['account_vault_api_id']    = $this->accountVaultApiId['value'];
        }
        if (!empty($this->tokenApiId)) {
            $json['token_api_id']            = $this->tokenApiId['value'];
        }
        if (isset($this->joi)) {
            $json['_joi']                    = $this->joi;
        }
        if (isset($this->active)) {
            $json['active']                  = $this->active;
        }
        if (!empty($this->description)) {
            $json['description']             = $this->description['value'];
        }
        if (!empty($this->endDate)) {
            $json['end_date']                = $this->endDate['value'];
        }
        if (!empty($this->installmentTotalCount)) {
            $json['installment_total_count'] = $this->installmentTotalCount['value'];
        }
        $json['interval']                    = $this->interval;
        $json['interval_type']               = IntervalTypeEnum::checkValue($this->intervalType);
        $json['location_id']                 = $this->locationId;
        if (!empty($this->notificationDays)) {
            $json['notification_days']       = $this->notificationDays['value'];
        }
        if (!empty($this->paymentMethod)) {
            $json['payment_method']          = PaymentMethod1Enum::checkValue($this->paymentMethod['value']);
        }
        if (!empty($this->productTransactionId)) {
            $json['product_transaction_id']  = $this->productTransactionId['value'];
        }
        if (!empty($this->recurringId)) {
            $json['recurring_id']            = $this->recurringId['value'];
        }
        if (!empty($this->recurringApiId)) {
            $json['recurring_api_id']        = $this->recurringApiId['value'];
        }
        $json['start_date']                  = $this->startDate;
        if (!empty($this->status)) {
            $json['status']                  = StatusEnum::checkValue($this->status['value']);
        }
        $json['transaction_amount']          = $this->transactionAmount;
        if (isset($this->termsAgree)) {
            $json['terms_agree']             = $this->termsAgree;
        }
        if (!empty($this->termsAgreeIp)) {
            $json['terms_agree_ip']          = $this->termsAgreeIp['value'];
        }
        if (!empty($this->recurringC1)) {
            $json['recurring_c1']            = $this->recurringC1['value'];
        }
        if (!empty($this->recurringC2)) {
            $json['recurring_c2']            = $this->recurringC2['value'];
        }
        if (!empty($this->recurringC3)) {
            $json['recurring_c3']            = $this->recurringC3['value'];
        }
        if (isset($this->sendToProcAsRecur)) {
            $json['send_to_proc_as_recur']   = $this->sendToProcAsRecur;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
