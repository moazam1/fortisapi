<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class PostbackLog implements \JsonSerializable
{
    /**
     * @var array
     */
    private $postbackStatusId = [];

    /**
     * @var string
     */
    private $id;

    /**
     * @var string
     */
    private $postbackConfigId;

    /**
     * @var string
     */
    private $changelogId;

    /**
     * @var array
     */
    private $httpVerb = [];

    /**
     * @var array
     */
    private $nextRunTs = [];

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $model = [];

    /**
     * @var array
     */
    private $modelId = [];

    /**
     * @param string $id
     * @param string $postbackConfigId
     * @param string $changelogId
     */
    public function __construct(string $id, string $postbackConfigId, string $changelogId)
    {
        $this->id = $id;
        $this->postbackConfigId = $postbackConfigId;
        $this->changelogId = $changelogId;
    }

    /**
     * Returns Postback Status Id.
     * Postback Status Id
     */
    public function getPostbackStatusId(): ?int
    {
        if (count($this->postbackStatusId) == 0) {
            return null;
        }
        return $this->postbackStatusId['value'];
    }

    /**
     * Sets Postback Status Id.
     * Postback Status Id
     *
     * @maps postback_status_id
     * @factory \FortisAPILib\Models\PostbackStatusIdEnum::checkValue
     */
    public function setPostbackStatusId(?int $postbackStatusId): void
    {
        $this->postbackStatusId['value'] = $postbackStatusId;
    }

    /**
     * Unsets Postback Status Id.
     * Postback Status Id
     */
    public function unsetPostbackStatusId(): void
    {
        $this->postbackStatusId = [];
    }

    /**
     * Returns Id.
     * Postback Log Id
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Postback Log Id
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Postback Config Id.
     * Postback Config Id
     */
    public function getPostbackConfigId(): string
    {
        return $this->postbackConfigId;
    }

    /**
     * Sets Postback Config Id.
     * Postback Config Id
     *
     * @required
     * @maps postback_config_id
     */
    public function setPostbackConfigId(string $postbackConfigId): void
    {
        $this->postbackConfigId = $postbackConfigId;
    }

    /**
     * Returns Changelog Id.
     * Changelog Id
     */
    public function getChangelogId(): string
    {
        return $this->changelogId;
    }

    /**
     * Sets Changelog Id.
     * Changelog Id
     *
     * @required
     * @maps changelog_id
     */
    public function setChangelogId(string $changelogId): void
    {
        $this->changelogId = $changelogId;
    }

    /**
     * Returns Http Verb.
     * Http Verb
     */
    public function getHttpVerb(): ?string
    {
        if (count($this->httpVerb) == 0) {
            return null;
        }
        return $this->httpVerb['value'];
    }

    /**
     * Sets Http Verb.
     * Http Verb
     *
     * @maps http_verb
     */
    public function setHttpVerb(?string $httpVerb): void
    {
        $this->httpVerb['value'] = $httpVerb;
    }

    /**
     * Unsets Http Verb.
     * Http Verb
     */
    public function unsetHttpVerb(): void
    {
        $this->httpVerb = [];
    }

    /**
     * Returns Next Run Ts.
     * Next Run
     */
    public function getNextRunTs(): ?int
    {
        if (count($this->nextRunTs) == 0) {
            return null;
        }
        return $this->nextRunTs['value'];
    }

    /**
     * Sets Next Run Ts.
     * Next Run
     *
     * @maps next_run_ts
     */
    public function setNextRunTs(?int $nextRunTs): void
    {
        $this->nextRunTs['value'] = $nextRunTs;
    }

    /**
     * Unsets Next Run Ts.
     * Next Run
     */
    public function unsetNextRunTs(): void
    {
        $this->nextRunTs = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Model.
     * MOdel
     */
    public function getModel(): ?string
    {
        if (count($this->model) == 0) {
            return null;
        }
        return $this->model['value'];
    }

    /**
     * Sets Model.
     * MOdel
     *
     * @maps model
     */
    public function setModel(?string $model): void
    {
        $this->model['value'] = $model;
    }

    /**
     * Unsets Model.
     * MOdel
     */
    public function unsetModel(): void
    {
        $this->model = [];
    }

    /**
     * Returns Model Id.
     * Model Id
     */
    public function getModelId(): ?string
    {
        if (count($this->modelId) == 0) {
            return null;
        }
        return $this->modelId['value'];
    }

    /**
     * Sets Model Id.
     * Model Id
     *
     * @maps model_id
     */
    public function setModelId(?string $modelId): void
    {
        $this->modelId['value'] = $modelId;
    }

    /**
     * Unsets Model Id.
     * Model Id
     */
    public function unsetModelId(): void
    {
        $this->modelId = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->postbackStatusId)) {
            $json['postback_status_id'] = PostbackStatusIdEnum::checkValue($this->postbackStatusId['value']);
        }
        $json['id']                     = $this->id;
        $json['postback_config_id']     = $this->postbackConfigId;
        $json['changelog_id']           = $this->changelogId;
        if (!empty($this->httpVerb)) {
            $json['http_verb']          = $this->httpVerb['value'];
        }
        if (!empty($this->nextRunTs)) {
            $json['next_run_ts']        = $this->nextRunTs['value'];
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']         = $this->createdTs['value'];
        }
        if (!empty($this->model)) {
            $json['model']              = $this->model['value'];
        }
        if (!empty($this->modelId)) {
            $json['model_id']           = $this->modelId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
