<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class TransactionReference implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var array
     */
    private $transactionId = [];

    /**
     * @var array
     */
    private $previousTransactionId = [];

    /**
     * @var array
     */
    private $transactionAmount = [];

    /**
     * @var array
     */
    private $previousTransactionAmount = [];

    /**
     * @var array
     */
    private $previousTransactionCreatedTs = [];

    /**
     * @var array
     */
    private $referenceType = [];

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $createdUserId = [];

    /**
     * Returns Id.
     * ID
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * ID
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Transaction Id.
     * Transaction ID
     */
    public function getTransactionId(): ?string
    {
        if (count($this->transactionId) == 0) {
            return null;
        }
        return $this->transactionId['value'];
    }

    /**
     * Sets Transaction Id.
     * Transaction ID
     *
     * @maps transaction_id
     */
    public function setTransactionId(?string $transactionId): void
    {
        $this->transactionId['value'] = $transactionId;
    }

    /**
     * Unsets Transaction Id.
     * Transaction ID
     */
    public function unsetTransactionId(): void
    {
        $this->transactionId = [];
    }

    /**
     * Returns Previous Transaction Id.
     * Previous Transaction ID
     */
    public function getPreviousTransactionId(): ?string
    {
        if (count($this->previousTransactionId) == 0) {
            return null;
        }
        return $this->previousTransactionId['value'];
    }

    /**
     * Sets Previous Transaction Id.
     * Previous Transaction ID
     *
     * @maps previous_transaction_id
     */
    public function setPreviousTransactionId(?string $previousTransactionId): void
    {
        $this->previousTransactionId['value'] = $previousTransactionId;
    }

    /**
     * Unsets Previous Transaction Id.
     * Previous Transaction ID
     */
    public function unsetPreviousTransactionId(): void
    {
        $this->previousTransactionId = [];
    }

    /**
     * Returns Transaction Amount.
     * Transaction Amount
     */
    public function getTransactionAmount(): ?int
    {
        if (count($this->transactionAmount) == 0) {
            return null;
        }
        return $this->transactionAmount['value'];
    }

    /**
     * Sets Transaction Amount.
     * Transaction Amount
     *
     * @maps transaction_amount
     */
    public function setTransactionAmount(?int $transactionAmount): void
    {
        $this->transactionAmount['value'] = $transactionAmount;
    }

    /**
     * Unsets Transaction Amount.
     * Transaction Amount
     */
    public function unsetTransactionAmount(): void
    {
        $this->transactionAmount = [];
    }

    /**
     * Returns Previous Transaction Amount.
     * Previous Transaction Amount
     */
    public function getPreviousTransactionAmount(): ?int
    {
        if (count($this->previousTransactionAmount) == 0) {
            return null;
        }
        return $this->previousTransactionAmount['value'];
    }

    /**
     * Sets Previous Transaction Amount.
     * Previous Transaction Amount
     *
     * @maps previous_transaction_amount
     */
    public function setPreviousTransactionAmount(?int $previousTransactionAmount): void
    {
        $this->previousTransactionAmount['value'] = $previousTransactionAmount;
    }

    /**
     * Unsets Previous Transaction Amount.
     * Previous Transaction Amount
     */
    public function unsetPreviousTransactionAmount(): void
    {
        $this->previousTransactionAmount = [];
    }

    /**
     * Returns Previous Transaction Created Ts.
     * Previous Transaction Created Timestamp
     */
    public function getPreviousTransactionCreatedTs(): ?float
    {
        if (count($this->previousTransactionCreatedTs) == 0) {
            return null;
        }
        return $this->previousTransactionCreatedTs['value'];
    }

    /**
     * Sets Previous Transaction Created Ts.
     * Previous Transaction Created Timestamp
     *
     * @maps previous_transaction_created_ts
     */
    public function setPreviousTransactionCreatedTs(?float $previousTransactionCreatedTs): void
    {
        $this->previousTransactionCreatedTs['value'] = $previousTransactionCreatedTs;
    }

    /**
     * Unsets Previous Transaction Created Ts.
     * Previous Transaction Created Timestamp
     */
    public function unsetPreviousTransactionCreatedTs(): void
    {
        $this->previousTransactionCreatedTs = [];
    }

    /**
     * Returns Reference Type.
     * Reference Type
     */
    public function getReferenceType(): ?string
    {
        if (count($this->referenceType) == 0) {
            return null;
        }
        return $this->referenceType['value'];
    }

    /**
     * Sets Reference Type.
     * Reference Type
     *
     * @maps reference_type
     */
    public function setReferenceType(?string $referenceType): void
    {
        $this->referenceType['value'] = $referenceType;
    }

    /**
     * Unsets Reference Type.
     * Reference Type
     */
    public function unsetReferenceType(): void
    {
        $this->referenceType = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Created User Id.
     * User ID Created the register
     */
    public function getCreatedUserId(): ?string
    {
        if (count($this->createdUserId) == 0) {
            return null;
        }
        return $this->createdUserId['value'];
    }

    /**
     * Sets Created User Id.
     * User ID Created the register
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId['value'] = $createdUserId;
    }

    /**
     * Unsets Created User Id.
     * User ID Created the register
     */
    public function unsetCreatedUserId(): void
    {
        $this->createdUserId = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                              = $this->id;
        }
        if (!empty($this->transactionId)) {
            $json['transaction_id']                  = $this->transactionId['value'];
        }
        if (!empty($this->previousTransactionId)) {
            $json['previous_transaction_id']         = $this->previousTransactionId['value'];
        }
        if (!empty($this->transactionAmount)) {
            $json['transaction_amount']              = $this->transactionAmount['value'];
        }
        if (!empty($this->previousTransactionAmount)) {
            $json['previous_transaction_amount']     = $this->previousTransactionAmount['value'];
        }
        if (!empty($this->previousTransactionCreatedTs)) {
            $json['previous_transaction_created_ts'] = $this->previousTransactionCreatedTs['value'];
        }
        if (!empty($this->referenceType)) {
            $json['reference_type']                  = $this->referenceType['value'];
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']                      = $this->createdTs['value'];
        }
        if (!empty($this->createdUserId)) {
            $json['created_user_id']                 = $this->createdUserId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
