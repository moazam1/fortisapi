<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Data8 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $parentId = [];

    /**
     * @var PrimaryPrincipal
     */
    private $primaryPrincipal;

    /**
     * @var string
     */
    private $templateCode;

    /**
     * @var string
     */
    private $email;

    /**
     * @var string
     */
    private $dbaName;

    /**
     * @var Location4
     */
    private $location;

    /**
     * @var string
     */
    private $appDelivery;

    /**
     * @var array
     */
    private $businessCategory = [];

    /**
     * @var array
     */
    private $businessType = [];

    /**
     * @var array
     */
    private $businessDescription = [];

    /**
     * @var array
     */
    private $swipedPercent = [];

    /**
     * @var array
     */
    private $keyedPercent = [];

    /**
     * @var array
     */
    private $ecommercePercent = [];

    /**
     * @var array
     */
    private $ownershipType = [];

    /**
     * @var array
     */
    private $fedTaxId = [];

    /**
     * @var array
     */
    private $ccAverageTicketRange = [];

    /**
     * @var array
     */
    private $ccMonthlyVolumeRange = [];

    /**
     * @var array
     */
    private $ccHighTicket = [];

    /**
     * @var array
     */
    private $ecAverageTicketRange = [];

    /**
     * @var array
     */
    private $ecMonthlyVolumeRange = [];

    /**
     * @var array
     */
    private $ecHighTicket = [];

    /**
     * @var array
     */
    private $website = [];

    /**
     * @var BankAccount
     */
    private $bankAccount;

    /**
     * @var AltBankAccount
     */
    private $altBankAccount;

    /**
     * @var array
     */
    private $legalName = [];

    /**
     * @var Contact
     */
    private $contact;

    /**
     * @var string
     */
    private $clientAppId;

    /**
     * @var array
     */
    private $appLink = [];

    /**
     * @param PrimaryPrincipal $primaryPrincipal
     * @param string $templateCode
     * @param string $email
     * @param string $dbaName
     * @param Location4 $location
     * @param string $appDelivery
     * @param BankAccount $bankAccount
     * @param AltBankAccount $altBankAccount
     * @param Contact $contact
     * @param string $clientAppId
     */
    public function __construct(
        PrimaryPrincipal $primaryPrincipal,
        string $templateCode,
        string $email,
        string $dbaName,
        Location4 $location,
        string $appDelivery,
        BankAccount $bankAccount,
        AltBankAccount $altBankAccount,
        Contact $contact,
        string $clientAppId
    ) {
        $this->primaryPrincipal = $primaryPrincipal;
        $this->templateCode = $templateCode;
        $this->email = $email;
        $this->dbaName = $dbaName;
        $this->location = $location;
        $this->appDelivery = $appDelivery;
        $this->bankAccount = $bankAccount;
        $this->altBankAccount = $altBankAccount;
        $this->contact = $contact;
        $this->clientAppId = $clientAppId;
    }

    /**
     * Returns Parent Id.
     * Location ID
     */
    public function getParentId(): ?string
    {
        if (count($this->parentId) == 0) {
            return null;
        }
        return $this->parentId['value'];
    }

    /**
     * Sets Parent Id.
     * Location ID
     *
     * @maps parent_id
     */
    public function setParentId(?string $parentId): void
    {
        $this->parentId['value'] = $parentId;
    }

    /**
     * Unsets Parent Id.
     * Location ID
     */
    public function unsetParentId(): void
    {
        $this->parentId = [];
    }

    /**
     * Returns Primary Principal.
     * The Primary Principal.
     */
    public function getPrimaryPrincipal(): PrimaryPrincipal
    {
        return $this->primaryPrincipal;
    }

    /**
     * Sets Primary Principal.
     * The Primary Principal.
     *
     * @required
     * @maps primary_principal
     */
    public function setPrimaryPrincipal(PrimaryPrincipal $primaryPrincipal): void
    {
        $this->primaryPrincipal = $primaryPrincipal;
    }

    /**
     * Returns Template Code.
     * The ID of the template to be used - this value will be provided by Fortis.
     */
    public function getTemplateCode(): string
    {
        return $this->templateCode;
    }

    /**
     * Sets Template Code.
     * The ID of the template to be used - this value will be provided by Fortis.
     *
     * @required
     * @maps template_code
     */
    public function setTemplateCode(string $templateCode): void
    {
        $this->templateCode = $templateCode;
    }

    /**
     * Returns Email.
     * Merchant email address.
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * Sets Email.
     * Merchant email address.
     *
     * @required
     * @maps email
     */
    public function setEmail(string $email): void
    {
        $this->email = $email;
    }

    /**
     * Returns Dba Name.
     * Merchant 'Doing Business As' name.
     */
    public function getDbaName(): string
    {
        return $this->dbaName;
    }

    /**
     * Sets Dba Name.
     * Merchant 'Doing Business As' name.
     *
     * @required
     * @maps dba_name
     */
    public function setDbaName(string $dbaName): void
    {
        $this->dbaName = $dbaName;
    }

    /**
     * Returns Location.
     * The Location.
     */
    public function getLocation(): Location4
    {
        return $this->location;
    }

    /**
     * Sets Location.
     * The Location.
     *
     * @required
     * @maps location
     */
    public function setLocation(Location4 $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns App Delivery.
     * The delivery method of the app to the merchant.
     */
    public function getAppDelivery(): string
    {
        return $this->appDelivery;
    }

    /**
     * Sets App Delivery.
     * The delivery method of the app to the merchant.
     *
     * @required
     * @maps app_delivery
     */
    public function setAppDelivery(string $appDelivery): void
    {
        $this->appDelivery = $appDelivery;
    }

    /**
     * Returns Business Category.
     * The Category of the merchant's business
     */
    public function getBusinessCategory(): ?string
    {
        if (count($this->businessCategory) == 0) {
            return null;
        }
        return $this->businessCategory['value'];
    }

    /**
     * Sets Business Category.
     * The Category of the merchant's business
     *
     * @maps business_category
     * @factory \FortisAPILib\Models\BusinessCategoryEnum::checkValue
     */
    public function setBusinessCategory(?string $businessCategory): void
    {
        $this->businessCategory['value'] = $businessCategory;
    }

    /**
     * Unsets Business Category.
     * The Category of the merchant's business
     */
    public function unsetBusinessCategory(): void
    {
        $this->businessCategory = [];
    }

    /**
     * Returns Business Type.
     * The Type of a merchant's business.
     */
    public function getBusinessType(): ?string
    {
        if (count($this->businessType) == 0) {
            return null;
        }
        return $this->businessType['value'];
    }

    /**
     * Sets Business Type.
     * The Type of a merchant's business.
     *
     * @maps business_type
     * @factory \FortisAPILib\Models\BusinessTypeEnum::checkValue
     */
    public function setBusinessType(?string $businessType): void
    {
        $this->businessType['value'] = $businessType;
    }

    /**
     * Unsets Business Type.
     * The Type of a merchant's business.
     */
    public function unsetBusinessType(): void
    {
        $this->businessType = [];
    }

    /**
     * Returns Business Description.
     * Description of Goods or Services.
     */
    public function getBusinessDescription(): ?string
    {
        if (count($this->businessDescription) == 0) {
            return null;
        }
        return $this->businessDescription['value'];
    }

    /**
     * Sets Business Description.
     * Description of Goods or Services.
     *
     * @maps business_description
     */
    public function setBusinessDescription(?string $businessDescription): void
    {
        $this->businessDescription['value'] = $businessDescription;
    }

    /**
     * Unsets Business Description.
     * Description of Goods or Services.
     */
    public function unsetBusinessDescription(): void
    {
        $this->businessDescription = [];
    }

    /**
     * Returns Swiped Percent.
     * Card present/swiped percentage
     */
    public function getSwipedPercent(): ?int
    {
        if (count($this->swipedPercent) == 0) {
            return null;
        }
        return $this->swipedPercent['value'];
    }

    /**
     * Sets Swiped Percent.
     * Card present/swiped percentage
     *
     * @maps swiped_percent
     */
    public function setSwipedPercent(?int $swipedPercent): void
    {
        $this->swipedPercent['value'] = $swipedPercent;
    }

    /**
     * Unsets Swiped Percent.
     * Card present/swiped percentage
     */
    public function unsetSwipedPercent(): void
    {
        $this->swipedPercent = [];
    }

    /**
     * Returns Keyed Percent.
     * Card not present/keyed percentage
     */
    public function getKeyedPercent(): ?int
    {
        if (count($this->keyedPercent) == 0) {
            return null;
        }
        return $this->keyedPercent['value'];
    }

    /**
     * Sets Keyed Percent.
     * Card not present/keyed percentage
     *
     * @maps keyed_percent
     */
    public function setKeyedPercent(?int $keyedPercent): void
    {
        $this->keyedPercent['value'] = $keyedPercent;
    }

    /**
     * Unsets Keyed Percent.
     * Card not present/keyed percentage
     */
    public function unsetKeyedPercent(): void
    {
        $this->keyedPercent = [];
    }

    /**
     * Returns Ecommerce Percent.
     * eCommerce percentage.
     */
    public function getEcommercePercent(): ?int
    {
        if (count($this->ecommercePercent) == 0) {
            return null;
        }
        return $this->ecommercePercent['value'];
    }

    /**
     * Sets Ecommerce Percent.
     * eCommerce percentage.
     *
     * @maps ecommerce_percent
     */
    public function setEcommercePercent(?int $ecommercePercent): void
    {
        $this->ecommercePercent['value'] = $ecommercePercent;
    }

    /**
     * Unsets Ecommerce Percent.
     * eCommerce percentage.
     */
    public function unsetEcommercePercent(): void
    {
        $this->ecommercePercent = [];
    }

    /**
     * Returns Ownership Type.
     * The Ownership Type of the merchant's business.
     */
    public function getOwnershipType(): ?string
    {
        if (count($this->ownershipType) == 0) {
            return null;
        }
        return $this->ownershipType['value'];
    }

    /**
     * Sets Ownership Type.
     * The Ownership Type of the merchant's business.
     *
     * @maps ownership_type
     * @factory \FortisAPILib\Models\OwnershipTypeEnum::checkValue
     */
    public function setOwnershipType(?string $ownershipType): void
    {
        $this->ownershipType['value'] = $ownershipType;
    }

    /**
     * Unsets Ownership Type.
     * The Ownership Type of the merchant's business.
     */
    public function unsetOwnershipType(): void
    {
        $this->ownershipType = [];
    }

    /**
     * Returns Fed Tax Id.
     * Federal Tax ID (EIN).
     */
    public function getFedTaxId(): ?string
    {
        if (count($this->fedTaxId) == 0) {
            return null;
        }
        return $this->fedTaxId['value'];
    }

    /**
     * Sets Fed Tax Id.
     * Federal Tax ID (EIN).
     *
     * @maps fed_tax_id
     */
    public function setFedTaxId(?string $fedTaxId): void
    {
        $this->fedTaxId['value'] = $fedTaxId;
    }

    /**
     * Unsets Fed Tax Id.
     * Federal Tax ID (EIN).
     */
    public function unsetFedTaxId(): void
    {
        $this->fedTaxId = [];
    }

    /**
     * Returns Cc Average Ticket Range.
     * Average Transaction Amount Range
     */
    public function getCcAverageTicketRange(): ?int
    {
        if (count($this->ccAverageTicketRange) == 0) {
            return null;
        }
        return $this->ccAverageTicketRange['value'];
    }

    /**
     * Sets Cc Average Ticket Range.
     * Average Transaction Amount Range
     *
     * @maps cc_average_ticket_range
     */
    public function setCcAverageTicketRange(?int $ccAverageTicketRange): void
    {
        $this->ccAverageTicketRange['value'] = $ccAverageTicketRange;
    }

    /**
     * Unsets Cc Average Ticket Range.
     * Average Transaction Amount Range
     */
    public function unsetCcAverageTicketRange(): void
    {
        $this->ccAverageTicketRange = [];
    }

    /**
     * Returns Cc Monthly Volume Range.
     * Monthly Processing Volume Range
     */
    public function getCcMonthlyVolumeRange(): ?int
    {
        if (count($this->ccMonthlyVolumeRange) == 0) {
            return null;
        }
        return $this->ccMonthlyVolumeRange['value'];
    }

    /**
     * Sets Cc Monthly Volume Range.
     * Monthly Processing Volume Range
     *
     * @maps cc_monthly_volume_range
     */
    public function setCcMonthlyVolumeRange(?int $ccMonthlyVolumeRange): void
    {
        $this->ccMonthlyVolumeRange['value'] = $ccMonthlyVolumeRange;
    }

    /**
     * Unsets Cc Monthly Volume Range.
     * Monthly Processing Volume Range
     */
    public function unsetCcMonthlyVolumeRange(): void
    {
        $this->ccMonthlyVolumeRange = [];
    }

    /**
     * Returns Cc High Ticket.
     * Highest transaction amount rounded to the next dollar
     */
    public function getCcHighTicket(): ?int
    {
        if (count($this->ccHighTicket) == 0) {
            return null;
        }
        return $this->ccHighTicket['value'];
    }

    /**
     * Sets Cc High Ticket.
     * Highest transaction amount rounded to the next dollar
     *
     * @maps cc_high_ticket
     */
    public function setCcHighTicket(?int $ccHighTicket): void
    {
        $this->ccHighTicket['value'] = $ccHighTicket;
    }

    /**
     * Unsets Cc High Ticket.
     * Highest transaction amount rounded to the next dollar
     */
    public function unsetCcHighTicket(): void
    {
        $this->ccHighTicket = [];
    }

    /**
     * Returns Ec Average Ticket Range.
     * Average Transaction Amount Range
     */
    public function getEcAverageTicketRange(): ?int
    {
        if (count($this->ecAverageTicketRange) == 0) {
            return null;
        }
        return $this->ecAverageTicketRange['value'];
    }

    /**
     * Sets Ec Average Ticket Range.
     * Average Transaction Amount Range
     *
     * @maps ec_average_ticket_range
     */
    public function setEcAverageTicketRange(?int $ecAverageTicketRange): void
    {
        $this->ecAverageTicketRange['value'] = $ecAverageTicketRange;
    }

    /**
     * Unsets Ec Average Ticket Range.
     * Average Transaction Amount Range
     */
    public function unsetEcAverageTicketRange(): void
    {
        $this->ecAverageTicketRange = [];
    }

    /**
     * Returns Ec Monthly Volume Range.
     * Monthly Processing Volume Range
     */
    public function getEcMonthlyVolumeRange(): ?int
    {
        if (count($this->ecMonthlyVolumeRange) == 0) {
            return null;
        }
        return $this->ecMonthlyVolumeRange['value'];
    }

    /**
     * Sets Ec Monthly Volume Range.
     * Monthly Processing Volume Range
     *
     * @maps ec_monthly_volume_range
     */
    public function setEcMonthlyVolumeRange(?int $ecMonthlyVolumeRange): void
    {
        $this->ecMonthlyVolumeRange['value'] = $ecMonthlyVolumeRange;
    }

    /**
     * Unsets Ec Monthly Volume Range.
     * Monthly Processing Volume Range
     */
    public function unsetEcMonthlyVolumeRange(): void
    {
        $this->ecMonthlyVolumeRange = [];
    }

    /**
     * Returns Ec High Ticket.
     * Highest transaction amount rounded to the next dollar
     */
    public function getEcHighTicket(): ?int
    {
        if (count($this->ecHighTicket) == 0) {
            return null;
        }
        return $this->ecHighTicket['value'];
    }

    /**
     * Sets Ec High Ticket.
     * Highest transaction amount rounded to the next dollar
     *
     * @maps ec_high_ticket
     */
    public function setEcHighTicket(?int $ecHighTicket): void
    {
        $this->ecHighTicket['value'] = $ecHighTicket;
    }

    /**
     * Unsets Ec High Ticket.
     * Highest transaction amount rounded to the next dollar
     */
    public function unsetEcHighTicket(): void
    {
        $this->ecHighTicket = [];
    }

    /**
     * Returns Website.
     * Merchant's business website.
     */
    public function getWebsite(): ?string
    {
        if (count($this->website) == 0) {
            return null;
        }
        return $this->website['value'];
    }

    /**
     * Sets Website.
     * Merchant's business website.
     *
     * @maps website
     */
    public function setWebsite(?string $website): void
    {
        $this->website['value'] = $website;
    }

    /**
     * Unsets Website.
     * Merchant's business website.
     */
    public function unsetWebsite(): void
    {
        $this->website = [];
    }

    /**
     * Returns Bank Account.
     * The Bank Account.
     */
    public function getBankAccount(): BankAccount
    {
        return $this->bankAccount;
    }

    /**
     * Sets Bank Account.
     * The Bank Account.
     *
     * @required
     * @maps bank_account
     */
    public function setBankAccount(BankAccount $bankAccount): void
    {
        $this->bankAccount = $bankAccount;
    }

    /**
     * Returns Alt Bank Account.
     * The Alternative Bank Account.
     */
    public function getAltBankAccount(): AltBankAccount
    {
        return $this->altBankAccount;
    }

    /**
     * Sets Alt Bank Account.
     * The Alternative Bank Account.
     *
     * @required
     * @maps alt_bank_account
     */
    public function setAltBankAccount(AltBankAccount $altBankAccount): void
    {
        $this->altBankAccount = $altBankAccount;
    }

    /**
     * Returns Legal Name.
     * Merchant legal name.
     */
    public function getLegalName(): ?string
    {
        if (count($this->legalName) == 0) {
            return null;
        }
        return $this->legalName['value'];
    }

    /**
     * Sets Legal Name.
     * Merchant legal name.
     *
     * @maps legal_name
     */
    public function setLegalName(?string $legalName): void
    {
        $this->legalName['value'] = $legalName;
    }

    /**
     * Unsets Legal Name.
     * Merchant legal name.
     */
    public function unsetLegalName(): void
    {
        $this->legalName = [];
    }

    /**
     * Returns Contact.
     * The Contact.
     */
    public function getContact(): Contact
    {
        return $this->contact;
    }

    /**
     * Sets Contact.
     * The Contact.
     *
     * @required
     * @maps contact
     */
    public function setContact(Contact $contact): void
    {
        $this->contact = $contact;
    }

    /**
     * Returns Client App Id.
     * Client Issues Id to track that can be used to track each submitted merchant application. This id
     * should be generated and sent in the request payload, and will be returned in the response payload.
     * If no id is submitted in the payload request, this field will be null in the response.
     */
    public function getClientAppId(): string
    {
        return $this->clientAppId;
    }

    /**
     * Sets Client App Id.
     * Client Issues Id to track that can be used to track each submitted merchant application. This id
     * should be generated and sent in the request payload, and will be returned in the response payload.
     * If no id is submitted in the payload request, this field will be null in the response.
     *
     * @required
     * @maps client_app_id
     */
    public function setClientAppId(string $clientAppId): void
    {
        $this->clientAppId = $clientAppId;
    }

    /**
     * Returns App Link.
     * A full page or iframeable link, set in the request app_delivery field, that can be used to retrieve
     * and resume the generated merchant application. No link will be returned if app_delivery is direct
     */
    public function getAppLink(): ?string
    {
        if (count($this->appLink) == 0) {
            return null;
        }
        return $this->appLink['value'];
    }

    /**
     * Sets App Link.
     * A full page or iframeable link, set in the request app_delivery field, that can be used to retrieve
     * and resume the generated merchant application. No link will be returned if app_delivery is direct
     *
     * @maps app_link
     */
    public function setAppLink(?string $appLink): void
    {
        $this->appLink['value'] = $appLink;
    }

    /**
     * Unsets App Link.
     * A full page or iframeable link, set in the request app_delivery field, that can be used to retrieve
     * and resume the generated merchant application. No link will be returned if app_delivery is direct
     */
    public function unsetAppLink(): void
    {
        $this->appLink = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->parentId)) {
            $json['parent_id']               = $this->parentId['value'];
        }
        $json['primary_principal']           = $this->primaryPrincipal;
        $json['template_code']               = $this->templateCode;
        $json['email']                       = $this->email;
        $json['dba_name']                    = $this->dbaName;
        $json['location']                    = $this->location;
        $json['app_delivery']                = $this->appDelivery;
        if (!empty($this->businessCategory)) {
            $json['business_category']       = BusinessCategoryEnum::checkValue($this->businessCategory['value']);
        }
        if (!empty($this->businessType)) {
            $json['business_type']           = BusinessTypeEnum::checkValue($this->businessType['value']);
        }
        if (!empty($this->businessDescription)) {
            $json['business_description']    = $this->businessDescription['value'];
        }
        if (!empty($this->swipedPercent)) {
            $json['swiped_percent']          = $this->swipedPercent['value'];
        }
        if (!empty($this->keyedPercent)) {
            $json['keyed_percent']           = $this->keyedPercent['value'];
        }
        if (!empty($this->ecommercePercent)) {
            $json['ecommerce_percent']       = $this->ecommercePercent['value'];
        }
        if (!empty($this->ownershipType)) {
            $json['ownership_type']          = OwnershipTypeEnum::checkValue($this->ownershipType['value']);
        }
        if (!empty($this->fedTaxId)) {
            $json['fed_tax_id']              = $this->fedTaxId['value'];
        }
        if (!empty($this->ccAverageTicketRange)) {
            $json['cc_average_ticket_range'] = $this->ccAverageTicketRange['value'];
        }
        if (!empty($this->ccMonthlyVolumeRange)) {
            $json['cc_monthly_volume_range'] = $this->ccMonthlyVolumeRange['value'];
        }
        if (!empty($this->ccHighTicket)) {
            $json['cc_high_ticket']          = $this->ccHighTicket['value'];
        }
        if (!empty($this->ecAverageTicketRange)) {
            $json['ec_average_ticket_range'] = $this->ecAverageTicketRange['value'];
        }
        if (!empty($this->ecMonthlyVolumeRange)) {
            $json['ec_monthly_volume_range'] = $this->ecMonthlyVolumeRange['value'];
        }
        if (!empty($this->ecHighTicket)) {
            $json['ec_high_ticket']          = $this->ecHighTicket['value'];
        }
        if (!empty($this->website)) {
            $json['website']                 = $this->website['value'];
        }
        $json['bank_account']                = $this->bankAccount;
        $json['alt_bank_account']            = $this->altBankAccount;
        if (!empty($this->legalName)) {
            $json['legal_name']              = $this->legalName['value'];
        }
        $json['contact']                     = $this->contact;
        $json['client_app_id']               = $this->clientAppId;
        if (!empty($this->appLink)) {
            $json['app_link']                = $this->appLink['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
