<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

/**
 * Forecast Information on `expand`
 */
class Forecast implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var string
     */
    private $recurringId;

    /**
     * @var array
     */
    private $recurringType = [];

    /**
     * @var array
     */
    private $amount = [];

    /**
     * @var array
     */
    private $month = [];

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $modifiedTs = [];

    /**
     * @param string $recurringId
     */
    public function __construct(string $recurringId)
    {
        $this->recurringId = $recurringId;
    }

    /**
     * Returns Id.
     * ID
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * ID
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Recurring Id.
     * Recurring ID
     */
    public function getRecurringId(): string
    {
        return $this->recurringId;
    }

    /**
     * Sets Recurring Id.
     * Recurring ID
     *
     * @required
     * @maps recurring_id
     */
    public function setRecurringId(string $recurringId): void
    {
        $this->recurringId = $recurringId;
    }

    /**
     * Returns Recurring Type.
     * Recurring Type
     */
    public function getRecurringType(): ?float
    {
        if (count($this->recurringType) == 0) {
            return null;
        }
        return $this->recurringType['value'];
    }

    /**
     * Sets Recurring Type.
     * Recurring Type
     *
     * @maps recurring_type
     */
    public function setRecurringType(?float $recurringType): void
    {
        $this->recurringType['value'] = $recurringType;
    }

    /**
     * Unsets Recurring Type.
     * Recurring Type
     */
    public function unsetRecurringType(): void
    {
        $this->recurringType = [];
    }

    /**
     * Returns Amount.
     * Amount
     */
    public function getAmount(): ?float
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     * Amount
     *
     * @maps amount
     */
    public function setAmount(?float $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     * Amount
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Returns Month.
     * Month
     */
    public function getMonth(): ?string
    {
        if (count($this->month) == 0) {
            return null;
        }
        return $this->month['value'];
    }

    /**
     * Sets Month.
     * Month
     *
     * @maps month
     */
    public function setMonth(?string $month): void
    {
        $this->month['value'] = $month;
    }

    /**
     * Unsets Month.
     * Month
     */
    public function unsetMonth(): void
    {
        $this->month = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        if (count($this->modifiedTs) == 0) {
            return null;
        }
        return $this->modifiedTs['value'];
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs['value'] = $modifiedTs;
    }

    /**
     * Unsets Modified Ts.
     * Modified Time Stamp
     */
    public function unsetModifiedTs(): void
    {
        $this->modifiedTs = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']             = $this->id;
        }
        $json['recurring_id']       = $this->recurringId;
        if (!empty($this->recurringType)) {
            $json['recurring_type'] = $this->recurringType['value'];
        }
        if (!empty($this->amount)) {
            $json['amount']         = $this->amount['value'];
        }
        if (!empty($this->month)) {
            $json['month']          = $this->month['value'];
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']     = $this->createdTs['value'];
        }
        if (!empty($this->modifiedTs)) {
            $json['modified_ts']    = $this->modifiedTs['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
