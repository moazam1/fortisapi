<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * You can use any `field_name` from this endpoint results as a filter, and you can also use more than
 * one field to create AND conditions. For date fields (ended with `_ts`), you can also search for
 * ranges using the `$gte` (Greater than or equal to) and/or  `$lte` (Lower than or equal to). You can
 * use one of the following methods:
 * >/endpoint?filter={ "field_name": "Value" }
 * >
 * >/endpoint?filter[field_name]=Value
 * >
 * >/endpoint?filter={ "created_ts": "today" }
 * >
 * >/endpoint?filter[created_ts]=today
 * >
 * >/endpoint?filter={ "created_ts": { "$gte": "yesterday", "$lte": "today" } }
 * >
 * >/endpoint?filter[created_ts][$gte]=yesterday&filter[created_ts][$lte]=today
 * >
 * >/endpoint?filter[address][city]=memphis
 * >
 * >/endpoint?filter={ "address": { "city" : "memphis" } }
 * >
 */
class Filter7 implements \JsonSerializable
{
    /**
     * @var array|null
     */
    private $accountVaultId;

    /**
     * @var array|null
     */
    private $tokenId;

    /**
     * @var array|null
     */
    private $accountVaultApiId;

    /**
     * @var array|null
     */
    private $tokenApiId;

    /**
     * @var array|null
     */
    private $joi;

    /**
     * @var array|null
     */
    private $active;

    /**
     * @var array|null
     */
    private $description;

    /**
     * @var array|null
     */
    private $endDate;

    /**
     * @var array|null
     */
    private $installmentTotalCount;

    /**
     * @var array|null
     */
    private $interval;

    /**
     * @var array|null
     */
    private $intervalType;

    /**
     * @var array|null
     */
    private $locationId;

    /**
     * @var array|null
     */
    private $notificationDays;

    /**
     * @var array|null
     */
    private $paymentMethod;

    /**
     * @var array|null
     */
    private $productTransactionId;

    /**
     * @var array|null
     */
    private $recurringId;

    /**
     * @var array|null
     */
    private $recurringApiId;

    /**
     * @var array|null
     */
    private $startDate;

    /**
     * @var array|null
     */
    private $status;

    /**
     * @var array|null
     */
    private $transactionAmount;

    /**
     * @var array|null
     */
    private $termsAgree;

    /**
     * @var array|null
     */
    private $termsAgreeIp;

    /**
     * @var array|null
     */
    private $recurringC1;

    /**
     * @var array|null
     */
    private $recurringC2;

    /**
     * @var array|null
     */
    private $recurringC3;

    /**
     * @var array|null
     */
    private $sendToProcAsRecur;

    /**
     * @var array|null
     */
    private $id;

    /**
     * @var array|null
     */
    private $nextRunDate;

    /**
     * @var string|null|CreatedTs1
     */
    private $createdTs;

    /**
     * @var string|null|ModifiedTs1
     */
    private $modifiedTs;

    /**
     * @var array|null
     */
    private $recurringTypeId;

    /**
     * @var array|null
     */
    private $installmentAmountTotal;

    /**
     * @var array|null
     */
    private $logEmails;

    /**
     * @var array|null
     */
    private $contact;

    /**
     * @var array|null
     */
    private $accountVault;

    /**
     * @var array|null
     */
    private $createdUser;

    /**
     * @var array|null
     */
    private $signature;

    /**
     * @var array|null
     */
    private $paymentSchedule;

    /**
     * @var array|null
     */
    private $location;

    /**
     * @var array|null
     */
    private $productTransaction;

    /**
     * @var array|null
     */
    private $nextRunDateMin;

    /**
     * @var array|null
     */
    private $nextRunDateMax;

    /**
     * @var array|null
     */
    private $tags;

    /**
     * @var array|null
     */
    private $allTags;

    /**
     * @var array|null
     */
    private $changelogs;

    /**
     * @var array|null
     */
    private $forecast;

    /**
     * @var array|null
     */
    private $recurringSplits;

    /**
     * Returns Account Vault Id.
     */
    public function getAccountVaultId(): ?array
    {
        return $this->accountVaultId;
    }

    /**
     * Sets Account Vault Id.
     *
     * @maps account_vault_id
     */
    public function setAccountVaultId(?array $accountVaultId): void
    {
        $this->accountVaultId = $accountVaultId;
    }

    /**
     * Returns Token Id.
     */
    public function getTokenId(): ?array
    {
        return $this->tokenId;
    }

    /**
     * Sets Token Id.
     *
     * @maps token_id
     */
    public function setTokenId(?array $tokenId): void
    {
        $this->tokenId = $tokenId;
    }

    /**
     * Returns Account Vault Api Id.
     */
    public function getAccountVaultApiId(): ?array
    {
        return $this->accountVaultApiId;
    }

    /**
     * Sets Account Vault Api Id.
     *
     * @maps account_vault_api_id
     */
    public function setAccountVaultApiId(?array $accountVaultApiId): void
    {
        $this->accountVaultApiId = $accountVaultApiId;
    }

    /**
     * Returns Token Api Id.
     */
    public function getTokenApiId(): ?array
    {
        return $this->tokenApiId;
    }

    /**
     * Sets Token Api Id.
     *
     * @maps token_api_id
     */
    public function setTokenApiId(?array $tokenApiId): void
    {
        $this->tokenApiId = $tokenApiId;
    }

    /**
     * Returns Joi.
     */
    public function getJoi(): ?array
    {
        return $this->joi;
    }

    /**
     * Sets Joi.
     *
     * @maps _joi
     */
    public function setJoi(?array $joi): void
    {
        $this->joi = $joi;
    }

    /**
     * Returns Active.
     */
    public function getActive(): ?array
    {
        return $this->active;
    }

    /**
     * Sets Active.
     *
     * @maps active
     */
    public function setActive(?array $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?array
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?array $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns End Date.
     */
    public function getEndDate(): ?array
    {
        return $this->endDate;
    }

    /**
     * Sets End Date.
     *
     * @maps end_date
     */
    public function setEndDate(?array $endDate): void
    {
        $this->endDate = $endDate;
    }

    /**
     * Returns Installment Total Count.
     */
    public function getInstallmentTotalCount(): ?array
    {
        return $this->installmentTotalCount;
    }

    /**
     * Sets Installment Total Count.
     *
     * @maps installment_total_count
     */
    public function setInstallmentTotalCount(?array $installmentTotalCount): void
    {
        $this->installmentTotalCount = $installmentTotalCount;
    }

    /**
     * Returns Interval.
     */
    public function getInterval(): ?array
    {
        return $this->interval;
    }

    /**
     * Sets Interval.
     *
     * @maps interval
     */
    public function setInterval(?array $interval): void
    {
        $this->interval = $interval;
    }

    /**
     * Returns Interval Type.
     */
    public function getIntervalType(): ?array
    {
        return $this->intervalType;
    }

    /**
     * Sets Interval Type.
     *
     * @maps interval_type
     */
    public function setIntervalType(?array $intervalType): void
    {
        $this->intervalType = $intervalType;
    }

    /**
     * Returns Location Id.
     */
    public function getLocationId(): ?array
    {
        return $this->locationId;
    }

    /**
     * Sets Location Id.
     *
     * @maps location_id
     */
    public function setLocationId(?array $locationId): void
    {
        $this->locationId = $locationId;
    }

    /**
     * Returns Notification Days.
     */
    public function getNotificationDays(): ?array
    {
        return $this->notificationDays;
    }

    /**
     * Sets Notification Days.
     *
     * @maps notification_days
     */
    public function setNotificationDays(?array $notificationDays): void
    {
        $this->notificationDays = $notificationDays;
    }

    /**
     * Returns Payment Method.
     */
    public function getPaymentMethod(): ?array
    {
        return $this->paymentMethod;
    }

    /**
     * Sets Payment Method.
     *
     * @maps payment_method
     */
    public function setPaymentMethod(?array $paymentMethod): void
    {
        $this->paymentMethod = $paymentMethod;
    }

    /**
     * Returns Product Transaction Id.
     */
    public function getProductTransactionId(): ?array
    {
        return $this->productTransactionId;
    }

    /**
     * Sets Product Transaction Id.
     *
     * @maps product_transaction_id
     */
    public function setProductTransactionId(?array $productTransactionId): void
    {
        $this->productTransactionId = $productTransactionId;
    }

    /**
     * Returns Recurring Id.
     */
    public function getRecurringId(): ?array
    {
        return $this->recurringId;
    }

    /**
     * Sets Recurring Id.
     *
     * @maps recurring_id
     */
    public function setRecurringId(?array $recurringId): void
    {
        $this->recurringId = $recurringId;
    }

    /**
     * Returns Recurring Api Id.
     */
    public function getRecurringApiId(): ?array
    {
        return $this->recurringApiId;
    }

    /**
     * Sets Recurring Api Id.
     *
     * @maps recurring_api_id
     */
    public function setRecurringApiId(?array $recurringApiId): void
    {
        $this->recurringApiId = $recurringApiId;
    }

    /**
     * Returns Start Date.
     */
    public function getStartDate(): ?array
    {
        return $this->startDate;
    }

    /**
     * Sets Start Date.
     *
     * @maps start_date
     */
    public function setStartDate(?array $startDate): void
    {
        $this->startDate = $startDate;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?array
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?array $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Transaction Amount.
     */
    public function getTransactionAmount(): ?array
    {
        return $this->transactionAmount;
    }

    /**
     * Sets Transaction Amount.
     *
     * @maps transaction_amount
     */
    public function setTransactionAmount(?array $transactionAmount): void
    {
        $this->transactionAmount = $transactionAmount;
    }

    /**
     * Returns Terms Agree.
     */
    public function getTermsAgree(): ?array
    {
        return $this->termsAgree;
    }

    /**
     * Sets Terms Agree.
     *
     * @maps terms_agree
     */
    public function setTermsAgree(?array $termsAgree): void
    {
        $this->termsAgree = $termsAgree;
    }

    /**
     * Returns Terms Agree Ip.
     */
    public function getTermsAgreeIp(): ?array
    {
        return $this->termsAgreeIp;
    }

    /**
     * Sets Terms Agree Ip.
     *
     * @maps terms_agree_ip
     */
    public function setTermsAgreeIp(?array $termsAgreeIp): void
    {
        $this->termsAgreeIp = $termsAgreeIp;
    }

    /**
     * Returns Recurring C1.
     */
    public function getRecurringC1(): ?array
    {
        return $this->recurringC1;
    }

    /**
     * Sets Recurring C1.
     *
     * @maps recurring_c1
     */
    public function setRecurringC1(?array $recurringC1): void
    {
        $this->recurringC1 = $recurringC1;
    }

    /**
     * Returns Recurring C2.
     */
    public function getRecurringC2(): ?array
    {
        return $this->recurringC2;
    }

    /**
     * Sets Recurring C2.
     *
     * @maps recurring_c2
     */
    public function setRecurringC2(?array $recurringC2): void
    {
        $this->recurringC2 = $recurringC2;
    }

    /**
     * Returns Recurring C3.
     */
    public function getRecurringC3(): ?array
    {
        return $this->recurringC3;
    }

    /**
     * Sets Recurring C3.
     *
     * @maps recurring_c3
     */
    public function setRecurringC3(?array $recurringC3): void
    {
        $this->recurringC3 = $recurringC3;
    }

    /**
     * Returns Send to Proc as Recur.
     */
    public function getSendToProcAsRecur(): ?array
    {
        return $this->sendToProcAsRecur;
    }

    /**
     * Sets Send to Proc as Recur.
     *
     * @maps send_to_proc_as_recur
     */
    public function setSendToProcAsRecur(?array $sendToProcAsRecur): void
    {
        $this->sendToProcAsRecur = $sendToProcAsRecur;
    }

    /**
     * Returns Id.
     */
    public function getId(): ?array
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @maps id
     */
    public function setId(?array $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Next Run Date.
     */
    public function getNextRunDate(): ?array
    {
        return $this->nextRunDate;
    }

    /**
     * Sets Next Run Date.
     *
     * @maps next_run_date
     */
    public function setNextRunDate(?array $nextRunDate): void
    {
        $this->nextRunDate = $nextRunDate;
    }

    /**
     * Returns Created Ts.
     *
     * @return string|null|CreatedTs1
     */
    public function getCreatedTs()
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     *
     * @maps created_ts
     * @mapsBy anyOf(anyOf(CreatedTsEnum,CreatedTs1),null)
     * @factory \FortisAPILib\Models\CreatedTsEnum::checkValue CreatedTsEnum
     *
     * @param string|null|CreatedTs1 $createdTs
     */
    public function setCreatedTs($createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     *
     * @return string|null|ModifiedTs1
     */
    public function getModifiedTs()
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     *
     * @maps modified_ts
     * @mapsBy anyOf(anyOf(ModifiedTsEnum,ModifiedTs1),null)
     * @factory \FortisAPILib\Models\ModifiedTsEnum::checkValue ModifiedTsEnum
     *
     * @param string|null|ModifiedTs1 $modifiedTs
     */
    public function setModifiedTs($modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Recurring Type Id.
     */
    public function getRecurringTypeId(): ?array
    {
        return $this->recurringTypeId;
    }

    /**
     * Sets Recurring Type Id.
     *
     * @maps recurring_type_id
     */
    public function setRecurringTypeId(?array $recurringTypeId): void
    {
        $this->recurringTypeId = $recurringTypeId;
    }

    /**
     * Returns Installment Amount Total.
     */
    public function getInstallmentAmountTotal(): ?array
    {
        return $this->installmentAmountTotal;
    }

    /**
     * Sets Installment Amount Total.
     *
     * @maps installment_amount_total
     */
    public function setInstallmentAmountTotal(?array $installmentAmountTotal): void
    {
        $this->installmentAmountTotal = $installmentAmountTotal;
    }

    /**
     * Returns Log Emails.
     */
    public function getLogEmails(): ?array
    {
        return $this->logEmails;
    }

    /**
     * Sets Log Emails.
     *
     * @maps log_emails
     */
    public function setLogEmails(?array $logEmails): void
    {
        $this->logEmails = $logEmails;
    }

    /**
     * Returns Contact.
     */
    public function getContact(): ?array
    {
        return $this->contact;
    }

    /**
     * Sets Contact.
     *
     * @maps contact
     */
    public function setContact(?array $contact): void
    {
        $this->contact = $contact;
    }

    /**
     * Returns Account Vault.
     */
    public function getAccountVault(): ?array
    {
        return $this->accountVault;
    }

    /**
     * Sets Account Vault.
     *
     * @maps account_vault
     */
    public function setAccountVault(?array $accountVault): void
    {
        $this->accountVault = $accountVault;
    }

    /**
     * Returns Created User.
     */
    public function getCreatedUser(): ?array
    {
        return $this->createdUser;
    }

    /**
     * Sets Created User.
     *
     * @maps created_user
     */
    public function setCreatedUser(?array $createdUser): void
    {
        $this->createdUser = $createdUser;
    }

    /**
     * Returns Signature.
     */
    public function getSignature(): ?array
    {
        return $this->signature;
    }

    /**
     * Sets Signature.
     *
     * @maps signature
     */
    public function setSignature(?array $signature): void
    {
        $this->signature = $signature;
    }

    /**
     * Returns Payment Schedule.
     */
    public function getPaymentSchedule(): ?array
    {
        return $this->paymentSchedule;
    }

    /**
     * Sets Payment Schedule.
     *
     * @maps payment_schedule
     */
    public function setPaymentSchedule(?array $paymentSchedule): void
    {
        $this->paymentSchedule = $paymentSchedule;
    }

    /**
     * Returns Location.
     */
    public function getLocation(): ?array
    {
        return $this->location;
    }

    /**
     * Sets Location.
     *
     * @maps location
     */
    public function setLocation(?array $location): void
    {
        $this->location = $location;
    }

    /**
     * Returns Product Transaction.
     */
    public function getProductTransaction(): ?array
    {
        return $this->productTransaction;
    }

    /**
     * Sets Product Transaction.
     *
     * @maps product_transaction
     */
    public function setProductTransaction(?array $productTransaction): void
    {
        $this->productTransaction = $productTransaction;
    }

    /**
     * Returns Next Run Date Min.
     */
    public function getNextRunDateMin(): ?array
    {
        return $this->nextRunDateMin;
    }

    /**
     * Sets Next Run Date Min.
     *
     * @maps next_run_date_min
     */
    public function setNextRunDateMin(?array $nextRunDateMin): void
    {
        $this->nextRunDateMin = $nextRunDateMin;
    }

    /**
     * Returns Next Run Date Max.
     */
    public function getNextRunDateMax(): ?array
    {
        return $this->nextRunDateMax;
    }

    /**
     * Sets Next Run Date Max.
     *
     * @maps next_run_date_max
     */
    public function setNextRunDateMax(?array $nextRunDateMax): void
    {
        $this->nextRunDateMax = $nextRunDateMax;
    }

    /**
     * Returns Tags.
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * @maps tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns All Tags.
     */
    public function getAllTags(): ?array
    {
        return $this->allTags;
    }

    /**
     * Sets All Tags.
     *
     * @maps all_tags
     */
    public function setAllTags(?array $allTags): void
    {
        $this->allTags = $allTags;
    }

    /**
     * Returns Changelogs.
     */
    public function getChangelogs(): ?array
    {
        return $this->changelogs;
    }

    /**
     * Sets Changelogs.
     *
     * @maps changelogs
     */
    public function setChangelogs(?array $changelogs): void
    {
        $this->changelogs = $changelogs;
    }

    /**
     * Returns Forecast.
     */
    public function getForecast(): ?array
    {
        return $this->forecast;
    }

    /**
     * Sets Forecast.
     *
     * @maps forecast
     */
    public function setForecast(?array $forecast): void
    {
        $this->forecast = $forecast;
    }

    /**
     * Returns Recurring Splits.
     */
    public function getRecurringSplits(): ?array
    {
        return $this->recurringSplits;
    }

    /**
     * Sets Recurring Splits.
     *
     * @maps recurring_splits
     */
    public function setRecurringSplits(?array $recurringSplits): void
    {
        $this->recurringSplits = $recurringSplits;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->accountVaultId)) {
            $json['account_vault_id']         = $this->accountVaultId;
        }
        if (isset($this->tokenId)) {
            $json['token_id']                 = $this->tokenId;
        }
        if (isset($this->accountVaultApiId)) {
            $json['account_vault_api_id']     = $this->accountVaultApiId;
        }
        if (isset($this->tokenApiId)) {
            $json['token_api_id']             = $this->tokenApiId;
        }
        if (isset($this->joi)) {
            $json['_joi']                     = $this->joi;
        }
        if (isset($this->active)) {
            $json['active']                   = $this->active;
        }
        if (isset($this->description)) {
            $json['description']              = $this->description;
        }
        if (isset($this->endDate)) {
            $json['end_date']                 = $this->endDate;
        }
        if (isset($this->installmentTotalCount)) {
            $json['installment_total_count']  = $this->installmentTotalCount;
        }
        if (isset($this->interval)) {
            $json['interval']                 = $this->interval;
        }
        if (isset($this->intervalType)) {
            $json['interval_type']            = $this->intervalType;
        }
        if (isset($this->locationId)) {
            $json['location_id']              = $this->locationId;
        }
        if (isset($this->notificationDays)) {
            $json['notification_days']        = $this->notificationDays;
        }
        if (isset($this->paymentMethod)) {
            $json['payment_method']           = $this->paymentMethod;
        }
        if (isset($this->productTransactionId)) {
            $json['product_transaction_id']   = $this->productTransactionId;
        }
        if (isset($this->recurringId)) {
            $json['recurring_id']             = $this->recurringId;
        }
        if (isset($this->recurringApiId)) {
            $json['recurring_api_id']         = $this->recurringApiId;
        }
        if (isset($this->startDate)) {
            $json['start_date']               = $this->startDate;
        }
        if (isset($this->status)) {
            $json['status']                   = $this->status;
        }
        if (isset($this->transactionAmount)) {
            $json['transaction_amount']       = $this->transactionAmount;
        }
        if (isset($this->termsAgree)) {
            $json['terms_agree']              = $this->termsAgree;
        }
        if (isset($this->termsAgreeIp)) {
            $json['terms_agree_ip']           = $this->termsAgreeIp;
        }
        if (isset($this->recurringC1)) {
            $json['recurring_c1']             = $this->recurringC1;
        }
        if (isset($this->recurringC2)) {
            $json['recurring_c2']             = $this->recurringC2;
        }
        if (isset($this->recurringC3)) {
            $json['recurring_c3']             = $this->recurringC3;
        }
        if (isset($this->sendToProcAsRecur)) {
            $json['send_to_proc_as_recur']    = $this->sendToProcAsRecur;
        }
        if (isset($this->id)) {
            $json['id']                       = $this->id;
        }
        if (isset($this->nextRunDate)) {
            $json['next_run_date']            = $this->nextRunDate;
        }
        if (isset($this->createdTs)) {
            $json['created_ts']               =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->createdTs,
                    'anyOf(anyOf(CreatedTsEnum,CreatedTs1),null)',
                    [
                        '\FortisAPILib\Models\CreatedTsEnum::checkValue CreatedTsEnum'
                    ]
                );
        }
        if (isset($this->modifiedTs)) {
            $json['modified_ts']              =
                ApiHelper::getJsonHelper()->verifyTypes(
                    $this->modifiedTs,
                    'anyOf(anyOf(ModifiedTsEnum,ModifiedTs1),null)',
                    [
                        '\FortisAPILib\Models\ModifiedTsEnum::checkValue ModifiedTsEnum'
                    ]
                );
        }
        if (isset($this->recurringTypeId)) {
            $json['recurring_type_id']        = $this->recurringTypeId;
        }
        if (isset($this->installmentAmountTotal)) {
            $json['installment_amount_total'] = $this->installmentAmountTotal;
        }
        if (isset($this->logEmails)) {
            $json['log_emails']               = $this->logEmails;
        }
        if (isset($this->contact)) {
            $json['contact']                  = $this->contact;
        }
        if (isset($this->accountVault)) {
            $json['account_vault']            = $this->accountVault;
        }
        if (isset($this->createdUser)) {
            $json['created_user']             = $this->createdUser;
        }
        if (isset($this->signature)) {
            $json['signature']                = $this->signature;
        }
        if (isset($this->paymentSchedule)) {
            $json['payment_schedule']         = $this->paymentSchedule;
        }
        if (isset($this->location)) {
            $json['location']                 = $this->location;
        }
        if (isset($this->productTransaction)) {
            $json['product_transaction']      = $this->productTransaction;
        }
        if (isset($this->nextRunDateMin)) {
            $json['next_run_date_min']        = $this->nextRunDateMin;
        }
        if (isset($this->nextRunDateMax)) {
            $json['next_run_date_max']        = $this->nextRunDateMax;
        }
        if (isset($this->tags)) {
            $json['tags']                     = $this->tags;
        }
        if (isset($this->allTags)) {
            $json['all_tags']                 = $this->allTags;
        }
        if (isset($this->changelogs)) {
            $json['changelogs']               = $this->changelogs;
        }
        if (isset($this->forecast)) {
            $json['forecast']                 = $this->forecast;
        }
        if (isset($this->recurringSplits)) {
            $json['recurring_splits']         = $this->recurringSplits;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
