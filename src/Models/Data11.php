<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Data11 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $emailLogId = [];

    /**
     * @var array
     */
    private $smsLogId = [];

    /**
     * @var bool|null
     */
    private $success;

    /**
     * @var bool|null
     */
    private $smsSuccess;

    /**
     * @var array
     */
    private $email = [];

    /**
     * @param string $id
     */
    public function __construct(string $id)
    {
        $this->id = $id;
    }

    /**
     * Returns Id.
     * Quick Invoice ID
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Quick Invoice ID
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Email Log Id.
     * Email Log Id
     */
    public function getEmailLogId(): ?string
    {
        if (count($this->emailLogId) == 0) {
            return null;
        }
        return $this->emailLogId['value'];
    }

    /**
     * Sets Email Log Id.
     * Email Log Id
     *
     * @maps email_log_id
     */
    public function setEmailLogId(?string $emailLogId): void
    {
        $this->emailLogId['value'] = $emailLogId;
    }

    /**
     * Unsets Email Log Id.
     * Email Log Id
     */
    public function unsetEmailLogId(): void
    {
        $this->emailLogId = [];
    }

    /**
     * Returns Sms Log Id.
     * SMS Log Id
     */
    public function getSmsLogId(): ?string
    {
        if (count($this->smsLogId) == 0) {
            return null;
        }
        return $this->smsLogId['value'];
    }

    /**
     * Sets Sms Log Id.
     * SMS Log Id
     *
     * @maps sms_log_id
     */
    public function setSmsLogId(?string $smsLogId): void
    {
        $this->smsLogId['value'] = $smsLogId;
    }

    /**
     * Unsets Sms Log Id.
     * SMS Log Id
     */
    public function unsetSmsLogId(): void
    {
        $this->smsLogId = [];
    }

    /**
     * Returns Success.
     * Success
     */
    public function getSuccess(): ?bool
    {
        return $this->success;
    }

    /**
     * Sets Success.
     * Success
     *
     * @maps success
     */
    public function setSuccess(?bool $success): void
    {
        $this->success = $success;
    }

    /**
     * Returns Sms Success.
     * SMS Success
     */
    public function getSmsSuccess(): ?bool
    {
        return $this->smsSuccess;
    }

    /**
     * Sets Sms Success.
     * SMS Success
     *
     * @maps sms_success
     */
    public function setSmsSuccess(?bool $smsSuccess): void
    {
        $this->smsSuccess = $smsSuccess;
    }

    /**
     * Returns Email.
     * Email
     */
    public function getEmail(): ?string
    {
        if (count($this->email) == 0) {
            return null;
        }
        return $this->email['value'];
    }

    /**
     * Sets Email.
     * Email
     *
     * @maps email
     */
    public function setEmail(?string $email): void
    {
        $this->email['value'] = $email;
    }

    /**
     * Unsets Email.
     * Email
     */
    public function unsetEmail(): void
    {
        $this->email = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']               = $this->id;
        if (!empty($this->emailLogId)) {
            $json['email_log_id'] = $this->emailLogId['value'];
        }
        if (!empty($this->smsLogId)) {
            $json['sms_log_id']   = $this->smsLogId['value'];
        }
        if (isset($this->success)) {
            $json['success']      = $this->success;
        }
        if (isset($this->smsSuccess)) {
            $json['sms_success']  = $this->smsSuccess;
        }
        if (!empty($this->email)) {
            $json['email']        = $this->email['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
