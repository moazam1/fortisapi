<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Data implements \JsonSerializable
{
    /**
     * @var string
     */
    private $code;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $id;

    /**
     * @var int
     */
    private $progress;

    /**
     * @var array
     */
    private $error = [];

    /**
     * @var int
     */
    private $ttl;

    /**
     * @param string $code
     * @param string $type
     * @param string $id
     * @param int $progress
     * @param int $ttl
     */
    public function __construct(string $code, string $type, string $id, int $progress, int $ttl)
    {
        $this->code = $code;
        $this->type = $type;
        $this->id = $id;
        $this->progress = $progress;
        $this->ttl = $ttl;
    }

    /**
     * Returns Code.
     * A [UUID v4](https://datatracker.ietf.org/doc/html/rfc4122) that's unique for the Async Request
     */
    public function getCode(): string
    {
        return $this->code;
    }

    /**
     * Sets Code.
     * A [UUID v4](https://datatracker.ietf.org/doc/html/rfc4122) that's unique for the Async Request
     *
     * @required
     * @maps code
     */
    public function setCode(string $code): void
    {
        $this->code = $code;
    }

    /**
     * Returns Type.
     * The @type from the original request.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * The @type from the original request.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Id.
     * After a sucessfully processing, the system will fill with the final ID for the document
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * After a sucessfully processing, the system will fill with the final ID for the document
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Progress.
     * The current percentage progress
     */
    public function getProgress(): int
    {
        return $this->progress;
    }

    /**
     * Sets Progress.
     * The current percentage progress
     *
     * @required
     * @maps progress
     */
    public function setProgress(int $progress): void
    {
        $this->progress = $progress;
    }

    /**
     * Returns Error.
     * In case of error processing, it will contain the error details
     */
    public function getError(): ?string
    {
        if (count($this->error) == 0) {
            return null;
        }
        return $this->error['value'];
    }

    /**
     * Sets Error.
     * In case of error processing, it will contain the error details
     *
     * @maps error
     */
    public function setError(?string $error): void
    {
        $this->error['value'] = $error;
    }

    /**
     * Unsets Error.
     * In case of error processing, it will contain the error details
     */
    public function unsetError(): void
    {
        $this->error = [];
    }

    /**
     * Returns Ttl.
     * The date (in [Epoch Time](https://en.wikipedia.org/wiki/Unix_time)) this status register is set to
     * expire. Usually 30 days after the request.
     */
    public function getTtl(): int
    {
        return $this->ttl;
    }

    /**
     * Sets Ttl.
     * The date (in [Epoch Time](https://en.wikipedia.org/wiki/Unix_time)) this status register is set to
     * expire. Usually 30 days after the request.
     *
     * @required
     * @maps ttl
     */
    public function setTtl(int $ttl): void
    {
        $this->ttl = $ttl;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['code']      = $this->code;
        $json['type']      = $this->type;
        $json['id']        = $this->id;
        $json['progress']  = $this->progress;
        if (!empty($this->error)) {
            $json['error'] = $this->error['value'];
        }
        $json['ttl']       = $this->ttl;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
