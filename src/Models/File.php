<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class File implements \JsonSerializable
{
    /**
     * @var array
     */
    private $file;

    /**
     * @var string
     */
    private $resourceId;

    /**
     * @var string
     */
    private $resource;

    /**
     * @var array
     */
    private $productFileId = [];

    /**
     * @var array
     */
    private $fileCategoryId = [];

    /**
     * @var array
     */
    private $visibilityGroupId = [];

    /**
     * @var array
     */
    private $fileDescription = [];

    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $fileName = [];

    /**
     * @var array
     */
    private $fileExtension = [];

    /**
     * @var array
     */
    private $fileSizeBytes = [];

    /**
     * @var int
     */
    private $createdTs;

    /**
     * @var int
     */
    private $modifiedTs;

    /**
     * @param array $file
     * @param string $resourceId
     * @param string $resource
     * @param string $id
     * @param int $createdTs
     * @param int $modifiedTs
     */
    public function __construct(
        array $file,
        string $resourceId,
        string $resource,
        string $id,
        int $createdTs,
        int $modifiedTs
    ) {
        $this->file = $file;
        $this->resourceId = $resourceId;
        $this->resource = $resource;
        $this->id = $id;
        $this->createdTs = $createdTs;
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns File.
     * File Object
     */
    public function getFile(): array
    {
        return $this->file;
    }

    /**
     * Sets File.
     * File Object
     *
     * @required
     * @maps file
     */
    public function setFile(array $file): void
    {
        $this->file = $file;
    }

    /**
     * Returns Resource Id.
     * Resource Id
     */
    public function getResourceId(): string
    {
        return $this->resourceId;
    }

    /**
     * Sets Resource Id.
     * Resource Id
     *
     * @required
     * @maps resource_id
     */
    public function setResourceId(string $resourceId): void
    {
        $this->resourceId = $resourceId;
    }

    /**
     * Returns Resource.
     * Resource
     */
    public function getResource(): string
    {
        return $this->resource;
    }

    /**
     * Sets Resource.
     * Resource
     *
     * @required
     * @maps resource
     * @factory \FortisAPILib\Models\Resource2Enum::checkValue
     */
    public function setResource(string $resource): void
    {
        $this->resource = $resource;
    }

    /**
     * Returns Product File Id.
     * Product File Id
     */
    public function getProductFileId(): ?string
    {
        if (count($this->productFileId) == 0) {
            return null;
        }
        return $this->productFileId['value'];
    }

    /**
     * Sets Product File Id.
     * Product File Id
     *
     * @maps product_file_id
     */
    public function setProductFileId(?string $productFileId): void
    {
        $this->productFileId['value'] = $productFileId;
    }

    /**
     * Unsets Product File Id.
     * Product File Id
     */
    public function unsetProductFileId(): void
    {
        $this->productFileId = [];
    }

    /**
     * Returns File Category Id.
     * File Category Id
     */
    public function getFileCategoryId(): ?string
    {
        if (count($this->fileCategoryId) == 0) {
            return null;
        }
        return $this->fileCategoryId['value'];
    }

    /**
     * Sets File Category Id.
     * File Category Id
     *
     * @maps file_category_id
     */
    public function setFileCategoryId(?string $fileCategoryId): void
    {
        $this->fileCategoryId['value'] = $fileCategoryId;
    }

    /**
     * Unsets File Category Id.
     * File Category Id
     */
    public function unsetFileCategoryId(): void
    {
        $this->fileCategoryId = [];
    }

    /**
     * Returns Visibility Group Id.
     * Visibility Group Id
     */
    public function getVisibilityGroupId(): ?string
    {
        if (count($this->visibilityGroupId) == 0) {
            return null;
        }
        return $this->visibilityGroupId['value'];
    }

    /**
     * Sets Visibility Group Id.
     * Visibility Group Id
     *
     * @maps visibility_group_id
     */
    public function setVisibilityGroupId(?string $visibilityGroupId): void
    {
        $this->visibilityGroupId['value'] = $visibilityGroupId;
    }

    /**
     * Unsets Visibility Group Id.
     * Visibility Group Id
     */
    public function unsetVisibilityGroupId(): void
    {
        $this->visibilityGroupId = [];
    }

    /**
     * Returns File Description.
     * File Description
     */
    public function getFileDescription(): ?string
    {
        if (count($this->fileDescription) == 0) {
            return null;
        }
        return $this->fileDescription['value'];
    }

    /**
     * Sets File Description.
     * File Description
     *
     * @maps file_description
     */
    public function setFileDescription(?string $fileDescription): void
    {
        $this->fileDescription['value'] = $fileDescription;
    }

    /**
     * Unsets File Description.
     * File Description
     */
    public function unsetFileDescription(): void
    {
        $this->fileDescription = [];
    }

    /**
     * Returns Id.
     * Resource
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Resource
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns File Name.
     * File Name
     */
    public function getFileName(): ?string
    {
        if (count($this->fileName) == 0) {
            return null;
        }
        return $this->fileName['value'];
    }

    /**
     * Sets File Name.
     * File Name
     *
     * @maps file_name
     */
    public function setFileName(?string $fileName): void
    {
        $this->fileName['value'] = $fileName;
    }

    /**
     * Unsets File Name.
     * File Name
     */
    public function unsetFileName(): void
    {
        $this->fileName = [];
    }

    /**
     * Returns File Extension.
     * File Extension
     */
    public function getFileExtension(): ?string
    {
        if (count($this->fileExtension) == 0) {
            return null;
        }
        return $this->fileExtension['value'];
    }

    /**
     * Sets File Extension.
     * File Extension
     *
     * @maps file_extension
     */
    public function setFileExtension(?string $fileExtension): void
    {
        $this->fileExtension['value'] = $fileExtension;
    }

    /**
     * Unsets File Extension.
     * File Extension
     */
    public function unsetFileExtension(): void
    {
        $this->fileExtension = [];
    }

    /**
     * Returns File Size Bytes.
     * File Size Bytes
     */
    public function getFileSizeBytes(): ?int
    {
        if (count($this->fileSizeBytes) == 0) {
            return null;
        }
        return $this->fileSizeBytes['value'];
    }

    /**
     * Sets File Size Bytes.
     * File Size Bytes
     *
     * @maps file_size_bytes
     */
    public function setFileSizeBytes(?int $fileSizeBytes): void
    {
        $this->fileSizeBytes['value'] = $fileSizeBytes;
    }

    /**
     * Unsets File Size Bytes.
     * File Size Bytes
     */
    public function unsetFileSizeBytes(): void
    {
        $this->fileSizeBytes = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @required
     * @maps created_ts
     */
    public function setCreatedTs(int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @required
     * @maps modified_ts
     */
    public function setModifiedTs(int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['file']                    = $this->file;
        $json['resource_id']             = $this->resourceId;
        $json['resource']                = Resource2Enum::checkValue($this->resource);
        if (!empty($this->productFileId)) {
            $json['product_file_id']     = $this->productFileId['value'];
        }
        if (!empty($this->fileCategoryId)) {
            $json['file_category_id']    = $this->fileCategoryId['value'];
        }
        if (!empty($this->visibilityGroupId)) {
            $json['visibility_group_id'] = $this->visibilityGroupId['value'];
        }
        if (!empty($this->fileDescription)) {
            $json['file_description']    = $this->fileDescription['value'];
        }
        $json['id']                      = $this->id;
        if (!empty($this->fileName)) {
            $json['file_name']           = $this->fileName['value'];
        }
        if (!empty($this->fileExtension)) {
            $json['file_extension']      = $this->fileExtension['value'];
        }
        if (!empty($this->fileSizeBytes)) {
            $json['file_size_bytes']     = $this->fileSizeBytes['value'];
        }
        $json['created_ts']              = $this->createdTs;
        $json['modified_ts']             = $this->modifiedTs;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
