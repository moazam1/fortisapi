<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Data19 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $issuerBankName;

    /**
     * @var string
     */
    private $countryCode;

    /**
     * @var string
     */
    private $detailCardProduct;

    /**
     * @var string
     */
    private $detailCardIndicator;

    /**
     * @var string
     */
    private $fsaIndicator;

    /**
     * @var string
     */
    private $prepaidIndicator;

    /**
     * @var string
     */
    private $productId;

    /**
     * @var string
     */
    private $regulatorIndicator;

    /**
     * @var array
     */
    private $visaProductSubType = [];

    /**
     * @var array
     */
    private $visaLargeTicketIndicator = [];

    /**
     * @var string
     */
    private $accountFundSource;

    /**
     * @var array
     */
    private $cardClass = [];

    /**
     * @var array
     */
    private $tokenInd = [];

    /**
     * @var array
     */
    private $issuingNetwork = [];

    /**
     * @param string $issuerBankName
     * @param string $countryCode
     * @param string $detailCardProduct
     * @param string $detailCardIndicator
     * @param string $fsaIndicator
     * @param string $prepaidIndicator
     * @param string $productId
     * @param string $regulatorIndicator
     * @param string $accountFundSource
     */
    public function __construct(
        string $issuerBankName,
        string $countryCode,
        string $detailCardProduct,
        string $detailCardIndicator,
        string $fsaIndicator,
        string $prepaidIndicator,
        string $productId,
        string $regulatorIndicator,
        string $accountFundSource
    ) {
        $this->issuerBankName = $issuerBankName;
        $this->countryCode = $countryCode;
        $this->detailCardProduct = $detailCardProduct;
        $this->detailCardIndicator = $detailCardIndicator;
        $this->fsaIndicator = $fsaIndicator;
        $this->prepaidIndicator = $prepaidIndicator;
        $this->productId = $productId;
        $this->regulatorIndicator = $regulatorIndicator;
        $this->accountFundSource = $accountFundSource;
    }

    /**
     * Returns Issuer Bank Name.
     * The Issuer Bank name for the BIN
     */
    public function getIssuerBankName(): string
    {
        return $this->issuerBankName;
    }

    /**
     * Sets Issuer Bank Name.
     * The Issuer Bank name for the BIN
     *
     * @required
     * @maps issuer_bank_name
     */
    public function setIssuerBankName(string $issuerBankName): void
    {
        $this->issuerBankName = $issuerBankName;
    }

    /**
     * Returns Country Code.
     * VISA - Three character alpha country code
     * MC - Three character alpha country code
     * Maestro - Three character alpha country code
     * Amex - Space Filled
     * Discover - Three character alpha country code or spaces when Discover doesn't share issuer country.
     */
    public function getCountryCode(): string
    {
        return $this->countryCode;
    }

    /**
     * Sets Country Code.
     * VISA - Three character alpha country code
     * MC - Three character alpha country code
     * Maestro - Three character alpha country code
     * Amex - Space Filled
     * Discover - Three character alpha country code or spaces when Discover doesn't share issuer country.
     *
     * @required
     * @maps country_code
     */
    public function setCountryCode(string $countryCode): void
    {
        $this->countryCode = $countryCode;
    }

    /**
     * Returns Detail Card Product.
     * V - Visa
     * M - MasterCard
     * A - American Express
     * D - Discover
     * N - PIN Only (Non-Visa/MasterCard/AMEX/Discover
     */
    public function getDetailCardProduct(): string
    {
        return $this->detailCardProduct;
    }

    /**
     * Sets Detail Card Product.
     * V - Visa
     * M - MasterCard
     * A - American Express
     * D - Discover
     * N - PIN Only (Non-Visa/MasterCard/AMEX/Discover
     *
     * @required
     * @maps detail_card_product
     */
    public function setDetailCardProduct(string $detailCardProduct): void
    {
        $this->detailCardProduct = $detailCardProduct;
    }

    /**
     * Returns Detail Card Indicator.
     * Left justified, Space filled
     */
    public function getDetailCardIndicator(): string
    {
        return $this->detailCardIndicator;
    }

    /**
     * Sets Detail Card Indicator.
     * Left justified, Space filled
     *
     * @required
     * @maps detail_card_indicator
     */
    public function setDetailCardIndicator(string $detailCardIndicator): void
    {
        $this->detailCardIndicator = $detailCardIndicator;
    }

    /**
     * Returns Fsa Indicator.
     * Left justified, Space filled
     */
    public function getFsaIndicator(): string
    {
        return $this->fsaIndicator;
    }

    /**
     * Sets Fsa Indicator.
     * Left justified, Space filled
     *
     * @required
     * @maps fsa_indicator
     */
    public function setFsaIndicator(string $fsaIndicator): void
    {
        $this->fsaIndicator = $fsaIndicator;
    }

    /**
     * Returns Prepaid Indicator.
     * P = Prepaid Card
     * Default: Space filled
     */
    public function getPrepaidIndicator(): string
    {
        return $this->prepaidIndicator;
    }

    /**
     * Sets Prepaid Indicator.
     * P = Prepaid Card
     * Default: Space filled
     *
     * @required
     * @maps prepaid_indicator
     */
    public function setPrepaidIndicator(string $prepaidIndicator): void
    {
        $this->prepaidIndicator = $prepaidIndicator;
    }

    /**
     * Returns Product Id.
     * P = Prepaid Card
     * Default: Space filled
     */
    public function getProductId(): string
    {
        return $this->productId;
    }

    /**
     * Sets Product Id.
     * P = Prepaid Card
     * Default: Space filled
     *
     * @required
     * @maps product_id
     */
    public function setProductId(string $productId): void
    {
        $this->productId = $productId;
    }

    /**
     * Returns Regulator Indicator.
     * P = Prepaid Card
     * Default: Space filled
     */
    public function getRegulatorIndicator(): string
    {
        return $this->regulatorIndicator;
    }

    /**
     * Sets Regulator Indicator.
     * P = Prepaid Card
     * Default: Space filled
     *
     * @required
     * @maps regulator_indicator
     */
    public function setRegulatorIndicator(string $regulatorIndicator): void
    {
        $this->regulatorIndicator = $regulatorIndicator;
    }

    /**
     * Returns Visa Product Sub Type.
     * This is used to identify product sub-types, i.e. further classification of product.
     */
    public function getVisaProductSubType(): ?string
    {
        if (count($this->visaProductSubType) == 0) {
            return null;
        }
        return $this->visaProductSubType['value'];
    }

    /**
     * Sets Visa Product Sub Type.
     * This is used to identify product sub-types, i.e. further classification of product.
     *
     * @maps visa_product_sub_type
     */
    public function setVisaProductSubType(?string $visaProductSubType): void
    {
        $this->visaProductSubType['value'] = $visaProductSubType;
    }

    /**
     * Unsets Visa Product Sub Type.
     * This is used to identify product sub-types, i.e. further classification of product.
     */
    public function unsetVisaProductSubType(): void
    {
        $this->visaProductSubType = [];
    }

    /**
     * Returns Visa Large Ticket Indicator.
     * L = Visa Large Ticket.
     * Default: Space filled
     */
    public function getVisaLargeTicketIndicator(): ?string
    {
        if (count($this->visaLargeTicketIndicator) == 0) {
            return null;
        }
        return $this->visaLargeTicketIndicator['value'];
    }

    /**
     * Sets Visa Large Ticket Indicator.
     * L = Visa Large Ticket.
     * Default: Space filled
     *
     * @maps visa_large_ticket_indicator
     */
    public function setVisaLargeTicketIndicator(?string $visaLargeTicketIndicator): void
    {
        $this->visaLargeTicketIndicator['value'] = $visaLargeTicketIndicator;
    }

    /**
     * Unsets Visa Large Ticket Indicator.
     * L = Visa Large Ticket.
     * Default: Space filled
     */
    public function unsetVisaLargeTicketIndicator(): void
    {
        $this->visaLargeTicketIndicator = [];
    }

    /**
     * Returns Account Fund Source.
     * For Visa, MasterCard, and Discover.  Identifies the source of the funds associated with the primary
     * account for the card.
     */
    public function getAccountFundSource(): string
    {
        return $this->accountFundSource;
    }

    /**
     * Sets Account Fund Source.
     * For Visa, MasterCard, and Discover.  Identifies the source of the funds associated with the primary
     * account for the card.
     *
     * @required
     * @maps account_fund_source
     */
    public function setAccountFundSource(string $accountFundSource): void
    {
        $this->accountFundSource = $accountFundSource;
    }

    /**
     * Returns Card Class.
     * Categorizes the BIN as a Business card, Corporate T&E card, Purchase card or Consumer card. Assists
     * the POS device with prompting decisions – to collect addenda or not.  Visa, MasterCard and Discover
     * only.
     */
    public function getCardClass(): ?string
    {
        if (count($this->cardClass) == 0) {
            return null;
        }
        return $this->cardClass['value'];
    }

    /**
     * Sets Card Class.
     * Categorizes the BIN as a Business card, Corporate T&E card, Purchase card or Consumer card. Assists
     * the POS device with prompting decisions – to collect addenda or not.  Visa, MasterCard and Discover
     * only.
     *
     * @maps card_class
     */
    public function setCardClass(?string $cardClass): void
    {
        $this->cardClass['value'] = $cardClass;
    }

    /**
     * Unsets Card Class.
     * Categorizes the BIN as a Business card, Corporate T&E card, Purchase card or Consumer card. Assists
     * the POS device with prompting decisions – to collect addenda or not.  Visa, MasterCard and Discover
     * only.
     */
    public function unsetCardClass(): void
    {
        $this->cardClass = [];
    }

    /**
     * Returns Token Ind.
     * Token Indicator values:
     * Y = Token BIN
     * Default: Space filled
     * VISA, MC, and Discover Only
     */
    public function getTokenInd(): ?string
    {
        if (count($this->tokenInd) == 0) {
            return null;
        }
        return $this->tokenInd['value'];
    }

    /**
     * Sets Token Ind.
     * Token Indicator values:
     * Y = Token BIN
     * Default: Space filled
     * VISA, MC, and Discover Only
     *
     * @maps token_ind
     */
    public function setTokenInd(?string $tokenInd): void
    {
        $this->tokenInd['value'] = $tokenInd;
    }

    /**
     * Unsets Token Ind.
     * Token Indicator values:
     * Y = Token BIN
     * Default: Space filled
     * VISA, MC, and Discover Only
     */
    public function unsetTokenInd(): void
    {
        $this->tokenInd = [];
    }

    /**
     * Returns Issuing Network.
     * For Discover card types
     * 00 - Discover
     * 01 - Diners
     * 02 - JCB (Japanese Credit Bank)
     * 03 - CUP (China Union Pay)
     * 04 PayPal
     */
    public function getIssuingNetwork(): ?string
    {
        if (count($this->issuingNetwork) == 0) {
            return null;
        }
        return $this->issuingNetwork['value'];
    }

    /**
     * Sets Issuing Network.
     * For Discover card types
     * 00 - Discover
     * 01 - Diners
     * 02 - JCB (Japanese Credit Bank)
     * 03 - CUP (China Union Pay)
     * 04 PayPal
     *
     * @maps issuing_network
     */
    public function setIssuingNetwork(?string $issuingNetwork): void
    {
        $this->issuingNetwork['value'] = $issuingNetwork;
    }

    /**
     * Unsets Issuing Network.
     * For Discover card types
     * 00 - Discover
     * 01 - Diners
     * 02 - JCB (Japanese Credit Bank)
     * 03 - CUP (China Union Pay)
     * 04 PayPal
     */
    public function unsetIssuingNetwork(): void
    {
        $this->issuingNetwork = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['issuer_bank_name']                = $this->issuerBankName;
        $json['country_code']                    = $this->countryCode;
        $json['detail_card_product']             = $this->detailCardProduct;
        $json['detail_card_indicator']           = $this->detailCardIndicator;
        $json['fsa_indicator']                   = $this->fsaIndicator;
        $json['prepaid_indicator']               = $this->prepaidIndicator;
        $json['product_id']                      = $this->productId;
        $json['regulator_indicator']             = $this->regulatorIndicator;
        if (!empty($this->visaProductSubType)) {
            $json['visa_product_sub_type']       = $this->visaProductSubType['value'];
        }
        if (!empty($this->visaLargeTicketIndicator)) {
            $json['visa_large_ticket_indicator'] = $this->visaLargeTicketIndicator['value'];
        }
        $json['account_fund_source']             = $this->accountFundSource;
        if (!empty($this->cardClass)) {
            $json['card_class']                  = $this->cardClass['value'];
        }
        if (!empty($this->tokenInd)) {
            $json['token_ind']                   = $this->tokenInd['value'];
        }
        if (!empty($this->issuingNetwork)) {
            $json['issuing_network']             = $this->issuingNetwork['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
