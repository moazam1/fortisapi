<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class TransactionHistory implements \JsonSerializable
{
    /**
     * @var string
     */
    private $transactionId;

    /**
     * @var string
     */
    private $id;

    /**
     * @var array
     */
    private $statusId = [];

    /**
     * @var array
     */
    private $eventDateTs = [];

    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var int
     */
    private $createdTs;

    /**
     * @var int
     */
    private $modifiedTs;

    /**
     * @param string $transactionId
     * @param string $id
     * @param int $createdTs
     * @param int $modifiedTs
     */
    public function __construct(string $transactionId, string $id, int $createdTs, int $modifiedTs)
    {
        $this->transactionId = $transactionId;
        $this->id = $id;
        $this->createdTs = $createdTs;
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Transaction Id.
     * Transaction ID
     */
    public function getTransactionId(): string
    {
        return $this->transactionId;
    }

    /**
     * Sets Transaction Id.
     * Transaction ID
     *
     * @required
     * @maps transaction_id
     */
    public function setTransactionId(string $transactionId): void
    {
        $this->transactionId = $transactionId;
    }

    /**
     * Returns Id.
     * Transaction Histories ID
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Transaction Histories ID
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Status Id.
     * Status ID
     */
    public function getStatusId(): ?int
    {
        if (count($this->statusId) == 0) {
            return null;
        }
        return $this->statusId['value'];
    }

    /**
     * Sets Status Id.
     * Status ID
     *
     * @maps status_id
     */
    public function setStatusId(?int $statusId): void
    {
        $this->statusId['value'] = $statusId;
    }

    /**
     * Unsets Status Id.
     * Status ID
     */
    public function unsetStatusId(): void
    {
        $this->statusId = [];
    }

    /**
     * Returns Event Date Ts.
     * Event Date TS
     */
    public function getEventDateTs(): ?int
    {
        if (count($this->eventDateTs) == 0) {
            return null;
        }
        return $this->eventDateTs['value'];
    }

    /**
     * Sets Event Date Ts.
     * Event Date TS
     *
     * @maps event_date_ts
     */
    public function setEventDateTs(?int $eventDateTs): void
    {
        $this->eventDateTs['value'] = $eventDateTs;
    }

    /**
     * Unsets Event Date Ts.
     * Event Date TS
     */
    public function unsetEventDateTs(): void
    {
        $this->eventDateTs = [];
    }

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * Location ID
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @required
     * @maps created_ts
     */
    public function setCreatedTs(int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @required
     * @maps modified_ts
     */
    public function setModifiedTs(int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['transaction_id']    = $this->transactionId;
        $json['id']                = $this->id;
        if (!empty($this->statusId)) {
            $json['status_id']     = $this->statusId['value'];
        }
        if (!empty($this->eventDateTs)) {
            $json['event_date_ts'] = $this->eventDateTs['value'];
        }
        if (!empty($this->locationId)) {
            $json['location_id']   = $this->locationId['value'];
        }
        $json['created_ts']        = $this->createdTs;
        $json['modified_ts']       = $this->modifiedTs;
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
