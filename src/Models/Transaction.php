<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class Transaction implements \JsonSerializable
{
    /**
     * @var AdditionalAmount[]|null
     */
    private $additionalAmounts;

    /**
     * @var BillingAddress|null
     */
    private $billingAddress;

    /**
     * @var array
     */
    private $checkinDate = [];

    /**
     * @var array
     */
    private $checkoutDate = [];

    /**
     * @var array
     */
    private $clerkNumber = [];

    /**
     * @var array
     */
    private $contactApiId = [];

    /**
     * @var array
     */
    private $contactId = [];

    /**
     * @var array|null
     */
    private $customData;

    /**
     * @var array
     */
    private $customerId = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var IdentityVerification|null
     */
    private $identityVerification;

    /**
     * @var array
     */
    private $iiasInd = [];

    /**
     * @var array
     */
    private $imageFront = [];

    /**
     * @var array
     */
    private $imageBack = [];

    /**
     * @var bool|null
     */
    private $installment;

    /**
     * @var array
     */
    private $installmentNumber = [];

    /**
     * @var array
     */
    private $installmentCount = [];

    /**
     * @var array
     */
    private $locationApiId = [];

    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var array
     */
    private $productTransactionId = [];

    /**
     * @var bool|null
     */
    private $advanceDeposit;

    /**
     * @var bool|null
     */
    private $noShow;

    /**
     * @var array
     */
    private $notificationEmailAddress = [];

    /**
     * @var array
     */
    private $orderNumber = [];

    /**
     * @var array
     */
    private $poNumber = [];

    /**
     * @var array
     */
    private $quickInvoiceId = [];

    /**
     * @var bool|null
     */
    private $recurring;

    /**
     * @var array
     */
    private $recurringNumber = [];

    /**
     * @var array
     */
    private $roomNum = [];

    /**
     * @var array
     */
    private $roomRate = [];

    /**
     * @var bool|null
     */
    private $saveAccount;

    /**
     * @var array
     */
    private $saveAccountTitle = [];

    /**
     * @var array
     */
    private $subtotalAmount = [];

    /**
     * @var array
     */
    private $surchargeAmount = [];

    /**
     * @var string[]|null
     */
    private $tags;

    /**
     * @var array
     */
    private $tax = [];

    /**
     * @var array
     */
    private $tipAmount = [];

    /**
     * @var array
     */
    private $transactionAmount = [];

    /**
     * @var array
     */
    private $secondaryAmount = [];

    /**
     * @var array
     */
    private $transactionApiId = [];

    /**
     * @var array
     */
    private $transactionC1 = [];

    /**
     * @var array
     */
    private $transactionC2 = [];

    /**
     * @var array
     */
    private $transactionC3 = [];

    /**
     * @var bool|null
     */
    private $bankFundedOnlyOverride;

    /**
     * @var bool|null
     */
    private $allowPartialAuthorizationOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineCvvOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineStreetOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineZipOverride;

    /**
     * @var string
     */
    private $id;

    /**
     * @var int
     */
    private $createdTs;

    /**
     * @var int
     */
    private $modifiedTs;

    /**
     * @var array
     */
    private $terminalId = [];

    /**
     * @var array
     */
    private $accountHolderName = [];

    /**
     * @var array
     */
    private $accountType = [];

    /**
     * @var array
     */
    private $tokenApiId = [];

    /**
     * @var array
     */
    private $tokenId = [];

    /**
     * @var array
     */
    private $achIdentifier = [];

    /**
     * @var array
     */
    private $achSecCode = [];

    /**
     * @var array
     */
    private $authAmount = [];

    /**
     * @var array
     */
    private $authCode = [];

    /**
     * @var array
     */
    private $avs = [];

    /**
     * @var array
     */
    private $avsEnhanced = [];

    /**
     * @var bool|null
     */
    private $cardholderPresent;

    /**
     * @var bool|null
     */
    private $cardPresent;

    /**
     * @var array
     */
    private $checkNumber = [];

    /**
     * @var array
     */
    private $customerIp = [];

    /**
     * @var array
     */
    private $cvvResponse = [];

    /**
     * @var array
     */
    private $entryModeId = [];

    /**
     * @var EmvReceiptData|null
     */
    private $emvReceiptData;

    /**
     * @var array
     */
    private $firstSix = [];

    /**
     * @var array
     */
    private $lastFour = [];

    /**
     * @var string
     */
    private $paymentMethod;

    /**
     * @var array
     */
    private $terminalSerialNumber = [];

    /**
     * @var array
     */
    private $transactionSettlementStatus = [];

    /**
     * @var array
     */
    private $chargeBackDate = [];

    /**
     * @var bool|null
     */
    private $isRecurring;

    /**
     * @var array
     */
    private $notificationEmailSent = [];

    /**
     * @var array
     */
    private $par = [];

    /**
     * @var array
     */
    private $reasonCodeId = [];

    /**
     * @var array
     */
    private $recurringId = [];

    /**
     * @var array
     */
    private $settleDate = [];

    /**
     * @var array
     */
    private $statusCode = [];

    /**
     * @var array
     */
    private $transactionBatchId = [];

    /**
     * @var array
     */
    private $typeId = [];

    /**
     * @var array
     */
    private $verbiage = [];

    /**
     * @var array
     */
    private $voidDate = [];

    /**
     * @var array
     */
    private $batch = [];

    /**
     * @var bool|null
     */
    private $termsAgree;

    /**
     * @var array
     */
    private $responseMessage = [];

    /**
     * @var array
     */
    private $returnDate = [];

    /**
     * @var array
     */
    private $trxSourceId = [];

    /**
     * @var array
     */
    private $routingNumber = [];

    /**
     * @var array
     */
    private $trxSourceCode = [];

    /**
     * @var array
     */
    private $paylinkId = [];

    /**
     * @var array
     */
    private $currencyCode = ['value' => 840];

    /**
     * @param string $id
     * @param int $createdTs
     * @param int $modifiedTs
     * @param string $paymentMethod
     */
    public function __construct(string $id, int $createdTs, int $modifiedTs, string $paymentMethod)
    {
        $this->id = $id;
        $this->createdTs = $createdTs;
        $this->modifiedTs = $modifiedTs;
        $this->paymentMethod = $paymentMethod;
    }

    /**
     * Returns Additional Amounts.
     * Additional amounts
     *
     * @return AdditionalAmount[]|null
     */
    public function getAdditionalAmounts(): ?array
    {
        return $this->additionalAmounts;
    }

    /**
     * Sets Additional Amounts.
     * Additional amounts
     *
     * @maps additional_amounts
     *
     * @param AdditionalAmount[]|null $additionalAmounts
     */
    public function setAdditionalAmounts(?array $additionalAmounts): void
    {
        $this->additionalAmounts = $additionalAmounts;
    }

    /**
     * Returns Billing Address.
     * Billing Address Object
     */
    public function getBillingAddress(): ?BillingAddress
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     * Billing Address Object
     *
     * @maps billing_address
     */
    public function setBillingAddress(?BillingAddress $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     */
    public function getCheckinDate(): ?string
    {
        if (count($this->checkinDate) == 0) {
            return null;
        }
        return $this->checkinDate['value'];
    }

    /**
     * Sets Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     *
     * @maps checkin_date
     */
    public function setCheckinDate(?string $checkinDate): void
    {
        $this->checkinDate['value'] = $checkinDate;
    }

    /**
     * Unsets Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     */
    public function unsetCheckinDate(): void
    {
        $this->checkinDate = [];
    }

    /**
     * Returns Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     */
    public function getCheckoutDate(): ?string
    {
        if (count($this->checkoutDate) == 0) {
            return null;
        }
        return $this->checkoutDate['value'];
    }

    /**
     * Sets Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     *
     * @maps checkout_date
     */
    public function setCheckoutDate(?string $checkoutDate): void
    {
        $this->checkoutDate['value'] = $checkoutDate;
    }

    /**
     * Unsets Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     */
    public function unsetCheckoutDate(): void
    {
        $this->checkoutDate = [];
    }

    /**
     * Returns Clerk Number.
     * Clerk or Employee Identifier
     */
    public function getClerkNumber(): ?string
    {
        if (count($this->clerkNumber) == 0) {
            return null;
        }
        return $this->clerkNumber['value'];
    }

    /**
     * Sets Clerk Number.
     * Clerk or Employee Identifier
     *
     * @maps clerk_number
     */
    public function setClerkNumber(?string $clerkNumber): void
    {
        $this->clerkNumber['value'] = $clerkNumber;
    }

    /**
     * Unsets Clerk Number.
     * Clerk or Employee Identifier
     */
    public function unsetClerkNumber(): void
    {
        $this->clerkNumber = [];
    }

    /**
     * Returns Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     */
    public function getContactApiId(): ?string
    {
        if (count($this->contactApiId) == 0) {
            return null;
        }
        return $this->contactApiId['value'];
    }

    /**
     * Sets Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     *
     * @maps contact_api_id
     */
    public function setContactApiId(?string $contactApiId): void
    {
        $this->contactApiId['value'] = $contactApiId;
    }

    /**
     * Unsets Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     */
    public function unsetContactApiId(): void
    {
        $this->contactApiId = [];
    }

    /**
     * Returns Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     */
    public function getContactId(): ?string
    {
        if (count($this->contactId) == 0) {
            return null;
        }
        return $this->contactId['value'];
    }

    /**
     * Sets Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     *
     * @maps contact_id
     */
    public function setContactId(?string $contactId): void
    {
        $this->contactId['value'] = $contactId;
    }

    /**
     * Unsets Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     */
    public function unsetContactId(): void
    {
        $this->contactId = [];
    }

    /**
     * Returns Custom Data.
     * A field that allows custom JSON to be entered to store extra data.
     */
    public function getCustomData(): ?array
    {
        return $this->customData;
    }

    /**
     * Sets Custom Data.
     * A field that allows custom JSON to be entered to store extra data.
     *
     * @maps custom_data
     */
    public function setCustomData(?array $customData): void
    {
        $this->customData = $customData;
    }

    /**
     * Returns Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     */
    public function getCustomerId(): ?string
    {
        if (count($this->customerId) == 0) {
            return null;
        }
        return $this->customerId['value'];
    }

    /**
     * Sets Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     *
     * @maps customer_id
     */
    public function setCustomerId(?string $customerId): void
    {
        $this->customerId['value'] = $customerId;
    }

    /**
     * Unsets Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     */
    public function unsetCustomerId(): void
    {
        $this->customerId = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Identity Verification.
     * Identity Verification
     */
    public function getIdentityVerification(): ?IdentityVerification
    {
        return $this->identityVerification;
    }

    /**
     * Sets Identity Verification.
     * Identity Verification
     *
     * @maps identity_verification
     */
    public function setIdentityVerification(?IdentityVerification $identityVerification): void
    {
        $this->identityVerification = $identityVerification;
    }

    /**
     * Returns Iias Ind.
     * Possible values are '0', '1','2'
     */
    public function getIiasInd(): ?int
    {
        if (count($this->iiasInd) == 0) {
            return null;
        }
        return $this->iiasInd['value'];
    }

    /**
     * Sets Iias Ind.
     * Possible values are '0', '1','2'
     *
     * @maps iias_ind
     * @factory \FortisAPILib\Models\IiasIndEnum::checkValue
     */
    public function setIiasInd(?int $iiasInd): void
    {
        $this->iiasInd['value'] = $iiasInd;
    }

    /**
     * Unsets Iias Ind.
     * Possible values are '0', '1','2'
     */
    public function unsetIiasInd(): void
    {
        $this->iiasInd = [];
    }

    /**
     * Returns Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function getImageFront(): ?string
    {
        if (count($this->imageFront) == 0) {
            return null;
        }
        return $this->imageFront['value'];
    }

    /**
     * Sets Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     *
     * @maps image_front
     */
    public function setImageFront(?string $imageFront): void
    {
        $this->imageFront['value'] = $imageFront;
    }

    /**
     * Unsets Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function unsetImageFront(): void
    {
        $this->imageFront = [];
    }

    /**
     * Returns Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function getImageBack(): ?string
    {
        if (count($this->imageBack) == 0) {
            return null;
        }
        return $this->imageBack['value'];
    }

    /**
     * Sets Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     *
     * @maps image_back
     */
    public function setImageBack(?string $imageBack): void
    {
        $this->imageBack['value'] = $imageBack;
    }

    /**
     * Unsets Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function unsetImageBack(): void
    {
        $this->imageBack = [];
    }

    /**
     * Returns Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     */
    public function getInstallment(): ?bool
    {
        return $this->installment;
    }

    /**
     * Sets Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     *
     * @maps installment
     */
    public function setInstallment(?bool $installment): void
    {
        $this->installment = $installment;
    }

    /**
     * Returns Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     */
    public function getInstallmentNumber(): ?int
    {
        if (count($this->installmentNumber) == 0) {
            return null;
        }
        return $this->installmentNumber['value'];
    }

    /**
     * Sets Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     *
     * @maps installment_number
     */
    public function setInstallmentNumber(?int $installmentNumber): void
    {
        $this->installmentNumber['value'] = $installmentNumber;
    }

    /**
     * Unsets Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     */
    public function unsetInstallmentNumber(): void
    {
        $this->installmentNumber = [];
    }

    /**
     * Returns Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     */
    public function getInstallmentCount(): ?int
    {
        if (count($this->installmentCount) == 0) {
            return null;
        }
        return $this->installmentCount['value'];
    }

    /**
     * Sets Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     *
     * @maps installment_count
     */
    public function setInstallmentCount(?int $installmentCount): void
    {
        $this->installmentCount['value'] = $installmentCount;
    }

    /**
     * Unsets Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     */
    public function unsetInstallmentCount(): void
    {
        $this->installmentCount = [];
    }

    /**
     * Returns Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     */
    public function getLocationApiId(): ?string
    {
        if (count($this->locationApiId) == 0) {
            return null;
        }
        return $this->locationApiId['value'];
    }

    /**
     * Sets Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     *
     * @maps location_api_id
     */
    public function setLocationApiId(?string $locationApiId): void
    {
        $this->locationApiId['value'] = $locationApiId;
    }

    /**
     * Unsets Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     */
    public function unsetLocationApiId(): void
    {
        $this->locationApiId = [];
    }

    /**
     * Returns Location Id.
     * A valid Location Id to associate the transaction with.
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * A valid Location Id to associate the transaction with.
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * A valid Location Id to associate the transaction with.
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     */
    public function getProductTransactionId(): ?string
    {
        if (count($this->productTransactionId) == 0) {
            return null;
        }
        return $this->productTransactionId['value'];
    }

    /**
     * Sets Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     *
     * @maps product_transaction_id
     */
    public function setProductTransactionId(?string $productTransactionId): void
    {
        $this->productTransactionId['value'] = $productTransactionId;
    }

    /**
     * Unsets Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     */
    public function unsetProductTransactionId(): void
    {
        $this->productTransactionId = [];
    }

    /**
     * Returns Advance Deposit.
     * Advance Deposit
     */
    public function getAdvanceDeposit(): ?bool
    {
        return $this->advanceDeposit;
    }

    /**
     * Sets Advance Deposit.
     * Advance Deposit
     *
     * @maps advance_deposit
     */
    public function setAdvanceDeposit(?bool $advanceDeposit): void
    {
        $this->advanceDeposit = $advanceDeposit;
    }

    /**
     * Returns No Show.
     * Used in Lodging
     */
    public function getNoShow(): ?bool
    {
        return $this->noShow;
    }

    /**
     * Sets No Show.
     * Used in Lodging
     *
     * @maps no_show
     */
    public function setNoShow(?bool $noShow): void
    {
        $this->noShow = $noShow;
    }

    /**
     * Returns Notification Email Address.
     * If email is supplied then receipt will be emailed
     */
    public function getNotificationEmailAddress(): ?string
    {
        if (count($this->notificationEmailAddress) == 0) {
            return null;
        }
        return $this->notificationEmailAddress['value'];
    }

    /**
     * Sets Notification Email Address.
     * If email is supplied then receipt will be emailed
     *
     * @maps notification_email_address
     */
    public function setNotificationEmailAddress(?string $notificationEmailAddress): void
    {
        $this->notificationEmailAddress['value'] = $notificationEmailAddress;
    }

    /**
     * Unsets Notification Email Address.
     * If email is supplied then receipt will be emailed
     */
    public function unsetNotificationEmailAddress(): void
    {
        $this->notificationEmailAddress = [];
    }

    /**
     * Returns Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     */
    public function getOrderNumber(): ?string
    {
        if (count($this->orderNumber) == 0) {
            return null;
        }
        return $this->orderNumber['value'];
    }

    /**
     * Sets Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     *
     * @maps order_number
     */
    public function setOrderNumber(?string $orderNumber): void
    {
        $this->orderNumber['value'] = $orderNumber;
    }

    /**
     * Unsets Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     */
    public function unsetOrderNumber(): void
    {
        $this->orderNumber = [];
    }

    /**
     * Returns Po Number.
     * Purchase Order number
     */
    public function getPoNumber(): ?string
    {
        if (count($this->poNumber) == 0) {
            return null;
        }
        return $this->poNumber['value'];
    }

    /**
     * Sets Po Number.
     * Purchase Order number
     *
     * @maps po_number
     */
    public function setPoNumber(?string $poNumber): void
    {
        $this->poNumber['value'] = $poNumber;
    }

    /**
     * Unsets Po Number.
     * Purchase Order number
     */
    public function unsetPoNumber(): void
    {
        $this->poNumber = [];
    }

    /**
     * Returns Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     */
    public function getQuickInvoiceId(): ?string
    {
        if (count($this->quickInvoiceId) == 0) {
            return null;
        }
        return $this->quickInvoiceId['value'];
    }

    /**
     * Sets Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     *
     * @maps quick_invoice_id
     */
    public function setQuickInvoiceId(?string $quickInvoiceId): void
    {
        $this->quickInvoiceId['value'] = $quickInvoiceId;
    }

    /**
     * Unsets Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     */
    public function unsetQuickInvoiceId(): void
    {
        $this->quickInvoiceId = [];
    }

    /**
     * Returns Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is an
     * ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0 or not
     * present if installment is sent as 1.
     */
    public function getRecurring(): ?bool
    {
        return $this->recurring;
    }

    /**
     * Sets Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is an
     * ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0 or not
     * present if installment is sent as 1.
     *
     * @maps recurring
     */
    public function setRecurring(?bool $recurring): void
    {
        $this->recurring = $recurring;
    }

    /**
     * Returns Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     */
    public function getRecurringNumber(): ?int
    {
        if (count($this->recurringNumber) == 0) {
            return null;
        }
        return $this->recurringNumber['value'];
    }

    /**
     * Sets Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     *
     * @maps recurring_number
     */
    public function setRecurringNumber(?int $recurringNumber): void
    {
        $this->recurringNumber['value'] = $recurringNumber;
    }

    /**
     * Unsets Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     */
    public function unsetRecurringNumber(): void
    {
        $this->recurringNumber = [];
    }

    /**
     * Returns Room Num.
     * Used in Lodging
     */
    public function getRoomNum(): ?string
    {
        if (count($this->roomNum) == 0) {
            return null;
        }
        return $this->roomNum['value'];
    }

    /**
     * Sets Room Num.
     * Used in Lodging
     *
     * @maps room_num
     */
    public function setRoomNum(?string $roomNum): void
    {
        $this->roomNum['value'] = $roomNum;
    }

    /**
     * Unsets Room Num.
     * Used in Lodging
     */
    public function unsetRoomNum(): void
    {
        $this->roomNum = [];
    }

    /**
     * Returns Room Rate.
     * Required if merchant industry type is lodging.
     */
    public function getRoomRate(): ?int
    {
        if (count($this->roomRate) == 0) {
            return null;
        }
        return $this->roomRate['value'];
    }

    /**
     * Sets Room Rate.
     * Required if merchant industry type is lodging.
     *
     * @maps room_rate
     */
    public function setRoomRate(?int $roomRate): void
    {
        $this->roomRate['value'] = $roomRate;
    }

    /**
     * Unsets Room Rate.
     * Required if merchant industry type is lodging.
     */
    public function unsetRoomRate(): void
    {
        $this->roomRate = [];
    }

    /**
     * Returns Save Account.
     * Specifies to save account to contacts profile if account_number/track_data is present with either
     * contact_id or contact_api_id in params.
     */
    public function getSaveAccount(): ?bool
    {
        return $this->saveAccount;
    }

    /**
     * Sets Save Account.
     * Specifies to save account to contacts profile if account_number/track_data is present with either
     * contact_id or contact_api_id in params.
     *
     * @maps save_account
     */
    public function setSaveAccount(?bool $saveAccount): void
    {
        $this->saveAccount = $saveAccount;
    }

    /**
     * Returns Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     */
    public function getSaveAccountTitle(): ?string
    {
        if (count($this->saveAccountTitle) == 0) {
            return null;
        }
        return $this->saveAccountTitle['value'];
    }

    /**
     * Sets Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     *
     * @maps save_account_title
     */
    public function setSaveAccountTitle(?string $saveAccountTitle): void
    {
        $this->saveAccountTitle['value'] = $saveAccountTitle;
    }

    /**
     * Unsets Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     */
    public function unsetSaveAccountTitle(): void
    {
        $this->saveAccountTitle = [];
    }

    /**
     * Returns Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getSubtotalAmount(): ?int
    {
        if (count($this->subtotalAmount) == 0) {
            return null;
        }
        return $this->subtotalAmount['value'];
    }

    /**
     * Sets Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps subtotal_amount
     */
    public function setSubtotalAmount(?int $subtotalAmount): void
    {
        $this->subtotalAmount['value'] = $subtotalAmount;
    }

    /**
     * Unsets Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetSubtotalAmount(): void
    {
        $this->subtotalAmount = [];
    }

    /**
     * Returns Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getSurchargeAmount(): ?int
    {
        if (count($this->surchargeAmount) == 0) {
            return null;
        }
        return $this->surchargeAmount['value'];
    }

    /**
     * Sets Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps surcharge_amount
     */
    public function setSurchargeAmount(?int $surchargeAmount): void
    {
        $this->surchargeAmount['value'] = $surchargeAmount;
    }

    /**
     * Unsets Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetSurchargeAmount(): void
    {
        $this->surchargeAmount = [];
    }

    /**
     * Returns Tags.
     * Tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     * Tags
     *
     * @maps tags
     *
     * @param string[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getTax(): ?int
    {
        if (count($this->tax) == 0) {
            return null;
        }
        return $this->tax['value'];
    }

    /**
     * Sets Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps tax
     */
    public function setTax(?int $tax): void
    {
        $this->tax['value'] = $tax;
    }

    /**
     * Unsets Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetTax(): void
    {
        $this->tax = [];
    }

    /**
     * Returns Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     */
    public function getTipAmount(): ?int
    {
        if (count($this->tipAmount) == 0) {
            return null;
        }
        return $this->tipAmount['value'];
    }

    /**
     * Sets Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     *
     * @maps tip_amount
     */
    public function setTipAmount(?int $tipAmount): void
    {
        $this->tipAmount['value'] = $tipAmount;
    }

    /**
     * Unsets Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     */
    public function unsetTipAmount(): void
    {
        $this->tipAmount = [];
    }

    /**
     * Returns Transaction Amount.
     * Amount of the transaction. This should always be the desired settle amount of the transaction. Use
     * only integer numbers, so $10.99 will be 1099.
     */
    public function getTransactionAmount(): ?int
    {
        if (count($this->transactionAmount) == 0) {
            return null;
        }
        return $this->transactionAmount['value'];
    }

    /**
     * Sets Transaction Amount.
     * Amount of the transaction. This should always be the desired settle amount of the transaction. Use
     * only integer numbers, so $10.99 will be 1099.
     *
     * @maps transaction_amount
     */
    public function setTransactionAmount(?int $transactionAmount): void
    {
        $this->transactionAmount['value'] = $transactionAmount;
    }

    /**
     * Unsets Transaction Amount.
     * Amount of the transaction. This should always be the desired settle amount of the transaction. Use
     * only integer numbers, so $10.99 will be 1099.
     */
    public function unsetTransactionAmount(): void
    {
        $this->transactionAmount = [];
    }

    /**
     * Returns Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     */
    public function getSecondaryAmount(): ?int
    {
        if (count($this->secondaryAmount) == 0) {
            return null;
        }
        return $this->secondaryAmount['value'];
    }

    /**
     * Sets Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     *
     * @maps secondary_amount
     */
    public function setSecondaryAmount(?int $secondaryAmount): void
    {
        $this->secondaryAmount['value'] = $secondaryAmount;
    }

    /**
     * Unsets Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     */
    public function unsetSecondaryAmount(): void
    {
        $this->secondaryAmount = [];
    }

    /**
     * Returns Transaction Api Id.
     * See api_id page for more details
     */
    public function getTransactionApiId(): ?string
    {
        if (count($this->transactionApiId) == 0) {
            return null;
        }
        return $this->transactionApiId['value'];
    }

    /**
     * Sets Transaction Api Id.
     * See api_id page for more details
     *
     * @maps transaction_api_id
     */
    public function setTransactionApiId(?string $transactionApiId): void
    {
        $this->transactionApiId['value'] = $transactionApiId;
    }

    /**
     * Unsets Transaction Api Id.
     * See api_id page for more details
     */
    public function unsetTransactionApiId(): void
    {
        $this->transactionApiId = [];
    }

    /**
     * Returns Transaction C1.
     * Custom field 1 for api users to store custom data
     */
    public function getTransactionC1(): ?string
    {
        if (count($this->transactionC1) == 0) {
            return null;
        }
        return $this->transactionC1['value'];
    }

    /**
     * Sets Transaction C1.
     * Custom field 1 for api users to store custom data
     *
     * @maps transaction_c1
     */
    public function setTransactionC1(?string $transactionC1): void
    {
        $this->transactionC1['value'] = $transactionC1;
    }

    /**
     * Unsets Transaction C1.
     * Custom field 1 for api users to store custom data
     */
    public function unsetTransactionC1(): void
    {
        $this->transactionC1 = [];
    }

    /**
     * Returns Transaction C2.
     * Custom field 2 for api users to store custom data
     */
    public function getTransactionC2(): ?string
    {
        if (count($this->transactionC2) == 0) {
            return null;
        }
        return $this->transactionC2['value'];
    }

    /**
     * Sets Transaction C2.
     * Custom field 2 for api users to store custom data
     *
     * @maps transaction_c2
     */
    public function setTransactionC2(?string $transactionC2): void
    {
        $this->transactionC2['value'] = $transactionC2;
    }

    /**
     * Unsets Transaction C2.
     * Custom field 2 for api users to store custom data
     */
    public function unsetTransactionC2(): void
    {
        $this->transactionC2 = [];
    }

    /**
     * Returns Transaction C3.
     * Custom field 3 for api users to store custom data
     */
    public function getTransactionC3(): ?string
    {
        if (count($this->transactionC3) == 0) {
            return null;
        }
        return $this->transactionC3['value'];
    }

    /**
     * Sets Transaction C3.
     * Custom field 3 for api users to store custom data
     *
     * @maps transaction_c3
     */
    public function setTransactionC3(?string $transactionC3): void
    {
        $this->transactionC3['value'] = $transactionC3;
    }

    /**
     * Unsets Transaction C3.
     * Custom field 3 for api users to store custom data
     */
    public function unsetTransactionC3(): void
    {
        $this->transactionC3 = [];
    }

    /**
     * Returns Bank Funded Only Override.
     * Bank Funded Only Override
     */
    public function getBankFundedOnlyOverride(): ?bool
    {
        return $this->bankFundedOnlyOverride;
    }

    /**
     * Sets Bank Funded Only Override.
     * Bank Funded Only Override
     *
     * @maps bank_funded_only_override
     */
    public function setBankFundedOnlyOverride(?bool $bankFundedOnlyOverride): void
    {
        $this->bankFundedOnlyOverride = $bankFundedOnlyOverride;
    }

    /**
     * Returns Allow Partial Authorization Override.
     * Allow Partial Authorization Override
     */
    public function getAllowPartialAuthorizationOverride(): ?bool
    {
        return $this->allowPartialAuthorizationOverride;
    }

    /**
     * Sets Allow Partial Authorization Override.
     * Allow Partial Authorization Override
     *
     * @maps allow_partial_authorization_override
     */
    public function setAllowPartialAuthorizationOverride(?bool $allowPartialAuthorizationOverride): void
    {
        $this->allowPartialAuthorizationOverride = $allowPartialAuthorizationOverride;
    }

    /**
     * Returns Auto Decline Cvv Override.
     * Auto Decline CVV Override
     */
    public function getAutoDeclineCvvOverride(): ?bool
    {
        return $this->autoDeclineCvvOverride;
    }

    /**
     * Sets Auto Decline Cvv Override.
     * Auto Decline CVV Override
     *
     * @maps auto_decline_cvv_override
     */
    public function setAutoDeclineCvvOverride(?bool $autoDeclineCvvOverride): void
    {
        $this->autoDeclineCvvOverride = $autoDeclineCvvOverride;
    }

    /**
     * Returns Auto Decline Street Override.
     * Auto Decline Street Override
     */
    public function getAutoDeclineStreetOverride(): ?bool
    {
        return $this->autoDeclineStreetOverride;
    }

    /**
     * Sets Auto Decline Street Override.
     * Auto Decline Street Override
     *
     * @maps auto_decline_street_override
     */
    public function setAutoDeclineStreetOverride(?bool $autoDeclineStreetOverride): void
    {
        $this->autoDeclineStreetOverride = $autoDeclineStreetOverride;
    }

    /**
     * Returns Auto Decline Zip Override.
     * Auto Decline Zip Override
     */
    public function getAutoDeclineZipOverride(): ?bool
    {
        return $this->autoDeclineZipOverride;
    }

    /**
     * Sets Auto Decline Zip Override.
     * Auto Decline Zip Override
     *
     * @maps auto_decline_zip_override
     */
    public function setAutoDeclineZipOverride(?bool $autoDeclineZipOverride): void
    {
        $this->autoDeclineZipOverride = $autoDeclineZipOverride;
    }

    /**
     * Returns Id.
     * Transaction ID
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Transaction ID
     *
     * @required
     * @maps id
     */
    public function setId(string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @required
     * @maps created_ts
     */
    public function setCreatedTs(int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @required
     * @maps modified_ts
     */
    public function setModifiedTs(int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Terminal Id.
     * Terminal ID
     */
    public function getTerminalId(): ?string
    {
        if (count($this->terminalId) == 0) {
            return null;
        }
        return $this->terminalId['value'];
    }

    /**
     * Sets Terminal Id.
     * Terminal ID
     *
     * @maps terminal_id
     */
    public function setTerminalId(?string $terminalId): void
    {
        $this->terminalId['value'] = $terminalId;
    }

    /**
     * Unsets Terminal Id.
     * Terminal ID
     */
    public function unsetTerminalId(): void
    {
        $this->terminalId = [];
    }

    /**
     * Returns Account Holder Name.
     * For CC, this is the 'Name (as it appears) on Card'. For ACH, this is the 'Name on Account'.
     */
    public function getAccountHolderName(): ?string
    {
        if (count($this->accountHolderName) == 0) {
            return null;
        }
        return $this->accountHolderName['value'];
    }

    /**
     * Sets Account Holder Name.
     * For CC, this is the 'Name (as it appears) on Card'. For ACH, this is the 'Name on Account'.
     *
     * @maps account_holder_name
     */
    public function setAccountHolderName(?string $accountHolderName): void
    {
        $this->accountHolderName['value'] = $accountHolderName;
    }

    /**
     * Unsets Account Holder Name.
     * For CC, this is the 'Name (as it appears) on Card'. For ACH, this is the 'Name on Account'.
     */
    public function unsetAccountHolderName(): void
    {
        $this->accountHolderName = [];
    }

    /**
     * Returns Account Type.
     * Required for ACH transactions if account_vault_id is not provided.
     */
    public function getAccountType(): ?string
    {
        if (count($this->accountType) == 0) {
            return null;
        }
        return $this->accountType['value'];
    }

    /**
     * Sets Account Type.
     * Required for ACH transactions if account_vault_id is not provided.
     *
     * @maps account_type
     */
    public function setAccountType(?string $accountType): void
    {
        $this->accountType['value'] = $accountType;
    }

    /**
     * Unsets Account Type.
     * Required for ACH transactions if account_vault_id is not provided.
     */
    public function unsetAccountType(): void
    {
        $this->accountType = [];
    }

    /**
     * Returns Token Api Id.
     * This can be supplied in place of account_vault_id if you would like to use an token for the
     * transaction and are using your own custom api_id's to track accountvaults in the system.
     */
    public function getTokenApiId(): ?string
    {
        if (count($this->tokenApiId) == 0) {
            return null;
        }
        return $this->tokenApiId['value'];
    }

    /**
     * Sets Token Api Id.
     * This can be supplied in place of account_vault_id if you would like to use an token for the
     * transaction and are using your own custom api_id's to track accountvaults in the system.
     *
     * @maps token_api_id
     */
    public function setTokenApiId(?string $tokenApiId): void
    {
        $this->tokenApiId['value'] = $tokenApiId;
    }

    /**
     * Unsets Token Api Id.
     * This can be supplied in place of account_vault_id if you would like to use an token for the
     * transaction and are using your own custom api_id's to track accountvaults in the system.
     */
    public function unsetTokenApiId(): void
    {
        $this->tokenApiId = [];
    }

    /**
     * Returns Token Id.
     * Required if account_number,  track_data, micr_data is not provided.
     */
    public function getTokenId(): ?string
    {
        if (count($this->tokenId) == 0) {
            return null;
        }
        return $this->tokenId['value'];
    }

    /**
     * Sets Token Id.
     * Required if account_number,  track_data, micr_data is not provided.
     *
     * @maps token_id
     */
    public function setTokenId(?string $tokenId): void
    {
        $this->tokenId['value'] = $tokenId;
    }

    /**
     * Unsets Token Id.
     * Required if account_number,  track_data, micr_data is not provided.
     */
    public function unsetTokenId(): void
    {
        $this->tokenId = [];
    }

    /**
     * Returns Ach Identifier.
     * Required for ACH transactions in certain scenarios.
     */
    public function getAchIdentifier(): ?string
    {
        if (count($this->achIdentifier) == 0) {
            return null;
        }
        return $this->achIdentifier['value'];
    }

    /**
     * Sets Ach Identifier.
     * Required for ACH transactions in certain scenarios.
     *
     * @maps ach_identifier
     */
    public function setAchIdentifier(?string $achIdentifier): void
    {
        $this->achIdentifier['value'] = $achIdentifier;
    }

    /**
     * Unsets Ach Identifier.
     * Required for ACH transactions in certain scenarios.
     */
    public function unsetAchIdentifier(): void
    {
        $this->achIdentifier = [];
    }

    /**
     * Returns Ach Sec Code.
     * Required for ACH transactions if account_vault_id is not provided.
     */
    public function getAchSecCode(): ?string
    {
        if (count($this->achSecCode) == 0) {
            return null;
        }
        return $this->achSecCode['value'];
    }

    /**
     * Sets Ach Sec Code.
     * Required for ACH transactions if account_vault_id is not provided.
     *
     * @maps ach_sec_code
     * @factory \FortisAPILib\Models\AchSecCode1Enum::checkValue
     */
    public function setAchSecCode(?string $achSecCode): void
    {
        $this->achSecCode['value'] = $achSecCode;
    }

    /**
     * Unsets Ach Sec Code.
     * Required for ACH transactions if account_vault_id is not provided.
     */
    public function unsetAchSecCode(): void
    {
        $this->achSecCode = [];
    }

    /**
     * Returns Auth Amount.
     * Authorization Amount
     */
    public function getAuthAmount(): ?int
    {
        if (count($this->authAmount) == 0) {
            return null;
        }
        return $this->authAmount['value'];
    }

    /**
     * Sets Auth Amount.
     * Authorization Amount
     *
     * @maps auth_amount
     */
    public function setAuthAmount(?int $authAmount): void
    {
        $this->authAmount['value'] = $authAmount;
    }

    /**
     * Unsets Auth Amount.
     * Authorization Amount
     */
    public function unsetAuthAmount(): void
    {
        $this->authAmount = [];
    }

    /**
     * Returns Auth Code.
     * Required on force transactions. Ignored for all other actions.
     */
    public function getAuthCode(): ?string
    {
        if (count($this->authCode) == 0) {
            return null;
        }
        return $this->authCode['value'];
    }

    /**
     * Sets Auth Code.
     * Required on force transactions. Ignored for all other actions.
     *
     * @maps auth_code
     */
    public function setAuthCode(?string $authCode): void
    {
        $this->authCode['value'] = $authCode;
    }

    /**
     * Unsets Auth Code.
     * Required on force transactions. Ignored for all other actions.
     */
    public function unsetAuthCode(): void
    {
        $this->authCode = [];
    }

    /**
     * Returns Avs.
     * AVS
     */
    public function getAvs(): ?string
    {
        if (count($this->avs) == 0) {
            return null;
        }
        return $this->avs['value'];
    }

    /**
     * Sets Avs.
     * AVS
     *
     * @maps avs
     * @factory \FortisAPILib\Models\AvsEnum::checkValue
     */
    public function setAvs(?string $avs): void
    {
        $this->avs['value'] = $avs;
    }

    /**
     * Unsets Avs.
     * AVS
     */
    public function unsetAvs(): void
    {
        $this->avs = [];
    }

    /**
     * Returns Avs Enhanced.
     * AVS Enhanced
     */
    public function getAvsEnhanced(): ?string
    {
        if (count($this->avsEnhanced) == 0) {
            return null;
        }
        return $this->avsEnhanced['value'];
    }

    /**
     * Sets Avs Enhanced.
     * AVS Enhanced
     *
     * @maps avs_enhanced
     */
    public function setAvsEnhanced(?string $avsEnhanced): void
    {
        $this->avsEnhanced['value'] = $avsEnhanced;
    }

    /**
     * Unsets Avs Enhanced.
     * AVS Enhanced
     */
    public function unsetAvsEnhanced(): void
    {
        $this->avsEnhanced = [];
    }

    /**
     * Returns Cardholder Present.
     * If the cardholder is present at the point of service
     */
    public function getCardholderPresent(): ?bool
    {
        return $this->cardholderPresent;
    }

    /**
     * Sets Cardholder Present.
     * If the cardholder is present at the point of service
     *
     * @maps cardholder_present
     */
    public function setCardholderPresent(?bool $cardholderPresent): void
    {
        $this->cardholderPresent = $cardholderPresent;
    }

    /**
     * Returns Card Present.
     * A POST only field to specify whether or not the card is present.
     */
    public function getCardPresent(): ?bool
    {
        return $this->cardPresent;
    }

    /**
     * Sets Card Present.
     * A POST only field to specify whether or not the card is present.
     *
     * @maps card_present
     */
    public function setCardPresent(?bool $cardPresent): void
    {
        $this->cardPresent = $cardPresent;
    }

    /**
     * Returns Check Number.
     * Required for transactions using TEL SEC code.
     */
    public function getCheckNumber(): ?string
    {
        if (count($this->checkNumber) == 0) {
            return null;
        }
        return $this->checkNumber['value'];
    }

    /**
     * Sets Check Number.
     * Required for transactions using TEL SEC code.
     *
     * @maps check_number
     */
    public function setCheckNumber(?string $checkNumber): void
    {
        $this->checkNumber['value'] = $checkNumber;
    }

    /**
     * Unsets Check Number.
     * Required for transactions using TEL SEC code.
     */
    public function unsetCheckNumber(): void
    {
        $this->checkNumber = [];
    }

    /**
     * Returns Customer Ip.
     * Can be used to store customer IP Address
     */
    public function getCustomerIp(): ?string
    {
        if (count($this->customerIp) == 0) {
            return null;
        }
        return $this->customerIp['value'];
    }

    /**
     * Sets Customer Ip.
     * Can be used to store customer IP Address
     *
     * @maps customer_ip
     */
    public function setCustomerIp(?string $customerIp): void
    {
        $this->customerIp['value'] = $customerIp;
    }

    /**
     * Unsets Customer Ip.
     * Can be used to store customer IP Address
     */
    public function unsetCustomerIp(): void
    {
        $this->customerIp = [];
    }

    /**
     * Returns Cvv Response.
     * Obfuscated CVV
     */
    public function getCvvResponse(): ?string
    {
        if (count($this->cvvResponse) == 0) {
            return null;
        }
        return $this->cvvResponse['value'];
    }

    /**
     * Sets Cvv Response.
     * Obfuscated CVV
     *
     * @maps cvv_response
     */
    public function setCvvResponse(?string $cvvResponse): void
    {
        $this->cvvResponse['value'] = $cvvResponse;
    }

    /**
     * Unsets Cvv Response.
     * Obfuscated CVV
     */
    public function unsetCvvResponse(): void
    {
        $this->cvvResponse = [];
    }

    /**
     * Returns Entry Mode Id.
     * Entry Mode - See entry mode section for more detail
     */
    public function getEntryModeId(): ?string
    {
        if (count($this->entryModeId) == 0) {
            return null;
        }
        return $this->entryModeId['value'];
    }

    /**
     * Sets Entry Mode Id.
     * Entry Mode - See entry mode section for more detail
     *
     * @maps entry_mode_id
     * @factory \FortisAPILib\Models\EntryModeIdEnum::checkValue
     */
    public function setEntryModeId(?string $entryModeId): void
    {
        $this->entryModeId['value'] = $entryModeId;
    }

    /**
     * Unsets Entry Mode Id.
     * Entry Mode - See entry mode section for more detail
     */
    public function unsetEntryModeId(): void
    {
        $this->entryModeId = [];
    }

    /**
     * Returns Emv Receipt Data.
     * This field is a read only field. This field will only be populated for EMV transactions and will
     * contain proper JSON formatted data with some or all of the following fields: TC,TVR,AID,TSI,ATC,
     * APPLAB,APPN,CVM
     */
    public function getEmvReceiptData(): ?EmvReceiptData
    {
        return $this->emvReceiptData;
    }

    /**
     * Sets Emv Receipt Data.
     * This field is a read only field. This field will only be populated for EMV transactions and will
     * contain proper JSON formatted data with some or all of the following fields: TC,TVR,AID,TSI,ATC,
     * APPLAB,APPN,CVM
     *
     * @maps emv_receipt_data
     */
    public function setEmvReceiptData(?EmvReceiptData $emvReceiptData): void
    {
        $this->emvReceiptData = $emvReceiptData;
    }

    /**
     * Returns First Six.
     * First six numbers of account_number.  Automatically generated by system.
     */
    public function getFirstSix(): ?string
    {
        if (count($this->firstSix) == 0) {
            return null;
        }
        return $this->firstSix['value'];
    }

    /**
     * Sets First Six.
     * First six numbers of account_number.  Automatically generated by system.
     *
     * @maps first_six
     */
    public function setFirstSix(?string $firstSix): void
    {
        $this->firstSix['value'] = $firstSix;
    }

    /**
     * Unsets First Six.
     * First six numbers of account_number.  Automatically generated by system.
     */
    public function unsetFirstSix(): void
    {
        $this->firstSix = [];
    }

    /**
     * Returns Last Four.
     * Last four numbers of account_number.  Automatically generated by the system.
     */
    public function getLastFour(): ?string
    {
        if (count($this->lastFour) == 0) {
            return null;
        }
        return $this->lastFour['value'];
    }

    /**
     * Sets Last Four.
     * Last four numbers of account_number.  Automatically generated by the system.
     *
     * @maps last_four
     */
    public function setLastFour(?string $lastFour): void
    {
        $this->lastFour['value'] = $lastFour;
    }

    /**
     * Unsets Last Four.
     * Last four numbers of account_number.  Automatically generated by the system.
     */
    public function unsetLastFour(): void
    {
        $this->lastFour = [];
    }

    /**
     * Returns Payment Method.
     * 'cc' or 'ach'
     */
    public function getPaymentMethod(): string
    {
        return $this->paymentMethod;
    }

    /**
     * Sets Payment Method.
     * 'cc' or 'ach'
     *
     * @required
     * @maps payment_method
     * @factory \FortisAPILib\Models\PaymentMethod3Enum::checkValue
     */
    public function setPaymentMethod(string $paymentMethod): void
    {
        $this->paymentMethod = $paymentMethod;
    }

    /**
     * Returns Terminal Serial Number.
     * If transaction was processed using a terminal, this field would contain the terminal's serial
     * number
     */
    public function getTerminalSerialNumber(): ?string
    {
        if (count($this->terminalSerialNumber) == 0) {
            return null;
        }
        return $this->terminalSerialNumber['value'];
    }

    /**
     * Sets Terminal Serial Number.
     * If transaction was processed using a terminal, this field would contain the terminal's serial
     * number
     *
     * @maps terminal_serial_number
     */
    public function setTerminalSerialNumber(?string $terminalSerialNumber): void
    {
        $this->terminalSerialNumber['value'] = $terminalSerialNumber;
    }

    /**
     * Unsets Terminal Serial Number.
     * If transaction was processed using a terminal, this field would contain the terminal's serial
     * number
     */
    public function unsetTerminalSerialNumber(): void
    {
        $this->terminalSerialNumber = [];
    }

    /**
     * Returns Transaction Settlement Status.
     * (Deprecated field)
     */
    public function getTransactionSettlementStatus(): ?string
    {
        if (count($this->transactionSettlementStatus) == 0) {
            return null;
        }
        return $this->transactionSettlementStatus['value'];
    }

    /**
     * Sets Transaction Settlement Status.
     * (Deprecated field)
     *
     * @maps transaction_settlement_status
     */
    public function setTransactionSettlementStatus(?string $transactionSettlementStatus): void
    {
        $this->transactionSettlementStatus['value'] = $transactionSettlementStatus;
    }

    /**
     * Unsets Transaction Settlement Status.
     * (Deprecated field)
     */
    public function unsetTransactionSettlementStatus(): void
    {
        $this->transactionSettlementStatus = [];
    }

    /**
     * Returns Charge Back Date.
     * Charge Back Date (ACH Trxs)
     */
    public function getChargeBackDate(): ?string
    {
        if (count($this->chargeBackDate) == 0) {
            return null;
        }
        return $this->chargeBackDate['value'];
    }

    /**
     * Sets Charge Back Date.
     * Charge Back Date (ACH Trxs)
     *
     * @maps charge_back_date
     */
    public function setChargeBackDate(?string $chargeBackDate): void
    {
        $this->chargeBackDate['value'] = $chargeBackDate;
    }

    /**
     * Unsets Charge Back Date.
     * Charge Back Date (ACH Trxs)
     */
    public function unsetChargeBackDate(): void
    {
        $this->chargeBackDate = [];
    }

    /**
     * Returns Is Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     */
    public function getIsRecurring(): ?bool
    {
        return $this->isRecurring;
    }

    /**
     * Sets Is Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     *
     * @maps is_recurring
     */
    public function setIsRecurring(?bool $isRecurring): void
    {
        $this->isRecurring = $isRecurring;
    }

    /**
     * Returns Notification Email Sent.
     * Indicates if email receipt has been sent
     */
    public function getNotificationEmailSent(): ?string
    {
        if (count($this->notificationEmailSent) == 0) {
            return null;
        }
        return $this->notificationEmailSent['value'];
    }

    /**
     * Sets Notification Email Sent.
     * Indicates if email receipt has been sent
     *
     * @maps notification_email_sent
     */
    public function setNotificationEmailSent(?string $notificationEmailSent): void
    {
        $this->notificationEmailSent['value'] = $notificationEmailSent;
    }

    /**
     * Unsets Notification Email Sent.
     * Indicates if email receipt has been sent
     */
    public function unsetNotificationEmailSent(): void
    {
        $this->notificationEmailSent = [];
    }

    /**
     * Returns Par.
     * A field usually returned form the processor to uniquely identifier a specific cardholder's credit
     * card.
     */
    public function getPar(): ?string
    {
        if (count($this->par) == 0) {
            return null;
        }
        return $this->par['value'];
    }

    /**
     * Sets Par.
     * A field usually returned form the processor to uniquely identifier a specific cardholder's credit
     * card.
     *
     * @maps par
     */
    public function setPar(?string $par): void
    {
        $this->par['value'] = $par;
    }

    /**
     * Unsets Par.
     * A field usually returned form the processor to uniquely identifier a specific cardholder's credit
     * card.
     */
    public function unsetPar(): void
    {
        $this->par = [];
    }

    /**
     * Returns Reason Code Id.
     * Response reason code that provides more detail as to the result of the transaction. The reason code
     * list can be found here: Response Reason Codes
     * >0 - N/A
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1001 - AuthCompleted
     * >
     * >1002 - Forced
     * >
     * >1003 - AuthOnly Declined
     * >
     * >1004 - Validation Failure (System Run Trx)
     * >
     * >1005 - Processor Response Invalid
     * >
     * >1200 - Voided
     * >
     * >1201 - Partial Approval
     * >
     * >1240 - Approved, optional fields are missing (Paya ACH only)
     * >
     * >1301 - Account Deactivated for Fraud
     * >
     * >1302-1399 - Reserved for Future Fraud Reason Codes
     * >
     * >1500 - Generic Decline
     * >
     * >1510 - Call
     * >
     * >1518 - Transaction Not Permitted - Terminal
     * >
     * >1520 - Pickup Card
     * >
     * >1530 - Retry Trx
     * >
     * >1531 - Communication Error
     * >
     * >1540 - Setup Issue, contact Support
     * >
     * >1541 - Device is not signature capable
     * >
     * >1588 - Data could not be de-tokenized
     * >
     * >1599 - Other Reason
     * >
     * >1601 - Generic Decline
     * >
     * >1602 - Call
     * >
     * >1603 - No Reply
     * >
     * >1604 - Pickup Card - No Fraud
     * >
     * >1605 - Pickup Card - Fraud
     * >
     * >1606 - Pickup Card - Lost
     * >
     * >1607 - Pickup Card - Stolen
     * >
     * >1608 - Account Error
     * >
     * >1609 - Already Reversed
     * >
     * >1610 - Bad PIN
     * >
     * >1611 - Cashback Exceeded
     * >
     * >1612 - Cashback Not Available
     * >
     * >1613 - CID Error
     * >
     * >1614 - Date Error
     * >
     * >1615 - Do Not Honor
     * >
     * >1616 - NSF
     * >
     * >1618 - Invalid Service Code
     * >
     * >1619 - Exceeded activity limit
     * >
     * >1620 - Violation
     * >
     * >1621 - Encryption Error
     * >
     * >1622 - Card Expired
     * >
     * >1623 - Renter
     * >
     * >1624 - Security Violation
     * >
     * >1625 - Card Not Permitted
     * >
     * >1626 - Trans Not Permitted
     * >
     * >1627 - System Error
     * >
     * >1628 - Bad Merchant ID
     * >
     * >1629 - Duplicate Batch (Already Closed)
     * >
     * >1630 - Batch Rejected
     * >
     * >1631 - Account Closed
     * >
     * >1632 - PIN tries exceeded
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1640 - Required fields are missing (ACH only)
     * >
     * >1641 - Previously declined transaction (1640)
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1650 - Contact Support
     * >
     * >1651 - Max Sending - Throttle Limit Hit (ACH only)
     * >
     * >1652 - Max Attempts Exceeded
     * >
     * >1653 - Contact Support
     * >
     * >1654 - Voided - Online Reversal Failed
     * >
     * >1655 - Decline (AVS Auto Reversal)
     * >
     * >1656 - Decline (CVV Auto Reversal)
     * >
     * >1657 - Decline (Partial Auth Auto Reversal)
     * >
     * >1658 - Expired Authorization
     * >
     * >1659 - Declined - Partial Approval not Supported
     * >
     * >1660 - Bank Account Error, please delete and re-add Token
     * >
     * >1661 - Declined AuthIncrement
     * >
     * >1662 - Auto Reversal - Processor can't settle
     * >
     * >1663 - Manager Needed (Needs override transaction)
     * >
     * >1664 - Token Not Found: Sharing Group Unavailable
     * >
     * >1665 - Contact Not Found: Sharing Group Unavailable
     * >
     * >1666 - Amount Error
     * >
     * >1667 - Action Not Allowed in Current State
     * >
     * >1668 - Original Authorization Not Valid
     * >
     * >1701 - Chip Reject
     * >
     * >1800 - Incorrect CVV
     * >
     * >1801 - Duplicate Transaction
     * >
     * >1802 - MID/TID Not Registered
     * >
     * >1803 - Stop Recurring
     * >
     * >1804 - No Transactions in Batch
     * >
     * >1805 - Batch Does Not Exist
     * >
     * >
     * >
     * **ACH Reject Reason Codes**
     * | Code | E-Code | Verbiage | Short Description | Long Description |
     * | ----------- | ----------- | ----------- | ----------- | ----------- |
     * | 2101 | Rejected-R01 |  | Insufficient funds | Available balance is not sufficient to cover the
     * amount of the debit entry |
     * | 2102 | Rejected-R02  | E02 | Bank account closed | Previously active amount has been closed by the
     * customer of RDFI |
     * | 2103 | Rejected-R03 | E03 | No bank account/unable to locate account | Account number does not
     * correspond to the individual identified in the entry, or the account number designated is not an
     * open account |
     * | 2104 | Rejected-R04  | E04 | Invalid bank account number | Account number structure is not valid
     * |
     * | 2105 | Rejected-R05  | E05 | Reserved | Currently not in use |
     * | 2106 | Rejected-R06 |  | Returned per ODFI request | ODFI requested the RDFI to return the entry
     * |
     * | 2107 | Rejected-R07 | E07 | Authorization revoked by customer | Receiver has revoked authorization
     * |
     * | 2108 | Rejected-R08 | E08 | Payment stopped | Receiver of a recurring debit has stopped payment of
     * an entry |
     * | 2109 | Rejected-R09 |  | Uncollected funds | Collected funds are not sufficient for payment of the
     * debit entry |
     * | 2110 | Rejected-R10 | E10 | Customer Advises Originator is Not Known to Receiver and/or Is Not
     * Authorized by Receiver to Debit Receiver’s Account | Receiver has advised RDFI that originator is
     * not authorized to debit his bank account |
     * | 2111 | Rejected-R11 |  | Customer Advises Entry Not In Accordance with the Terms of the
     * Authorization | To be used when there is an error in the authorization |
     * | 2112 | Rejected-R12 |  | Branch sold to another RDFI | RDFI unable to post entry destined for a
     * bank account maintained at a branch sold to another financial institution |
     * | 2113 | Rejected-R13 |  | RDFI not qualified to participate | Financial institution does not
     * receive commercial ACH entries |
     * | 2114 | Rejected-R14 | E14 | Representative payee deceased or unable to continue in that capacity |
     * The representative payee authorized to accept entries on behalf of a beneficiary is either deceased
     * or unable to continue in that capacity |
     * | 2115 | Rejected-R15 | E15 | Beneficiary or bank account holder deceased | (Other than
     * representative payee) deceased* - (1) the beneficiary entitled to payments is deceased or (2) the
     * bank account holder other than a representative payee is deceased |
     * | 2116 | Rejected-R16 | E16 | Bank account frozen | Funds in bank account are unavailable due to
     * action by RDFI or legal order |
     * | 2117 | Rejected-R17 |  | File record edit criteria | Entry with Invalid Account Number Initiated
     * Under Questionable Circumstances |
     * | 2118 | Rejected-R18 |  | Improper effective entry date | Entries have been presented prior to the
     * first available processing window for the effective date. |
     * | 2119 | Rejected-R19 |  | Amount field error | Improper formatting of the amount field |
     * | 2120 | Rejected-R20 |  | Non-payment bank account | Entry destined for non-payment bank account
     * defined by reg. |
     * | 2121 | Rejected-R21 |  | Invalid company Identification | The company ID information not valid
     * (normally CIE entries) |
     * | 2122 | Rejected-R22 |  | Invalid individual ID number | Individual id used by receiver is
     * incorrect (CIE entries) |
     * | 2123 | Rejected-R23 |  | Credit entry refused by receiver | Receiver returned entry because
     * minimum or exact amount not remitted, bank account is subject to litigation, or payment represents
     * an overpayment, originator is not known to receiver or receiver has not authorized this credit entry
     * to this bank account |
     * | 2124 | Rejected-R24 |  | Duplicate entry | RDFI has received a duplicate entry |
     * | 2125 | Rejected-R25 |  | Addenda error | Improper formatting of the addenda record information |
     * | 2126 | Rejected-R26 |  | Mandatory field error | Improper information in one of the mandatory
     * fields |
     * | 2127 | Rejected-R27 |  | Trace number error | Original entry trace number is not valid for return
     * entry; or addenda trace numbers do not correspond with entry detail record |
     * | 2128 | Rejected-R28 |  | Transit routing number check digit error | Check digit for the transit
     * routing number is incorrect |
     * | 2129 | Rejected-R29 | E29 | Corporate customer advises not authorized | RDFI has been notified by
     * corporate receiver that debit entry of originator is not authorized |
     * | 2130 | Rejected-R30 |  | RDFI not participant in check truncation program | Financial institution
     * not participating in automated check safekeeping application |
     * | 2131 | Rejected-R31 |  | Permissible return entry (CCD and CTX only) | RDFI has been notified by
     * the ODFI that it agrees to accept a CCD or CTX return entry |
     * | 2132 | Rejected-R32 |  | RDFI non-settlement | RDFI is not able to settle the entry |
     * | 2133 | Rejected-R33 |  | Return of XCK entry | RDFI determines at its sole discretion to return an
     * XCK entry; an XCK return entry may be initiated by midnight of the sixtieth day following the
     * settlement date if the XCK entry |
     * | 2134 | Rejected-R34 |  | Limited participation RDFI | RDFI participation has been limited by a
     * federal or state supervisor |
     * | 2135 | Rejected-R35 |  | Return of improper debit entry | ACH debit not permitted for use with the
     * CIE standard entry class code (except for reversals) |
     * | 2136 | Rejected-R36 |  | Return of Improper Credit Entry |  |
     * | 2137 | Rejected-R37 |  | Source Document Presented for Payment |  |
     * | 2138 | Rejected-R38 |  | Stop Payment on Source Document |  |
     * | 2139 | Rejected-R39 |  | Improper Source Document |  |
     * | 2140 | Rejected-R40 |  | Return of ENR Entry by Federal Government Agency |  |
     * | 2141 | Rejected-R41 |  | Invalid Transaction Code |  |
     * | 2142 | Rejected-R42 |  | Routing Number/Check Digit Error |  |
     * | 2143 | Rejected-R43 |  | Invalid DFI Account Number |  |
     * | 2144 | Rejected-R44 |  | Invalid Individual ID Number/Identification |  |
     * | 2145 | Rejected-R45 |  | Invalid Individual Name/Company Name |  |
     * | 2146 | Rejected-R46 |  | Invalid Representative Payee Indicator |  |
     * | 2147 | Rejected-R47 |  | Duplicate Enrollment |  |
     * | 2150 | Rejected-R50 |  | State Law Affecting RCK Acceptance |  |
     * | 2151 | Rejected-R51 |  | Item is Ineligible, Notice Not Provided, etc. |  |
     * | 2152 | Rejected-R52 |  | Stop Payment on Item (adjustment entries) |  |
     * | 2153 | Rejected-R53 |  | Item and ACH Entry Presented for Payment |  |
     * | 2161 | Rejected-R61 |  | Misrouted Return |  |
     * | 2162 | Rejected-R62 |  | Incorrect Trace Number |  |
     * | 2163 | Rejected-R63 |  | Incorrect Dollar Amount |  |
     * | 2164 | Rejected-R64 |  | Incorrect Individual Identification |  |
     * | 2165 | Rejected-R65 |  | Incorrect Transaction Code |  |
     * | 2166 | Rejected-R66 |  | Incorrect Company Identification |  |
     * | 2167 | Rejected-R67 |  | Duplicate Return |  |
     * | 2168 | Rejected-R68 |  | Untimely Return |  |
     * | 2169 | Rejected-R69 |  | Multiple Errors |  |
     * | 2170 | Rejected-R70 |  | Permissible Return Entry Not Accepted |  |
     * | 2171 | Rejected-R71 |  | Misrouted Dishonored Return |  |
     * | 2172 | Rejected-R72 |  | Untimely Dishonored Return |  |
     * | 2173 | Rejected-R73 |  | Timely Original Return |  |
     * | 2174 | Rejected-R74 |  | Corrected Return |  |
     * | 2180 | Rejected-R80 |  | Cross-Border Payment Coding Error |  |
     * | 2181 | Rejected-R81 |  | Non-Participant in Cross-Border Program |  |
     * | 2182 | Rejected-R82 |  | Invalid Foreign Receiving DFI Identification |  |
     * | 2183 | Rejected-R83 |  | Foreign Receiving DFI Unable to Settle |  |
     * | 2200 | Voided |  | Processor Void | The transaction was voided by the processor before being sent
     * to the bank |
     * | 2201 | Rejected-C01 |  |  |  |
     * | 2202 | Rejected-C02 |  |  |  |
     * | 2203 | Rejected-C03 |  |  |  |
     * | 2204 | Rejected-C04 |  |  |  |
     * | 2205 | Rejected-C05 |  |  |  |
     * | 2206 | Rejected-C06 |  |  |  |
     * | 2207 | Rejected-C07 |  |  |  |
     * | 2208 | Rejected-C08 |  |  |  |
     * | 2209 | Rejected-C09 |  |  |  |
     * | 2210 | Rejected-C10 |  |  |  |
     * | 2211 | Rejected-C11 |  |  |  |
     * | 2212 | Rejected-C12 |  |  |  |
     * | 2213 | Rejected-C13 |  |  |  |
     * | 2261 | Rejected-C61 |  |  |  |
     * | 2262 | Rejected-C62 |  |  |  |
     * | 2263 | Rejected-C63 |  |  |  |
     * | 2264 | Rejected-C64 |  |  |  |
     * | 2265 | Rejected-C65 |  |  |  |
     * | 2266 | Rejected-C66 |  |  |  |
     * | 2267 | Rejected-C67 |  |  |  |
     * | 2268 | Rejected-C68 |  |  |  |
     * | 2269 | Rejected-C69 |  |  |  |
     * | 2301 | Rejected-X01 |  | Misc Check 21 Return |  |
     * | 2304 | Rejected-X04 |  | Invalid Image |  |
     * | 2305 | Rejected-X05 | E95 | Breach of Warranty |  |
     * | 2306 | Rejected-X06 | E96 | Counterfeit / Forgery |  |
     * | 2307 | Rejected-X07 | E97 | Refer to Maker |  |
     * | 2308 | Rejected-X08 |  | Maximum Payment Attempts |  |
     * | 2309 | Rejected-X09 |  | Item Cannot be Re-presented |  |
     * | 2310 | Rejected-X10 |  | Not Our Item |  |
     * | 2321 | Rejected-X21 |  | Pay None |  |
     * | 2322 | Rejected-X22 |  | Pay All |  |
     * | 2323 | Rejected-X23 | E93 | Non-Negotiable |  |
     * | 2329 | Rejected-X29 |  | Stale Dated |  |
     * | 2345 | Rejected-X45 |  | Misc Return |  |
     * | 2371 | Rejected-X71 |  | RCK - 2nd Time |  |
     * | 2372 | Rejected-X72 |  | RCK Reject - ACH |  |
     * | 2373 | Rejected-X73 |  | RCK Reject - Payer |  |
     */
    public function getReasonCodeId(): ?int
    {
        if (count($this->reasonCodeId) == 0) {
            return null;
        }
        return $this->reasonCodeId['value'];
    }

    /**
     * Sets Reason Code Id.
     * Response reason code that provides more detail as to the result of the transaction. The reason code
     * list can be found here: Response Reason Codes
     * >0 - N/A
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1001 - AuthCompleted
     * >
     * >1002 - Forced
     * >
     * >1003 - AuthOnly Declined
     * >
     * >1004 - Validation Failure (System Run Trx)
     * >
     * >1005 - Processor Response Invalid
     * >
     * >1200 - Voided
     * >
     * >1201 - Partial Approval
     * >
     * >1240 - Approved, optional fields are missing (Paya ACH only)
     * >
     * >1301 - Account Deactivated for Fraud
     * >
     * >1302-1399 - Reserved for Future Fraud Reason Codes
     * >
     * >1500 - Generic Decline
     * >
     * >1510 - Call
     * >
     * >1518 - Transaction Not Permitted - Terminal
     * >
     * >1520 - Pickup Card
     * >
     * >1530 - Retry Trx
     * >
     * >1531 - Communication Error
     * >
     * >1540 - Setup Issue, contact Support
     * >
     * >1541 - Device is not signature capable
     * >
     * >1588 - Data could not be de-tokenized
     * >
     * >1599 - Other Reason
     * >
     * >1601 - Generic Decline
     * >
     * >1602 - Call
     * >
     * >1603 - No Reply
     * >
     * >1604 - Pickup Card - No Fraud
     * >
     * >1605 - Pickup Card - Fraud
     * >
     * >1606 - Pickup Card - Lost
     * >
     * >1607 - Pickup Card - Stolen
     * >
     * >1608 - Account Error
     * >
     * >1609 - Already Reversed
     * >
     * >1610 - Bad PIN
     * >
     * >1611 - Cashback Exceeded
     * >
     * >1612 - Cashback Not Available
     * >
     * >1613 - CID Error
     * >
     * >1614 - Date Error
     * >
     * >1615 - Do Not Honor
     * >
     * >1616 - NSF
     * >
     * >1618 - Invalid Service Code
     * >
     * >1619 - Exceeded activity limit
     * >
     * >1620 - Violation
     * >
     * >1621 - Encryption Error
     * >
     * >1622 - Card Expired
     * >
     * >1623 - Renter
     * >
     * >1624 - Security Violation
     * >
     * >1625 - Card Not Permitted
     * >
     * >1626 - Trans Not Permitted
     * >
     * >1627 - System Error
     * >
     * >1628 - Bad Merchant ID
     * >
     * >1629 - Duplicate Batch (Already Closed)
     * >
     * >1630 - Batch Rejected
     * >
     * >1631 - Account Closed
     * >
     * >1632 - PIN tries exceeded
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1640 - Required fields are missing (ACH only)
     * >
     * >1641 - Previously declined transaction (1640)
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1650 - Contact Support
     * >
     * >1651 - Max Sending - Throttle Limit Hit (ACH only)
     * >
     * >1652 - Max Attempts Exceeded
     * >
     * >1653 - Contact Support
     * >
     * >1654 - Voided - Online Reversal Failed
     * >
     * >1655 - Decline (AVS Auto Reversal)
     * >
     * >1656 - Decline (CVV Auto Reversal)
     * >
     * >1657 - Decline (Partial Auth Auto Reversal)
     * >
     * >1658 - Expired Authorization
     * >
     * >1659 - Declined - Partial Approval not Supported
     * >
     * >1660 - Bank Account Error, please delete and re-add Token
     * >
     * >1661 - Declined AuthIncrement
     * >
     * >1662 - Auto Reversal - Processor can't settle
     * >
     * >1663 - Manager Needed (Needs override transaction)
     * >
     * >1664 - Token Not Found: Sharing Group Unavailable
     * >
     * >1665 - Contact Not Found: Sharing Group Unavailable
     * >
     * >1666 - Amount Error
     * >
     * >1667 - Action Not Allowed in Current State
     * >
     * >1668 - Original Authorization Not Valid
     * >
     * >1701 - Chip Reject
     * >
     * >1800 - Incorrect CVV
     * >
     * >1801 - Duplicate Transaction
     * >
     * >1802 - MID/TID Not Registered
     * >
     * >1803 - Stop Recurring
     * >
     * >1804 - No Transactions in Batch
     * >
     * >1805 - Batch Does Not Exist
     * >
     * >
     * >
     * **ACH Reject Reason Codes**
     * | Code | E-Code | Verbiage | Short Description | Long Description |
     * | ----------- | ----------- | ----------- | ----------- | ----------- |
     * | 2101 | Rejected-R01 |  | Insufficient funds | Available balance is not sufficient to cover the
     * amount of the debit entry |
     * | 2102 | Rejected-R02  | E02 | Bank account closed | Previously active amount has been closed by the
     * customer of RDFI |
     * | 2103 | Rejected-R03 | E03 | No bank account/unable to locate account | Account number does not
     * correspond to the individual identified in the entry, or the account number designated is not an
     * open account |
     * | 2104 | Rejected-R04  | E04 | Invalid bank account number | Account number structure is not valid
     * |
     * | 2105 | Rejected-R05  | E05 | Reserved | Currently not in use |
     * | 2106 | Rejected-R06 |  | Returned per ODFI request | ODFI requested the RDFI to return the entry
     * |
     * | 2107 | Rejected-R07 | E07 | Authorization revoked by customer | Receiver has revoked authorization
     * |
     * | 2108 | Rejected-R08 | E08 | Payment stopped | Receiver of a recurring debit has stopped payment of
     * an entry |
     * | 2109 | Rejected-R09 |  | Uncollected funds | Collected funds are not sufficient for payment of the
     * debit entry |
     * | 2110 | Rejected-R10 | E10 | Customer Advises Originator is Not Known to Receiver and/or Is Not
     * Authorized by Receiver to Debit Receiver’s Account | Receiver has advised RDFI that originator is
     * not authorized to debit his bank account |
     * | 2111 | Rejected-R11 |  | Customer Advises Entry Not In Accordance with the Terms of the
     * Authorization | To be used when there is an error in the authorization |
     * | 2112 | Rejected-R12 |  | Branch sold to another RDFI | RDFI unable to post entry destined for a
     * bank account maintained at a branch sold to another financial institution |
     * | 2113 | Rejected-R13 |  | RDFI not qualified to participate | Financial institution does not
     * receive commercial ACH entries |
     * | 2114 | Rejected-R14 | E14 | Representative payee deceased or unable to continue in that capacity |
     * The representative payee authorized to accept entries on behalf of a beneficiary is either deceased
     * or unable to continue in that capacity |
     * | 2115 | Rejected-R15 | E15 | Beneficiary or bank account holder deceased | (Other than
     * representative payee) deceased* - (1) the beneficiary entitled to payments is deceased or (2) the
     * bank account holder other than a representative payee is deceased |
     * | 2116 | Rejected-R16 | E16 | Bank account frozen | Funds in bank account are unavailable due to
     * action by RDFI or legal order |
     * | 2117 | Rejected-R17 |  | File record edit criteria | Entry with Invalid Account Number Initiated
     * Under Questionable Circumstances |
     * | 2118 | Rejected-R18 |  | Improper effective entry date | Entries have been presented prior to the
     * first available processing window for the effective date. |
     * | 2119 | Rejected-R19 |  | Amount field error | Improper formatting of the amount field |
     * | 2120 | Rejected-R20 |  | Non-payment bank account | Entry destined for non-payment bank account
     * defined by reg. |
     * | 2121 | Rejected-R21 |  | Invalid company Identification | The company ID information not valid
     * (normally CIE entries) |
     * | 2122 | Rejected-R22 |  | Invalid individual ID number | Individual id used by receiver is
     * incorrect (CIE entries) |
     * | 2123 | Rejected-R23 |  | Credit entry refused by receiver | Receiver returned entry because
     * minimum or exact amount not remitted, bank account is subject to litigation, or payment represents
     * an overpayment, originator is not known to receiver or receiver has not authorized this credit entry
     * to this bank account |
     * | 2124 | Rejected-R24 |  | Duplicate entry | RDFI has received a duplicate entry |
     * | 2125 | Rejected-R25 |  | Addenda error | Improper formatting of the addenda record information |
     * | 2126 | Rejected-R26 |  | Mandatory field error | Improper information in one of the mandatory
     * fields |
     * | 2127 | Rejected-R27 |  | Trace number error | Original entry trace number is not valid for return
     * entry; or addenda trace numbers do not correspond with entry detail record |
     * | 2128 | Rejected-R28 |  | Transit routing number check digit error | Check digit for the transit
     * routing number is incorrect |
     * | 2129 | Rejected-R29 | E29 | Corporate customer advises not authorized | RDFI has been notified by
     * corporate receiver that debit entry of originator is not authorized |
     * | 2130 | Rejected-R30 |  | RDFI not participant in check truncation program | Financial institution
     * not participating in automated check safekeeping application |
     * | 2131 | Rejected-R31 |  | Permissible return entry (CCD and CTX only) | RDFI has been notified by
     * the ODFI that it agrees to accept a CCD or CTX return entry |
     * | 2132 | Rejected-R32 |  | RDFI non-settlement | RDFI is not able to settle the entry |
     * | 2133 | Rejected-R33 |  | Return of XCK entry | RDFI determines at its sole discretion to return an
     * XCK entry; an XCK return entry may be initiated by midnight of the sixtieth day following the
     * settlement date if the XCK entry |
     * | 2134 | Rejected-R34 |  | Limited participation RDFI | RDFI participation has been limited by a
     * federal or state supervisor |
     * | 2135 | Rejected-R35 |  | Return of improper debit entry | ACH debit not permitted for use with the
     * CIE standard entry class code (except for reversals) |
     * | 2136 | Rejected-R36 |  | Return of Improper Credit Entry |  |
     * | 2137 | Rejected-R37 |  | Source Document Presented for Payment |  |
     * | 2138 | Rejected-R38 |  | Stop Payment on Source Document |  |
     * | 2139 | Rejected-R39 |  | Improper Source Document |  |
     * | 2140 | Rejected-R40 |  | Return of ENR Entry by Federal Government Agency |  |
     * | 2141 | Rejected-R41 |  | Invalid Transaction Code |  |
     * | 2142 | Rejected-R42 |  | Routing Number/Check Digit Error |  |
     * | 2143 | Rejected-R43 |  | Invalid DFI Account Number |  |
     * | 2144 | Rejected-R44 |  | Invalid Individual ID Number/Identification |  |
     * | 2145 | Rejected-R45 |  | Invalid Individual Name/Company Name |  |
     * | 2146 | Rejected-R46 |  | Invalid Representative Payee Indicator |  |
     * | 2147 | Rejected-R47 |  | Duplicate Enrollment |  |
     * | 2150 | Rejected-R50 |  | State Law Affecting RCK Acceptance |  |
     * | 2151 | Rejected-R51 |  | Item is Ineligible, Notice Not Provided, etc. |  |
     * | 2152 | Rejected-R52 |  | Stop Payment on Item (adjustment entries) |  |
     * | 2153 | Rejected-R53 |  | Item and ACH Entry Presented for Payment |  |
     * | 2161 | Rejected-R61 |  | Misrouted Return |  |
     * | 2162 | Rejected-R62 |  | Incorrect Trace Number |  |
     * | 2163 | Rejected-R63 |  | Incorrect Dollar Amount |  |
     * | 2164 | Rejected-R64 |  | Incorrect Individual Identification |  |
     * | 2165 | Rejected-R65 |  | Incorrect Transaction Code |  |
     * | 2166 | Rejected-R66 |  | Incorrect Company Identification |  |
     * | 2167 | Rejected-R67 |  | Duplicate Return |  |
     * | 2168 | Rejected-R68 |  | Untimely Return |  |
     * | 2169 | Rejected-R69 |  | Multiple Errors |  |
     * | 2170 | Rejected-R70 |  | Permissible Return Entry Not Accepted |  |
     * | 2171 | Rejected-R71 |  | Misrouted Dishonored Return |  |
     * | 2172 | Rejected-R72 |  | Untimely Dishonored Return |  |
     * | 2173 | Rejected-R73 |  | Timely Original Return |  |
     * | 2174 | Rejected-R74 |  | Corrected Return |  |
     * | 2180 | Rejected-R80 |  | Cross-Border Payment Coding Error |  |
     * | 2181 | Rejected-R81 |  | Non-Participant in Cross-Border Program |  |
     * | 2182 | Rejected-R82 |  | Invalid Foreign Receiving DFI Identification |  |
     * | 2183 | Rejected-R83 |  | Foreign Receiving DFI Unable to Settle |  |
     * | 2200 | Voided |  | Processor Void | The transaction was voided by the processor before being sent
     * to the bank |
     * | 2201 | Rejected-C01 |  |  |  |
     * | 2202 | Rejected-C02 |  |  |  |
     * | 2203 | Rejected-C03 |  |  |  |
     * | 2204 | Rejected-C04 |  |  |  |
     * | 2205 | Rejected-C05 |  |  |  |
     * | 2206 | Rejected-C06 |  |  |  |
     * | 2207 | Rejected-C07 |  |  |  |
     * | 2208 | Rejected-C08 |  |  |  |
     * | 2209 | Rejected-C09 |  |  |  |
     * | 2210 | Rejected-C10 |  |  |  |
     * | 2211 | Rejected-C11 |  |  |  |
     * | 2212 | Rejected-C12 |  |  |  |
     * | 2213 | Rejected-C13 |  |  |  |
     * | 2261 | Rejected-C61 |  |  |  |
     * | 2262 | Rejected-C62 |  |  |  |
     * | 2263 | Rejected-C63 |  |  |  |
     * | 2264 | Rejected-C64 |  |  |  |
     * | 2265 | Rejected-C65 |  |  |  |
     * | 2266 | Rejected-C66 |  |  |  |
     * | 2267 | Rejected-C67 |  |  |  |
     * | 2268 | Rejected-C68 |  |  |  |
     * | 2269 | Rejected-C69 |  |  |  |
     * | 2301 | Rejected-X01 |  | Misc Check 21 Return |  |
     * | 2304 | Rejected-X04 |  | Invalid Image |  |
     * | 2305 | Rejected-X05 | E95 | Breach of Warranty |  |
     * | 2306 | Rejected-X06 | E96 | Counterfeit / Forgery |  |
     * | 2307 | Rejected-X07 | E97 | Refer to Maker |  |
     * | 2308 | Rejected-X08 |  | Maximum Payment Attempts |  |
     * | 2309 | Rejected-X09 |  | Item Cannot be Re-presented |  |
     * | 2310 | Rejected-X10 |  | Not Our Item |  |
     * | 2321 | Rejected-X21 |  | Pay None |  |
     * | 2322 | Rejected-X22 |  | Pay All |  |
     * | 2323 | Rejected-X23 | E93 | Non-Negotiable |  |
     * | 2329 | Rejected-X29 |  | Stale Dated |  |
     * | 2345 | Rejected-X45 |  | Misc Return |  |
     * | 2371 | Rejected-X71 |  | RCK - 2nd Time |  |
     * | 2372 | Rejected-X72 |  | RCK Reject - ACH |  |
     * | 2373 | Rejected-X73 |  | RCK Reject - Payer |  |
     *
     * @maps reason_code_id
     * @factory \FortisAPILib\Models\ReasonCodeIdEnum::checkValue
     */
    public function setReasonCodeId(?int $reasonCodeId): void
    {
        $this->reasonCodeId['value'] = $reasonCodeId;
    }

    /**
     * Unsets Reason Code Id.
     * Response reason code that provides more detail as to the result of the transaction. The reason code
     * list can be found here: Response Reason Codes
     * >0 - N/A
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1000 - CC - Approved / ACH - Accepted
     * >
     * >1001 - AuthCompleted
     * >
     * >1002 - Forced
     * >
     * >1003 - AuthOnly Declined
     * >
     * >1004 - Validation Failure (System Run Trx)
     * >
     * >1005 - Processor Response Invalid
     * >
     * >1200 - Voided
     * >
     * >1201 - Partial Approval
     * >
     * >1240 - Approved, optional fields are missing (Paya ACH only)
     * >
     * >1301 - Account Deactivated for Fraud
     * >
     * >1302-1399 - Reserved for Future Fraud Reason Codes
     * >
     * >1500 - Generic Decline
     * >
     * >1510 - Call
     * >
     * >1518 - Transaction Not Permitted - Terminal
     * >
     * >1520 - Pickup Card
     * >
     * >1530 - Retry Trx
     * >
     * >1531 - Communication Error
     * >
     * >1540 - Setup Issue, contact Support
     * >
     * >1541 - Device is not signature capable
     * >
     * >1588 - Data could not be de-tokenized
     * >
     * >1599 - Other Reason
     * >
     * >1601 - Generic Decline
     * >
     * >1602 - Call
     * >
     * >1603 - No Reply
     * >
     * >1604 - Pickup Card - No Fraud
     * >
     * >1605 - Pickup Card - Fraud
     * >
     * >1606 - Pickup Card - Lost
     * >
     * >1607 - Pickup Card - Stolen
     * >
     * >1608 - Account Error
     * >
     * >1609 - Already Reversed
     * >
     * >1610 - Bad PIN
     * >
     * >1611 - Cashback Exceeded
     * >
     * >1612 - Cashback Not Available
     * >
     * >1613 - CID Error
     * >
     * >1614 - Date Error
     * >
     * >1615 - Do Not Honor
     * >
     * >1616 - NSF
     * >
     * >1618 - Invalid Service Code
     * >
     * >1619 - Exceeded activity limit
     * >
     * >1620 - Violation
     * >
     * >1621 - Encryption Error
     * >
     * >1622 - Card Expired
     * >
     * >1623 - Renter
     * >
     * >1624 - Security Violation
     * >
     * >1625 - Card Not Permitted
     * >
     * >1626 - Trans Not Permitted
     * >
     * >1627 - System Error
     * >
     * >1628 - Bad Merchant ID
     * >
     * >1629 - Duplicate Batch (Already Closed)
     * >
     * >1630 - Batch Rejected
     * >
     * >1631 - Account Closed
     * >
     * >1632 - PIN tries exceeded
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1640 - Required fields are missing (ACH only)
     * >
     * >1641 - Previously declined transaction (1640)
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >
     * >1650 - Contact Support
     * >
     * >1651 - Max Sending - Throttle Limit Hit (ACH only)
     * >
     * >1652 - Max Attempts Exceeded
     * >
     * >1653 - Contact Support
     * >
     * >1654 - Voided - Online Reversal Failed
     * >
     * >1655 - Decline (AVS Auto Reversal)
     * >
     * >1656 - Decline (CVV Auto Reversal)
     * >
     * >1657 - Decline (Partial Auth Auto Reversal)
     * >
     * >1658 - Expired Authorization
     * >
     * >1659 - Declined - Partial Approval not Supported
     * >
     * >1660 - Bank Account Error, please delete and re-add Token
     * >
     * >1661 - Declined AuthIncrement
     * >
     * >1662 - Auto Reversal - Processor can't settle
     * >
     * >1663 - Manager Needed (Needs override transaction)
     * >
     * >1664 - Token Not Found: Sharing Group Unavailable
     * >
     * >1665 - Contact Not Found: Sharing Group Unavailable
     * >
     * >1666 - Amount Error
     * >
     * >1667 - Action Not Allowed in Current State
     * >
     * >1668 - Original Authorization Not Valid
     * >
     * >1701 - Chip Reject
     * >
     * >1800 - Incorrect CVV
     * >
     * >1801 - Duplicate Transaction
     * >
     * >1802 - MID/TID Not Registered
     * >
     * >1803 - Stop Recurring
     * >
     * >1804 - No Transactions in Batch
     * >
     * >1805 - Batch Does Not Exist
     * >
     * >
     * >
     * **ACH Reject Reason Codes**
     * | Code | E-Code | Verbiage | Short Description | Long Description |
     * | ----------- | ----------- | ----------- | ----------- | ----------- |
     * | 2101 | Rejected-R01 |  | Insufficient funds | Available balance is not sufficient to cover the
     * amount of the debit entry |
     * | 2102 | Rejected-R02  | E02 | Bank account closed | Previously active amount has been closed by the
     * customer of RDFI |
     * | 2103 | Rejected-R03 | E03 | No bank account/unable to locate account | Account number does not
     * correspond to the individual identified in the entry, or the account number designated is not an
     * open account |
     * | 2104 | Rejected-R04  | E04 | Invalid bank account number | Account number structure is not valid
     * |
     * | 2105 | Rejected-R05  | E05 | Reserved | Currently not in use |
     * | 2106 | Rejected-R06 |  | Returned per ODFI request | ODFI requested the RDFI to return the entry
     * |
     * | 2107 | Rejected-R07 | E07 | Authorization revoked by customer | Receiver has revoked authorization
     * |
     * | 2108 | Rejected-R08 | E08 | Payment stopped | Receiver of a recurring debit has stopped payment of
     * an entry |
     * | 2109 | Rejected-R09 |  | Uncollected funds | Collected funds are not sufficient for payment of the
     * debit entry |
     * | 2110 | Rejected-R10 | E10 | Customer Advises Originator is Not Known to Receiver and/or Is Not
     * Authorized by Receiver to Debit Receiver’s Account | Receiver has advised RDFI that originator is
     * not authorized to debit his bank account |
     * | 2111 | Rejected-R11 |  | Customer Advises Entry Not In Accordance with the Terms of the
     * Authorization | To be used when there is an error in the authorization |
     * | 2112 | Rejected-R12 |  | Branch sold to another RDFI | RDFI unable to post entry destined for a
     * bank account maintained at a branch sold to another financial institution |
     * | 2113 | Rejected-R13 |  | RDFI not qualified to participate | Financial institution does not
     * receive commercial ACH entries |
     * | 2114 | Rejected-R14 | E14 | Representative payee deceased or unable to continue in that capacity |
     * The representative payee authorized to accept entries on behalf of a beneficiary is either deceased
     * or unable to continue in that capacity |
     * | 2115 | Rejected-R15 | E15 | Beneficiary or bank account holder deceased | (Other than
     * representative payee) deceased* - (1) the beneficiary entitled to payments is deceased or (2) the
     * bank account holder other than a representative payee is deceased |
     * | 2116 | Rejected-R16 | E16 | Bank account frozen | Funds in bank account are unavailable due to
     * action by RDFI or legal order |
     * | 2117 | Rejected-R17 |  | File record edit criteria | Entry with Invalid Account Number Initiated
     * Under Questionable Circumstances |
     * | 2118 | Rejected-R18 |  | Improper effective entry date | Entries have been presented prior to the
     * first available processing window for the effective date. |
     * | 2119 | Rejected-R19 |  | Amount field error | Improper formatting of the amount field |
     * | 2120 | Rejected-R20 |  | Non-payment bank account | Entry destined for non-payment bank account
     * defined by reg. |
     * | 2121 | Rejected-R21 |  | Invalid company Identification | The company ID information not valid
     * (normally CIE entries) |
     * | 2122 | Rejected-R22 |  | Invalid individual ID number | Individual id used by receiver is
     * incorrect (CIE entries) |
     * | 2123 | Rejected-R23 |  | Credit entry refused by receiver | Receiver returned entry because
     * minimum or exact amount not remitted, bank account is subject to litigation, or payment represents
     * an overpayment, originator is not known to receiver or receiver has not authorized this credit entry
     * to this bank account |
     * | 2124 | Rejected-R24 |  | Duplicate entry | RDFI has received a duplicate entry |
     * | 2125 | Rejected-R25 |  | Addenda error | Improper formatting of the addenda record information |
     * | 2126 | Rejected-R26 |  | Mandatory field error | Improper information in one of the mandatory
     * fields |
     * | 2127 | Rejected-R27 |  | Trace number error | Original entry trace number is not valid for return
     * entry; or addenda trace numbers do not correspond with entry detail record |
     * | 2128 | Rejected-R28 |  | Transit routing number check digit error | Check digit for the transit
     * routing number is incorrect |
     * | 2129 | Rejected-R29 | E29 | Corporate customer advises not authorized | RDFI has been notified by
     * corporate receiver that debit entry of originator is not authorized |
     * | 2130 | Rejected-R30 |  | RDFI not participant in check truncation program | Financial institution
     * not participating in automated check safekeeping application |
     * | 2131 | Rejected-R31 |  | Permissible return entry (CCD and CTX only) | RDFI has been notified by
     * the ODFI that it agrees to accept a CCD or CTX return entry |
     * | 2132 | Rejected-R32 |  | RDFI non-settlement | RDFI is not able to settle the entry |
     * | 2133 | Rejected-R33 |  | Return of XCK entry | RDFI determines at its sole discretion to return an
     * XCK entry; an XCK return entry may be initiated by midnight of the sixtieth day following the
     * settlement date if the XCK entry |
     * | 2134 | Rejected-R34 |  | Limited participation RDFI | RDFI participation has been limited by a
     * federal or state supervisor |
     * | 2135 | Rejected-R35 |  | Return of improper debit entry | ACH debit not permitted for use with the
     * CIE standard entry class code (except for reversals) |
     * | 2136 | Rejected-R36 |  | Return of Improper Credit Entry |  |
     * | 2137 | Rejected-R37 |  | Source Document Presented for Payment |  |
     * | 2138 | Rejected-R38 |  | Stop Payment on Source Document |  |
     * | 2139 | Rejected-R39 |  | Improper Source Document |  |
     * | 2140 | Rejected-R40 |  | Return of ENR Entry by Federal Government Agency |  |
     * | 2141 | Rejected-R41 |  | Invalid Transaction Code |  |
     * | 2142 | Rejected-R42 |  | Routing Number/Check Digit Error |  |
     * | 2143 | Rejected-R43 |  | Invalid DFI Account Number |  |
     * | 2144 | Rejected-R44 |  | Invalid Individual ID Number/Identification |  |
     * | 2145 | Rejected-R45 |  | Invalid Individual Name/Company Name |  |
     * | 2146 | Rejected-R46 |  | Invalid Representative Payee Indicator |  |
     * | 2147 | Rejected-R47 |  | Duplicate Enrollment |  |
     * | 2150 | Rejected-R50 |  | State Law Affecting RCK Acceptance |  |
     * | 2151 | Rejected-R51 |  | Item is Ineligible, Notice Not Provided, etc. |  |
     * | 2152 | Rejected-R52 |  | Stop Payment on Item (adjustment entries) |  |
     * | 2153 | Rejected-R53 |  | Item and ACH Entry Presented for Payment |  |
     * | 2161 | Rejected-R61 |  | Misrouted Return |  |
     * | 2162 | Rejected-R62 |  | Incorrect Trace Number |  |
     * | 2163 | Rejected-R63 |  | Incorrect Dollar Amount |  |
     * | 2164 | Rejected-R64 |  | Incorrect Individual Identification |  |
     * | 2165 | Rejected-R65 |  | Incorrect Transaction Code |  |
     * | 2166 | Rejected-R66 |  | Incorrect Company Identification |  |
     * | 2167 | Rejected-R67 |  | Duplicate Return |  |
     * | 2168 | Rejected-R68 |  | Untimely Return |  |
     * | 2169 | Rejected-R69 |  | Multiple Errors |  |
     * | 2170 | Rejected-R70 |  | Permissible Return Entry Not Accepted |  |
     * | 2171 | Rejected-R71 |  | Misrouted Dishonored Return |  |
     * | 2172 | Rejected-R72 |  | Untimely Dishonored Return |  |
     * | 2173 | Rejected-R73 |  | Timely Original Return |  |
     * | 2174 | Rejected-R74 |  | Corrected Return |  |
     * | 2180 | Rejected-R80 |  | Cross-Border Payment Coding Error |  |
     * | 2181 | Rejected-R81 |  | Non-Participant in Cross-Border Program |  |
     * | 2182 | Rejected-R82 |  | Invalid Foreign Receiving DFI Identification |  |
     * | 2183 | Rejected-R83 |  | Foreign Receiving DFI Unable to Settle |  |
     * | 2200 | Voided |  | Processor Void | The transaction was voided by the processor before being sent
     * to the bank |
     * | 2201 | Rejected-C01 |  |  |  |
     * | 2202 | Rejected-C02 |  |  |  |
     * | 2203 | Rejected-C03 |  |  |  |
     * | 2204 | Rejected-C04 |  |  |  |
     * | 2205 | Rejected-C05 |  |  |  |
     * | 2206 | Rejected-C06 |  |  |  |
     * | 2207 | Rejected-C07 |  |  |  |
     * | 2208 | Rejected-C08 |  |  |  |
     * | 2209 | Rejected-C09 |  |  |  |
     * | 2210 | Rejected-C10 |  |  |  |
     * | 2211 | Rejected-C11 |  |  |  |
     * | 2212 | Rejected-C12 |  |  |  |
     * | 2213 | Rejected-C13 |  |  |  |
     * | 2261 | Rejected-C61 |  |  |  |
     * | 2262 | Rejected-C62 |  |  |  |
     * | 2263 | Rejected-C63 |  |  |  |
     * | 2264 | Rejected-C64 |  |  |  |
     * | 2265 | Rejected-C65 |  |  |  |
     * | 2266 | Rejected-C66 |  |  |  |
     * | 2267 | Rejected-C67 |  |  |  |
     * | 2268 | Rejected-C68 |  |  |  |
     * | 2269 | Rejected-C69 |  |  |  |
     * | 2301 | Rejected-X01 |  | Misc Check 21 Return |  |
     * | 2304 | Rejected-X04 |  | Invalid Image |  |
     * | 2305 | Rejected-X05 | E95 | Breach of Warranty |  |
     * | 2306 | Rejected-X06 | E96 | Counterfeit / Forgery |  |
     * | 2307 | Rejected-X07 | E97 | Refer to Maker |  |
     * | 2308 | Rejected-X08 |  | Maximum Payment Attempts |  |
     * | 2309 | Rejected-X09 |  | Item Cannot be Re-presented |  |
     * | 2310 | Rejected-X10 |  | Not Our Item |  |
     * | 2321 | Rejected-X21 |  | Pay None |  |
     * | 2322 | Rejected-X22 |  | Pay All |  |
     * | 2323 | Rejected-X23 | E93 | Non-Negotiable |  |
     * | 2329 | Rejected-X29 |  | Stale Dated |  |
     * | 2345 | Rejected-X45 |  | Misc Return |  |
     * | 2371 | Rejected-X71 |  | RCK - 2nd Time |  |
     * | 2372 | Rejected-X72 |  | RCK Reject - ACH |  |
     * | 2373 | Rejected-X73 |  | RCK Reject - Payer |  |
     */
    public function unsetReasonCodeId(): void
    {
        $this->reasonCodeId = [];
    }

    /**
     * Returns Recurring Id.
     * A unique identifer used to associate a transaction with a Recurring.
     */
    public function getRecurringId(): ?string
    {
        if (count($this->recurringId) == 0) {
            return null;
        }
        return $this->recurringId['value'];
    }

    /**
     * Sets Recurring Id.
     * A unique identifer used to associate a transaction with a Recurring.
     *
     * @maps recurring_id
     */
    public function setRecurringId(?string $recurringId): void
    {
        $this->recurringId['value'] = $recurringId;
    }

    /**
     * Unsets Recurring Id.
     * A unique identifer used to associate a transaction with a Recurring.
     */
    public function unsetRecurringId(): void
    {
        $this->recurringId = [];
    }

    /**
     * Returns Settle Date.
     * Settle date
     */
    public function getSettleDate(): ?string
    {
        if (count($this->settleDate) == 0) {
            return null;
        }
        return $this->settleDate['value'];
    }

    /**
     * Sets Settle Date.
     * Settle date
     *
     * @maps settle_date
     */
    public function setSettleDate(?string $settleDate): void
    {
        $this->settleDate['value'] = $settleDate;
    }

    /**
     * Unsets Settle Date.
     * Settle date
     */
    public function unsetSettleDate(): void
    {
        $this->settleDate = [];
    }

    /**
     * Returns Status Code.
     * Status ID - See status id section for more detail
     * >101 - Sale cc Approved
     * >
     * >102 - Sale cc AuthOnly
     * >
     * >111 - Refund cc Refunded
     * >
     * >121 - Credit/Debit/Refund cc AvsOnly
     * >
     * >131 - Credit/Debit/Refund ach Pending Origination
     * >
     * >132 - Credit/Debit/Refund ach Originating
     * >
     * >133 - Credit/Debit/Refund ach Originated
     * >
     * >134 - Credit/Debit/Refund ach Settled
     * >
     * >191 - Settled (depracated - batches are now settled on the /v2/transactionbatches endpoint)
     * >
     * >201 - All cc/ach Voided
     * >
     * >301 - All cc/ach Declined
     * >
     * >331 - Credit/Debit/Refund ach Charged Back
     * >
     */
    public function getStatusCode(): ?int
    {
        if (count($this->statusCode) == 0) {
            return null;
        }
        return $this->statusCode['value'];
    }

    /**
     * Sets Status Code.
     * Status ID - See status id section for more detail
     * >101 - Sale cc Approved
     * >
     * >102 - Sale cc AuthOnly
     * >
     * >111 - Refund cc Refunded
     * >
     * >121 - Credit/Debit/Refund cc AvsOnly
     * >
     * >131 - Credit/Debit/Refund ach Pending Origination
     * >
     * >132 - Credit/Debit/Refund ach Originating
     * >
     * >133 - Credit/Debit/Refund ach Originated
     * >
     * >134 - Credit/Debit/Refund ach Settled
     * >
     * >191 - Settled (depracated - batches are now settled on the /v2/transactionbatches endpoint)
     * >
     * >201 - All cc/ach Voided
     * >
     * >301 - All cc/ach Declined
     * >
     * >331 - Credit/Debit/Refund ach Charged Back
     * >
     *
     * @maps status_code
     * @factory \FortisAPILib\Models\StatusCode3Enum::checkValue
     */
    public function setStatusCode(?int $statusCode): void
    {
        $this->statusCode['value'] = $statusCode;
    }

    /**
     * Unsets Status Code.
     * Status ID - See status id section for more detail
     * >101 - Sale cc Approved
     * >
     * >102 - Sale cc AuthOnly
     * >
     * >111 - Refund cc Refunded
     * >
     * >121 - Credit/Debit/Refund cc AvsOnly
     * >
     * >131 - Credit/Debit/Refund ach Pending Origination
     * >
     * >132 - Credit/Debit/Refund ach Originating
     * >
     * >133 - Credit/Debit/Refund ach Originated
     * >
     * >134 - Credit/Debit/Refund ach Settled
     * >
     * >191 - Settled (depracated - batches are now settled on the /v2/transactionbatches endpoint)
     * >
     * >201 - All cc/ach Voided
     * >
     * >301 - All cc/ach Declined
     * >
     * >331 - Credit/Debit/Refund ach Charged Back
     * >
     */
    public function unsetStatusCode(): void
    {
        $this->statusCode = [];
    }

    /**
     * Returns Transaction Batch Id.
     * For cc transactions, this is the id of the batch the transaction belongs to (not to be confused with
     * batch number). This will be null for transactions that do not settle (void and authonly).
     */
    public function getTransactionBatchId(): ?string
    {
        if (count($this->transactionBatchId) == 0) {
            return null;
        }
        return $this->transactionBatchId['value'];
    }

    /**
     * Sets Transaction Batch Id.
     * For cc transactions, this is the id of the batch the transaction belongs to (not to be confused with
     * batch number). This will be null for transactions that do not settle (void and authonly).
     *
     * @maps transaction_batch_id
     */
    public function setTransactionBatchId(?string $transactionBatchId): void
    {
        $this->transactionBatchId['value'] = $transactionBatchId;
    }

    /**
     * Unsets Transaction Batch Id.
     * For cc transactions, this is the id of the batch the transaction belongs to (not to be confused with
     * batch number). This will be null for transactions that do not settle (void and authonly).
     */
    public function unsetTransactionBatchId(): void
    {
        $this->transactionBatchId = [];
    }

    /**
     * Returns Type Id.
     * Type ID - See type id section for more detail
     */
    public function getTypeId(): ?int
    {
        if (count($this->typeId) == 0) {
            return null;
        }
        return $this->typeId['value'];
    }

    /**
     * Sets Type Id.
     * Type ID - See type id section for more detail
     *
     * @maps type_id
     * @factory \FortisAPILib\Models\TypeIdEnum::checkValue
     */
    public function setTypeId(?int $typeId): void
    {
        $this->typeId['value'] = $typeId;
    }

    /**
     * Unsets Type Id.
     * Type ID - See type id section for more detail
     */
    public function unsetTypeId(): void
    {
        $this->typeId = [];
    }

    /**
     * Returns Verbiage.
     * Verbiage -Do not use verbiage to see if the transaction was approved, use status_id
     */
    public function getVerbiage(): ?string
    {
        if (count($this->verbiage) == 0) {
            return null;
        }
        return $this->verbiage['value'];
    }

    /**
     * Sets Verbiage.
     * Verbiage -Do not use verbiage to see if the transaction was approved, use status_id
     *
     * @maps verbiage
     */
    public function setVerbiage(?string $verbiage): void
    {
        $this->verbiage['value'] = $verbiage;
    }

    /**
     * Unsets Verbiage.
     * Verbiage -Do not use verbiage to see if the transaction was approved, use status_id
     */
    public function unsetVerbiage(): void
    {
        $this->verbiage = [];
    }

    /**
     * Returns Void Date.
     * void date
     */
    public function getVoidDate(): ?string
    {
        if (count($this->voidDate) == 0) {
            return null;
        }
        return $this->voidDate['value'];
    }

    /**
     * Sets Void Date.
     * void date
     *
     * @maps void_date
     */
    public function setVoidDate(?string $voidDate): void
    {
        $this->voidDate['value'] = $voidDate;
    }

    /**
     * Unsets Void Date.
     * void date
     */
    public function unsetVoidDate(): void
    {
        $this->voidDate = [];
    }

    /**
     * Returns Batch.
     * Batch
     */
    public function getBatch(): ?string
    {
        if (count($this->batch) == 0) {
            return null;
        }
        return $this->batch['value'];
    }

    /**
     * Sets Batch.
     * Batch
     *
     * @maps batch
     */
    public function setBatch(?string $batch): void
    {
        $this->batch['value'] = $batch;
    }

    /**
     * Unsets Batch.
     * Batch
     */
    public function unsetBatch(): void
    {
        $this->batch = [];
    }

    /**
     * Returns Terms Agree.
     * Terms Agreement
     */
    public function getTermsAgree(): ?bool
    {
        return $this->termsAgree;
    }

    /**
     * Sets Terms Agree.
     * Terms Agreement
     *
     * @maps terms_agree
     */
    public function setTermsAgree(?bool $termsAgree): void
    {
        $this->termsAgree = $termsAgree;
    }

    /**
     * Returns Response Message.
     * Response Message
     */
    public function getResponseMessage(): ?string
    {
        if (count($this->responseMessage) == 0) {
            return null;
        }
        return $this->responseMessage['value'];
    }

    /**
     * Sets Response Message.
     * Response Message
     *
     * @maps response_message
     */
    public function setResponseMessage(?string $responseMessage): void
    {
        $this->responseMessage['value'] = $responseMessage;
    }

    /**
     * Unsets Response Message.
     * Response Message
     */
    public function unsetResponseMessage(): void
    {
        $this->responseMessage = [];
    }

    /**
     * Returns Return Date.
     * Return Date
     */
    public function getReturnDate(): ?string
    {
        if (count($this->returnDate) == 0) {
            return null;
        }
        return $this->returnDate['value'];
    }

    /**
     * Sets Return Date.
     * Return Date
     *
     * @maps return_date
     */
    public function setReturnDate(?string $returnDate): void
    {
        $this->returnDate['value'] = $returnDate;
    }

    /**
     * Unsets Return Date.
     * Return Date
     */
    public function unsetReturnDate(): void
    {
        $this->returnDate = [];
    }

    /**
     * Returns Trx Source Id.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     */
    public function getTrxSourceId(): ?int
    {
        if (count($this->trxSourceId) == 0) {
            return null;
        }
        return $this->trxSourceId['value'];
    }

    /**
     * Sets Trx Source Id.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     *
     * @maps trx_source_id
     * @factory \FortisAPILib\Models\TrxSourceIdEnum::checkValue
     */
    public function setTrxSourceId(?int $trxSourceId): void
    {
        $this->trxSourceId['value'] = $trxSourceId;
    }

    /**
     * Unsets Trx Source Id.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     */
    public function unsetTrxSourceId(): void
    {
        $this->trxSourceId = [];
    }

    /**
     * Returns Routing Number.
     * This field is read only for ach on transactions. Must be supplied if account_vault_id is not
     * provided.
     */
    public function getRoutingNumber(): ?string
    {
        if (count($this->routingNumber) == 0) {
            return null;
        }
        return $this->routingNumber['value'];
    }

    /**
     * Sets Routing Number.
     * This field is read only for ach on transactions. Must be supplied if account_vault_id is not
     * provided.
     *
     * @maps routing_number
     */
    public function setRoutingNumber(?string $routingNumber): void
    {
        $this->routingNumber['value'] = $routingNumber;
    }

    /**
     * Unsets Routing Number.
     * This field is read only for ach on transactions. Must be supplied if account_vault_id is not
     * provided.
     */
    public function unsetRoutingNumber(): void
    {
        $this->routingNumber = [];
    }

    /**
     * Returns Trx Source Code.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     */
    public function getTrxSourceCode(): ?int
    {
        if (count($this->trxSourceCode) == 0) {
            return null;
        }
        return $this->trxSourceCode['value'];
    }

    /**
     * Sets Trx Source Code.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     *
     * @maps trx_source_code
     * @factory \FortisAPILib\Models\TrxSourceCodeEnum::checkValue
     */
    public function setTrxSourceCode(?int $trxSourceCode): void
    {
        $this->trxSourceCode['value'] = $trxSourceCode;
    }

    /**
     * Unsets Trx Source Code.
     * How the transaction was obtained by the API.
     * >1 - Unknown - The origination of this transaction could not be determined.
     * >
     * >2 - Mobile - The origination of this transaction is through the mobile application. This is always
     * a merchant submitted payment.
     * >
     * >3 - Web - The origination of this transaction is through a web browser. This is always a merchant
     * submitted payment. Examples include Virtual Terminal, Contact Charge, and Transaction Details - Run
     * Again pages.
     * >
     * >4 - IVR Transaction - The origination of this transaction is over the phone. This payment is
     * submitted by an automated system initiated by the cardholder.
     * >
     * >5 - Contact Statement - The orignation of this transaction is through a Vericle statement.
     * >
     * >6 - Contact Payment Mobile - The origination of this transaction is through the mobile application.
     * This is always submitted by a contact user.
     * >
     * >7 - Contact Payment - The origination of this transaction is through a web browser. This is always
     * submitted by a contact user.
     * >
     * >8 - Quick Invoice - The orignation of this transaction is through a Quick Invoice. This is
     * typically submitted by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >9 - Payform - The origination of this transaction is through a Payform. This is typically a
     * merchant submitted transaction, and is always from an internal developer.
     * >
     * >10 - Hosted Payment Page - The orignation of this transaction is through a Hosted Payment Page.
     * This is typically a cardholder submitted transaction.
     * >
     * >11 - Emulator -  The origination of this transaction is through Auth.Net emulator. This is
     * typically submitted through an integration to a website or a shopping cart.
     * >
     * >12 - Integration - The orignation of this transaction is through an integrated solution. This will
     * always be from an external developer.
     * >
     * >13 - Recurring Billing - The orignation of this transaction is through a scheduled recurring
     * payment. This payment is system-initiated based on a payment schedule that has been configured.
     * >
     * >14 - Recurring Secondary - This feature has not been implented yet.
     * >
     * >15 - Declined Recurring Email - The orignation of this transaction is through the email
     * notification sent when a recurring payment has been declined. This is typically submitted by a
     * cardholder.
     * >
     * >16 - Paylink - The orignation of this transaction is through a Paylink. This is typically submitted
     * by a contact user, however the transaction can also be submitted by a merchant.
     * >
     * >17 - Elements - The origination of this transaction is through the Elements payments page. This can
     * be a cardholder submitted or a merchant submitted transaction.
     * >
     * >18 - ACH Import - The origination of this transaction is through an ACH file import. This is a
     * merchant initiated process.
     * >
     */
    public function unsetTrxSourceCode(): void
    {
        $this->trxSourceCode = [];
    }

    /**
     * Returns Paylink Id.
     * Paylink Id
     */
    public function getPaylinkId(): ?string
    {
        if (count($this->paylinkId) == 0) {
            return null;
        }
        return $this->paylinkId['value'];
    }

    /**
     * Sets Paylink Id.
     * Paylink Id
     *
     * @maps paylink_id
     */
    public function setPaylinkId(?string $paylinkId): void
    {
        $this->paylinkId['value'] = $paylinkId;
    }

    /**
     * Unsets Paylink Id.
     * Paylink Id
     */
    public function unsetPaylinkId(): void
    {
        $this->paylinkId = [];
    }

    /**
     * Returns Currency Code.
     * Currency Code
     */
    public function getCurrencyCode(): ?float
    {
        if (count($this->currencyCode) == 0) {
            return null;
        }
        return $this->currencyCode['value'];
    }

    /**
     * Sets Currency Code.
     * Currency Code
     *
     * @maps currency_code
     */
    public function setCurrencyCode(?float $currencyCode): void
    {
        $this->currencyCode['value'] = $currencyCode;
    }

    /**
     * Unsets Currency Code.
     * Currency Code
     */
    public function unsetCurrencyCode(): void
    {
        $this->currencyCode = [];
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->additionalAmounts)) {
            $json['additional_amounts']                   = $this->additionalAmounts;
        }
        if (isset($this->billingAddress)) {
            $json['billing_address']                      = $this->billingAddress;
        }
        if (!empty($this->checkinDate)) {
            $json['checkin_date']                         = $this->checkinDate['value'];
        }
        if (!empty($this->checkoutDate)) {
            $json['checkout_date']                        = $this->checkoutDate['value'];
        }
        if (!empty($this->clerkNumber)) {
            $json['clerk_number']                         = $this->clerkNumber['value'];
        }
        if (!empty($this->contactApiId)) {
            $json['contact_api_id']                       = $this->contactApiId['value'];
        }
        if (!empty($this->contactId)) {
            $json['contact_id']                           = $this->contactId['value'];
        }
        if (isset($this->customData)) {
            $json['custom_data']                          = $this->customData;
        }
        if (!empty($this->customerId)) {
            $json['customer_id']                          = $this->customerId['value'];
        }
        if (!empty($this->description)) {
            $json['description']                          = $this->description['value'];
        }
        if (isset($this->identityVerification)) {
            $json['identity_verification']                = $this->identityVerification;
        }
        if (!empty($this->iiasInd)) {
            $json['iias_ind']                             = IiasIndEnum::checkValue($this->iiasInd['value']);
        }
        if (!empty($this->imageFront)) {
            $json['image_front']                          = $this->imageFront['value'];
        }
        if (!empty($this->imageBack)) {
            $json['image_back']                           = $this->imageBack['value'];
        }
        if (isset($this->installment)) {
            $json['installment']                          = $this->installment;
        }
        if (!empty($this->installmentNumber)) {
            $json['installment_number']                   = $this->installmentNumber['value'];
        }
        if (!empty($this->installmentCount)) {
            $json['installment_count']                    = $this->installmentCount['value'];
        }
        if (!empty($this->locationApiId)) {
            $json['location_api_id']                      = $this->locationApiId['value'];
        }
        if (!empty($this->locationId)) {
            $json['location_id']                          = $this->locationId['value'];
        }
        if (!empty($this->productTransactionId)) {
            $json['product_transaction_id']               = $this->productTransactionId['value'];
        }
        if (isset($this->advanceDeposit)) {
            $json['advance_deposit']                      = $this->advanceDeposit;
        }
        if (isset($this->noShow)) {
            $json['no_show']                              = $this->noShow;
        }
        if (!empty($this->notificationEmailAddress)) {
            $json['notification_email_address']           = $this->notificationEmailAddress['value'];
        }
        if (!empty($this->orderNumber)) {
            $json['order_number']                         = $this->orderNumber['value'];
        }
        if (!empty($this->poNumber)) {
            $json['po_number']                            = $this->poNumber['value'];
        }
        if (!empty($this->quickInvoiceId)) {
            $json['quick_invoice_id']                     = $this->quickInvoiceId['value'];
        }
        if (isset($this->recurring)) {
            $json['recurring']                            = $this->recurring;
        }
        if (!empty($this->recurringNumber)) {
            $json['recurring_number']                     = $this->recurringNumber['value'];
        }
        if (!empty($this->roomNum)) {
            $json['room_num']                             = $this->roomNum['value'];
        }
        if (!empty($this->roomRate)) {
            $json['room_rate']                            = $this->roomRate['value'];
        }
        if (isset($this->saveAccount)) {
            $json['save_account']                         = $this->saveAccount;
        }
        if (!empty($this->saveAccountTitle)) {
            $json['save_account_title']                   = $this->saveAccountTitle['value'];
        }
        if (!empty($this->subtotalAmount)) {
            $json['subtotal_amount']                      = $this->subtotalAmount['value'];
        }
        if (!empty($this->surchargeAmount)) {
            $json['surcharge_amount']                     = $this->surchargeAmount['value'];
        }
        if (isset($this->tags)) {
            $json['tags']                                 = $this->tags;
        }
        if (!empty($this->tax)) {
            $json['tax']                                  = $this->tax['value'];
        }
        if (!empty($this->tipAmount)) {
            $json['tip_amount']                           = $this->tipAmount['value'];
        }
        if (!empty($this->transactionAmount)) {
            $json['transaction_amount']                   = $this->transactionAmount['value'];
        }
        if (!empty($this->secondaryAmount)) {
            $json['secondary_amount']                     = $this->secondaryAmount['value'];
        }
        if (!empty($this->transactionApiId)) {
            $json['transaction_api_id']                   = $this->transactionApiId['value'];
        }
        if (!empty($this->transactionC1)) {
            $json['transaction_c1']                       = $this->transactionC1['value'];
        }
        if (!empty($this->transactionC2)) {
            $json['transaction_c2']                       = $this->transactionC2['value'];
        }
        if (!empty($this->transactionC3)) {
            $json['transaction_c3']                       = $this->transactionC3['value'];
        }
        if (isset($this->bankFundedOnlyOverride)) {
            $json['bank_funded_only_override']            = $this->bankFundedOnlyOverride;
        }
        if (isset($this->allowPartialAuthorizationOverride)) {
            $json['allow_partial_authorization_override'] = $this->allowPartialAuthorizationOverride;
        }
        if (isset($this->autoDeclineCvvOverride)) {
            $json['auto_decline_cvv_override']            = $this->autoDeclineCvvOverride;
        }
        if (isset($this->autoDeclineStreetOverride)) {
            $json['auto_decline_street_override']         = $this->autoDeclineStreetOverride;
        }
        if (isset($this->autoDeclineZipOverride)) {
            $json['auto_decline_zip_override']            = $this->autoDeclineZipOverride;
        }
        $json['id']                                       = $this->id;
        $json['created_ts']                               = $this->createdTs;
        $json['modified_ts']                              = $this->modifiedTs;
        if (!empty($this->terminalId)) {
            $json['terminal_id']                          = $this->terminalId['value'];
        }
        if (!empty($this->accountHolderName)) {
            $json['account_holder_name']                  = $this->accountHolderName['value'];
        }
        if (!empty($this->accountType)) {
            $json['account_type']                         = $this->accountType['value'];
        }
        if (!empty($this->tokenApiId)) {
            $json['token_api_id']                         = $this->tokenApiId['value'];
        }
        if (!empty($this->tokenId)) {
            $json['token_id']                             = $this->tokenId['value'];
        }
        if (!empty($this->achIdentifier)) {
            $json['ach_identifier']                       = $this->achIdentifier['value'];
        }
        if (!empty($this->achSecCode)) {
            $json['ach_sec_code']                         = AchSecCode1Enum::checkValue($this->achSecCode['value']);
        }
        if (!empty($this->authAmount)) {
            $json['auth_amount']                          = $this->authAmount['value'];
        }
        if (!empty($this->authCode)) {
            $json['auth_code']                            = $this->authCode['value'];
        }
        if (!empty($this->avs)) {
            $json['avs']                                  = AvsEnum::checkValue($this->avs['value']);
        }
        if (!empty($this->avsEnhanced)) {
            $json['avs_enhanced']                         = $this->avsEnhanced['value'];
        }
        if (isset($this->cardholderPresent)) {
            $json['cardholder_present']                   = $this->cardholderPresent;
        }
        if (isset($this->cardPresent)) {
            $json['card_present']                         = $this->cardPresent;
        }
        if (!empty($this->checkNumber)) {
            $json['check_number']                         = $this->checkNumber['value'];
        }
        if (!empty($this->customerIp)) {
            $json['customer_ip']                          = $this->customerIp['value'];
        }
        if (!empty($this->cvvResponse)) {
            $json['cvv_response']                         = $this->cvvResponse['value'];
        }
        if (!empty($this->entryModeId)) {
            $json['entry_mode_id']                        = EntryModeIdEnum::checkValue($this->entryModeId['value']);
        }
        if (isset($this->emvReceiptData)) {
            $json['emv_receipt_data']                     = $this->emvReceiptData;
        }
        if (!empty($this->firstSix)) {
            $json['first_six']                            = $this->firstSix['value'];
        }
        if (!empty($this->lastFour)) {
            $json['last_four']                            = $this->lastFour['value'];
        }
        $json['payment_method']                           = PaymentMethod3Enum::checkValue($this->paymentMethod);
        if (!empty($this->terminalSerialNumber)) {
            $json['terminal_serial_number']               = $this->terminalSerialNumber['value'];
        }
        if (!empty($this->transactionSettlementStatus)) {
            $json['transaction_settlement_status']        = $this->transactionSettlementStatus['value'];
        }
        if (!empty($this->chargeBackDate)) {
            $json['charge_back_date']                     = $this->chargeBackDate['value'];
        }
        if (isset($this->isRecurring)) {
            $json['is_recurring']                         = $this->isRecurring;
        }
        if (!empty($this->notificationEmailSent)) {
            $json['notification_email_sent']              = $this->notificationEmailSent['value'];
        }
        if (!empty($this->par)) {
            $json['par']                                  = $this->par['value'];
        }
        if (!empty($this->reasonCodeId)) {
            $json['reason_code_id']                       = ReasonCodeIdEnum::checkValue($this->reasonCodeId['value']);
        }
        if (!empty($this->recurringId)) {
            $json['recurring_id']                         = $this->recurringId['value'];
        }
        if (!empty($this->settleDate)) {
            $json['settle_date']                          = $this->settleDate['value'];
        }
        if (!empty($this->statusCode)) {
            $json['status_code']                          = StatusCode3Enum::checkValue($this->statusCode['value']);
        }
        if (!empty($this->transactionBatchId)) {
            $json['transaction_batch_id']                 = $this->transactionBatchId['value'];
        }
        if (!empty($this->typeId)) {
            $json['type_id']                              = TypeIdEnum::checkValue($this->typeId['value']);
        }
        if (!empty($this->verbiage)) {
            $json['verbiage']                             = $this->verbiage['value'];
        }
        if (!empty($this->voidDate)) {
            $json['void_date']                            = $this->voidDate['value'];
        }
        if (!empty($this->batch)) {
            $json['batch']                                = $this->batch['value'];
        }
        if (isset($this->termsAgree)) {
            $json['terms_agree']                          = $this->termsAgree;
        }
        if (!empty($this->responseMessage)) {
            $json['response_message']                     = $this->responseMessage['value'];
        }
        if (!empty($this->returnDate)) {
            $json['return_date']                          = $this->returnDate['value'];
        }
        if (!empty($this->trxSourceId)) {
            $json['trx_source_id']                        = TrxSourceIdEnum::checkValue($this->trxSourceId['value']);
        }
        if (!empty($this->routingNumber)) {
            $json['routing_number']                       = $this->routingNumber['value'];
        }
        if (!empty($this->trxSourceCode)) {
            $json['trx_source_code']                      =
                TrxSourceCodeEnum::checkValue(
                    $this->trxSourceCode['value']
                );
        }
        if (!empty($this->paylinkId)) {
            $json['paylink_id']                           = $this->paylinkId['value'];
        }
        if (!empty($this->currencyCode)) {
            $json['currency_code']                        = $this->currencyCode['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
