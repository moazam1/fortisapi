<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use stdClass;

class V1TransactionsRefundRequest implements \JsonSerializable
{
    /**
     * @var AdditionalAmount[]|null
     */
    private $additionalAmounts;

    /**
     * @var BillingAddress|null
     */
    private $billingAddress;

    /**
     * @var array
     */
    private $checkinDate = [];

    /**
     * @var array
     */
    private $checkoutDate = [];

    /**
     * @var array
     */
    private $clerkNumber = [];

    /**
     * @var array
     */
    private $contactApiId = [];

    /**
     * @var array
     */
    private $contactId = [];

    /**
     * @var array|null
     */
    private $customData;

    /**
     * @var array
     */
    private $customerId = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * @var IdentityVerification|null
     */
    private $identityVerification;

    /**
     * @var array
     */
    private $iiasInd = [];

    /**
     * @var array
     */
    private $imageFront = [];

    /**
     * @var array
     */
    private $imageBack = [];

    /**
     * @var bool|null
     */
    private $installment;

    /**
     * @var array
     */
    private $installmentNumber = [];

    /**
     * @var array
     */
    private $installmentCount = [];

    /**
     * @var array
     */
    private $locationApiId = [];

    /**
     * @var array
     */
    private $locationId = [];

    /**
     * @var array
     */
    private $productTransactionId = [];

    /**
     * @var bool|null
     */
    private $advanceDeposit;

    /**
     * @var bool|null
     */
    private $noShow;

    /**
     * @var array
     */
    private $notificationEmailAddress = [];

    /**
     * @var array
     */
    private $orderNumber = [];

    /**
     * @var array
     */
    private $poNumber = [];

    /**
     * @var array
     */
    private $quickInvoiceId = [];

    /**
     * @var bool|null
     */
    private $recurring;

    /**
     * @var array
     */
    private $recurringNumber = [];

    /**
     * @var array
     */
    private $roomNum = [];

    /**
     * @var array
     */
    private $roomRate = [];

    /**
     * @var bool|null
     */
    private $saveAccount;

    /**
     * @var array
     */
    private $saveAccountTitle = [];

    /**
     * @var array
     */
    private $subtotalAmount = [];

    /**
     * @var array
     */
    private $surchargeAmount = [];

    /**
     * @var string[]|null
     */
    private $tags;

    /**
     * @var array
     */
    private $tax = [];

    /**
     * @var array
     */
    private $tipAmount = [];

    /**
     * @var int
     */
    private $transactionAmount;

    /**
     * @var array
     */
    private $secondaryAmount = [];

    /**
     * @var array
     */
    private $transactionApiId = [];

    /**
     * @var array
     */
    private $transactionC1 = [];

    /**
     * @var array
     */
    private $transactionC2 = [];

    /**
     * @var array
     */
    private $transactionC3 = [];

    /**
     * @var bool|null
     */
    private $bankFundedOnlyOverride;

    /**
     * @var bool|null
     */
    private $allowPartialAuthorizationOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineCvvOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineStreetOverride;

    /**
     * @var bool|null
     */
    private $autoDeclineZipOverride;

    /**
     * @param int $transactionAmount
     */
    public function __construct(int $transactionAmount)
    {
        $this->transactionAmount = $transactionAmount;
    }

    /**
     * Returns Additional Amounts.
     * Additional amounts
     *
     * @return AdditionalAmount[]|null
     */
    public function getAdditionalAmounts(): ?array
    {
        return $this->additionalAmounts;
    }

    /**
     * Sets Additional Amounts.
     * Additional amounts
     *
     * @maps additional_amounts
     *
     * @param AdditionalAmount[]|null $additionalAmounts
     */
    public function setAdditionalAmounts(?array $additionalAmounts): void
    {
        $this->additionalAmounts = $additionalAmounts;
    }

    /**
     * Returns Billing Address.
     * Billing Address Object
     */
    public function getBillingAddress(): ?BillingAddress
    {
        return $this->billingAddress;
    }

    /**
     * Sets Billing Address.
     * Billing Address Object
     *
     * @maps billing_address
     */
    public function setBillingAddress(?BillingAddress $billingAddress): void
    {
        $this->billingAddress = $billingAddress;
    }

    /**
     * Returns Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     */
    public function getCheckinDate(): ?string
    {
        if (count($this->checkinDate) == 0) {
            return null;
        }
        return $this->checkinDate['value'];
    }

    /**
     * Sets Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     *
     * @maps checkin_date
     */
    public function setCheckinDate(?string $checkinDate): void
    {
        $this->checkinDate['value'] = $checkinDate;
    }

    /**
     * Unsets Checkin Date.
     * Checkin Date - The time difference between checkin_date and checkout_date must be less than or equal
     * to 99 days.
     */
    public function unsetCheckinDate(): void
    {
        $this->checkinDate = [];
    }

    /**
     * Returns Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     */
    public function getCheckoutDate(): ?string
    {
        if (count($this->checkoutDate) == 0) {
            return null;
        }
        return $this->checkoutDate['value'];
    }

    /**
     * Sets Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     *
     * @maps checkout_date
     */
    public function setCheckoutDate(?string $checkoutDate): void
    {
        $this->checkoutDate['value'] = $checkoutDate;
    }

    /**
     * Unsets Checkout Date.
     * Checkout Date - The time difference between checkin_date and checkout_date must be less than or
     * equal to 99 days.
     */
    public function unsetCheckoutDate(): void
    {
        $this->checkoutDate = [];
    }

    /**
     * Returns Clerk Number.
     * Clerk or Employee Identifier
     */
    public function getClerkNumber(): ?string
    {
        if (count($this->clerkNumber) == 0) {
            return null;
        }
        return $this->clerkNumber['value'];
    }

    /**
     * Sets Clerk Number.
     * Clerk or Employee Identifier
     *
     * @maps clerk_number
     */
    public function setClerkNumber(?string $clerkNumber): void
    {
        $this->clerkNumber['value'] = $clerkNumber;
    }

    /**
     * Unsets Clerk Number.
     * Clerk or Employee Identifier
     */
    public function unsetClerkNumber(): void
    {
        $this->clerkNumber = [];
    }

    /**
     * Returns Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     */
    public function getContactApiId(): ?string
    {
        if (count($this->contactApiId) == 0) {
            return null;
        }
        return $this->contactApiId['value'];
    }

    /**
     * Sets Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     *
     * @maps contact_api_id
     */
    public function setContactApiId(?string $contactApiId): void
    {
        $this->contactApiId['value'] = $contactApiId;
    }

    /**
     * Unsets Contact Api Id.
     * This can be supplied in place of contact_id if you would like to use a contact for the transaction
     * and are using your own custom api_id's to track contacts in the system.
     */
    public function unsetContactApiId(): void
    {
        $this->contactApiId = [];
    }

    /**
     * Returns Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     */
    public function getContactId(): ?string
    {
        if (count($this->contactId) == 0) {
            return null;
        }
        return $this->contactId['value'];
    }

    /**
     * Sets Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     *
     * @maps contact_id
     */
    public function setContactId(?string $contactId): void
    {
        $this->contactId['value'] = $contactId;
    }

    /**
     * Unsets Contact Id.
     * If contact_id is provided, ensure it belongs to the same location as the transaction. You cannot
     * move transaction across locations.
     */
    public function unsetContactId(): void
    {
        $this->contactId = [];
    }

    /**
     * Returns Custom Data.
     * A field that allows custom JSON to be entered to store extra data.
     */
    public function getCustomData(): ?array
    {
        return $this->customData;
    }

    /**
     * Sets Custom Data.
     * A field that allows custom JSON to be entered to store extra data.
     *
     * @maps custom_data
     */
    public function setCustomData(?array $customData): void
    {
        $this->customData = $customData;
    }

    /**
     * Returns Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     */
    public function getCustomerId(): ?string
    {
        if (count($this->customerId) == 0) {
            return null;
        }
        return $this->customerId['value'];
    }

    /**
     * Sets Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     *
     * @maps customer_id
     */
    public function setCustomerId(?string $customerId): void
    {
        $this->customerId['value'] = $customerId;
    }

    /**
     * Unsets Customer Id.
     * Can be used by Merchants to identify Contacts in our system by an ID from another system.
     */
    public function unsetCustomerId(): void
    {
        $this->customerId = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Returns Identity Verification.
     * Identity Verification
     */
    public function getIdentityVerification(): ?IdentityVerification
    {
        return $this->identityVerification;
    }

    /**
     * Sets Identity Verification.
     * Identity Verification
     *
     * @maps identity_verification
     */
    public function setIdentityVerification(?IdentityVerification $identityVerification): void
    {
        $this->identityVerification = $identityVerification;
    }

    /**
     * Returns Iias Ind.
     * Possible values are '0', '1','2'
     */
    public function getIiasInd(): ?int
    {
        if (count($this->iiasInd) == 0) {
            return null;
        }
        return $this->iiasInd['value'];
    }

    /**
     * Sets Iias Ind.
     * Possible values are '0', '1','2'
     *
     * @maps iias_ind
     * @factory \FortisAPILib\Models\IiasIndEnum::checkValue
     */
    public function setIiasInd(?int $iiasInd): void
    {
        $this->iiasInd['value'] = $iiasInd;
    }

    /**
     * Unsets Iias Ind.
     * Possible values are '0', '1','2'
     */
    public function unsetIiasInd(): void
    {
        $this->iiasInd = [];
    }

    /**
     * Returns Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function getImageFront(): ?string
    {
        if (count($this->imageFront) == 0) {
            return null;
        }
        return $this->imageFront['value'];
    }

    /**
     * Sets Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     *
     * @maps image_front
     */
    public function setImageFront(?string $imageFront): void
    {
        $this->imageFront['value'] = $imageFront;
    }

    /**
     * Unsets Image Front.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function unsetImageFront(): void
    {
        $this->imageFront = [];
    }

    /**
     * Returns Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function getImageBack(): ?string
    {
        if (count($this->imageBack) == 0) {
            return null;
        }
        return $this->imageBack['value'];
    }

    /**
     * Sets Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     *
     * @maps image_back
     */
    public function setImageBack(?string $imageBack): void
    {
        $this->imageBack['value'] = $imageBack;
    }

    /**
     * Unsets Image Back.
     * A base64 encoded string for the image.  Used with Check21 ACH transactions.
     */
    public function unsetImageBack(): void
    {
        $this->imageBack = [];
    }

    /**
     * Returns Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     */
    public function getInstallment(): ?bool
    {
        return $this->installment;
    }

    /**
     * Sets Installment.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is a
     * fixed installment plan transaction.
     *
     * @maps installment
     */
    public function setInstallment(?bool $installment): void
    {
        $this->installment = $installment;
    }

    /**
     * Returns Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     */
    public function getInstallmentNumber(): ?int
    {
        if (count($this->installmentNumber) == 0) {
            return null;
        }
        return $this->installmentNumber['value'];
    }

    /**
     * Sets Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     *
     * @maps installment_number
     */
    public function setInstallmentNumber(?int $installmentNumber): void
    {
        $this->installmentNumber['value'] = $installmentNumber;
    }

    /**
     * Unsets Installment Number.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the current installment number that is running.
     */
    public function unsetInstallmentNumber(): void
    {
        $this->installmentNumber = [];
    }

    /**
     * Returns Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     */
    public function getInstallmentCount(): ?int
    {
        if (count($this->installmentCount) == 0) {
            return null;
        }
        return $this->installmentCount['value'];
    }

    /**
     * Sets Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     *
     * @maps installment_count
     */
    public function setInstallmentCount(?int $installmentCount): void
    {
        $this->installmentCount['value'] = $installmentCount;
    }

    /**
     * Unsets Installment Count.
     * If this is a fixed installment plan and installment field is being passed as 1, then this field must
     * have a vlue of 1-999 specifying the total number of installments on the plan. This number must be
     * grater than or equal to installment_number.
     */
    public function unsetInstallmentCount(): void
    {
        $this->installmentCount = [];
    }

    /**
     * Returns Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     */
    public function getLocationApiId(): ?string
    {
        if (count($this->locationApiId) == 0) {
            return null;
        }
        return $this->locationApiId['value'];
    }

    /**
     * Sets Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     *
     * @maps location_api_id
     */
    public function setLocationApiId(?string $locationApiId): void
    {
        $this->locationApiId['value'] = $locationApiId;
    }

    /**
     * Unsets Location Api Id.
     * This can be supplied in place of location_id for the transaction if you are using your own custom
     * api_id's for your locations.
     */
    public function unsetLocationApiId(): void
    {
        $this->locationApiId = [];
    }

    /**
     * Returns Location Id.
     * A valid Location Id to associate the transaction with.
     */
    public function getLocationId(): ?string
    {
        if (count($this->locationId) == 0) {
            return null;
        }
        return $this->locationId['value'];
    }

    /**
     * Sets Location Id.
     * A valid Location Id to associate the transaction with.
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId['value'] = $locationId;
    }

    /**
     * Unsets Location Id.
     * A valid Location Id to associate the transaction with.
     */
    public function unsetLocationId(): void
    {
        $this->locationId = [];
    }

    /**
     * Returns Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     */
    public function getProductTransactionId(): ?string
    {
        if (count($this->productTransactionId) == 0) {
            return null;
        }
        return $this->productTransactionId['value'];
    }

    /**
     * Sets Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     *
     * @maps product_transaction_id
     */
    public function setProductTransactionId(?string $productTransactionId): void
    {
        $this->productTransactionId['value'] = $productTransactionId;
    }

    /**
     * Unsets Product Transaction Id.
     * The Product's method (cc/ach) has to match the action. If not provided, the API will use the default
     * configured for the Location.
     */
    public function unsetProductTransactionId(): void
    {
        $this->productTransactionId = [];
    }

    /**
     * Returns Advance Deposit.
     * Advance Deposit
     */
    public function getAdvanceDeposit(): ?bool
    {
        return $this->advanceDeposit;
    }

    /**
     * Sets Advance Deposit.
     * Advance Deposit
     *
     * @maps advance_deposit
     */
    public function setAdvanceDeposit(?bool $advanceDeposit): void
    {
        $this->advanceDeposit = $advanceDeposit;
    }

    /**
     * Returns No Show.
     * Used in Lodging
     */
    public function getNoShow(): ?bool
    {
        return $this->noShow;
    }

    /**
     * Sets No Show.
     * Used in Lodging
     *
     * @maps no_show
     */
    public function setNoShow(?bool $noShow): void
    {
        $this->noShow = $noShow;
    }

    /**
     * Returns Notification Email Address.
     * If email is supplied then receipt will be emailed
     */
    public function getNotificationEmailAddress(): ?string
    {
        if (count($this->notificationEmailAddress) == 0) {
            return null;
        }
        return $this->notificationEmailAddress['value'];
    }

    /**
     * Sets Notification Email Address.
     * If email is supplied then receipt will be emailed
     *
     * @maps notification_email_address
     */
    public function setNotificationEmailAddress(?string $notificationEmailAddress): void
    {
        $this->notificationEmailAddress['value'] = $notificationEmailAddress;
    }

    /**
     * Unsets Notification Email Address.
     * If email is supplied then receipt will be emailed
     */
    public function unsetNotificationEmailAddress(): void
    {
        $this->notificationEmailAddress = [];
    }

    /**
     * Returns Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     */
    public function getOrderNumber(): ?string
    {
        if (count($this->orderNumber) == 0) {
            return null;
        }
        return $this->orderNumber['value'];
    }

    /**
     * Sets Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     *
     * @maps order_number
     */
    public function setOrderNumber(?string $orderNumber): void
    {
        $this->orderNumber['value'] = $orderNumber;
    }

    /**
     * Unsets Order Number.
     * Required for CC transactions , if merchant's deposit account's duplicate check per batch has
     * 'order_number' field
     */
    public function unsetOrderNumber(): void
    {
        $this->orderNumber = [];
    }

    /**
     * Returns Po Number.
     * Purchase Order number
     */
    public function getPoNumber(): ?string
    {
        if (count($this->poNumber) == 0) {
            return null;
        }
        return $this->poNumber['value'];
    }

    /**
     * Sets Po Number.
     * Purchase Order number
     *
     * @maps po_number
     */
    public function setPoNumber(?string $poNumber): void
    {
        $this->poNumber['value'] = $poNumber;
    }

    /**
     * Unsets Po Number.
     * Purchase Order number
     */
    public function unsetPoNumber(): void
    {
        $this->poNumber = [];
    }

    /**
     * Returns Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     */
    public function getQuickInvoiceId(): ?string
    {
        if (count($this->quickInvoiceId) == 0) {
            return null;
        }
        return $this->quickInvoiceId['value'];
    }

    /**
     * Sets Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     *
     * @maps quick_invoice_id
     */
    public function setQuickInvoiceId(?string $quickInvoiceId): void
    {
        $this->quickInvoiceId['value'] = $quickInvoiceId;
    }

    /**
     * Unsets Quick Invoice Id.
     * Can be used to associate a transaction to a Quick Invoice.  Quick Invoice transactions will have a
     * value for this field automatically.
     */
    public function unsetQuickInvoiceId(): void
    {
        $this->quickInvoiceId = [];
    }

    /**
     * Returns Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is an
     * ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0 or not
     * present if installment is sent as 1.
     */
    public function getRecurring(): ?bool
    {
        return $this->recurring;
    }

    /**
     * Sets Recurring.
     * Flag that is allowed to be passed on card not present industries to signify the transaction is an
     * ongoing recurring transaction. Possible values to send are 0 or 1. This field must be 0 or not
     * present if installment is sent as 1.
     *
     * @maps recurring
     */
    public function setRecurring(?bool $recurring): void
    {
        $this->recurring = $recurring;
    }

    /**
     * Returns Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     */
    public function getRecurringNumber(): ?int
    {
        if (count($this->recurringNumber) == 0) {
            return null;
        }
        return $this->recurringNumber['value'];
    }

    /**
     * Sets Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     *
     * @maps recurring_number
     */
    public function setRecurringNumber(?int $recurringNumber): void
    {
        $this->recurringNumber['value'] = $recurringNumber;
    }

    /**
     * Unsets Recurring Number.
     * If this is an ongoing recurring and recurring field is being passed as 1, then this field must have
     * a vlue of 1-999 specifying the current recurring number that is running.
     */
    public function unsetRecurringNumber(): void
    {
        $this->recurringNumber = [];
    }

    /**
     * Returns Room Num.
     * Used in Lodging
     */
    public function getRoomNum(): ?string
    {
        if (count($this->roomNum) == 0) {
            return null;
        }
        return $this->roomNum['value'];
    }

    /**
     * Sets Room Num.
     * Used in Lodging
     *
     * @maps room_num
     */
    public function setRoomNum(?string $roomNum): void
    {
        $this->roomNum['value'] = $roomNum;
    }

    /**
     * Unsets Room Num.
     * Used in Lodging
     */
    public function unsetRoomNum(): void
    {
        $this->roomNum = [];
    }

    /**
     * Returns Room Rate.
     * Required if merchant industry type is lodging.
     */
    public function getRoomRate(): ?int
    {
        if (count($this->roomRate) == 0) {
            return null;
        }
        return $this->roomRate['value'];
    }

    /**
     * Sets Room Rate.
     * Required if merchant industry type is lodging.
     *
     * @maps room_rate
     */
    public function setRoomRate(?int $roomRate): void
    {
        $this->roomRate['value'] = $roomRate;
    }

    /**
     * Unsets Room Rate.
     * Required if merchant industry type is lodging.
     */
    public function unsetRoomRate(): void
    {
        $this->roomRate = [];
    }

    /**
     * Returns Save Account.
     * Specifies to save account to contacts profile if account_number/track_data is present with either
     * contact_id or contact_api_id in params.
     */
    public function getSaveAccount(): ?bool
    {
        return $this->saveAccount;
    }

    /**
     * Sets Save Account.
     * Specifies to save account to contacts profile if account_number/track_data is present with either
     * contact_id or contact_api_id in params.
     *
     * @maps save_account
     */
    public function setSaveAccount(?bool $saveAccount): void
    {
        $this->saveAccount = $saveAccount;
    }

    /**
     * Returns Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     */
    public function getSaveAccountTitle(): ?string
    {
        if (count($this->saveAccountTitle) == 0) {
            return null;
        }
        return $this->saveAccountTitle['value'];
    }

    /**
     * Sets Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     *
     * @maps save_account_title
     */
    public function setSaveAccountTitle(?string $saveAccountTitle): void
    {
        $this->saveAccountTitle['value'] = $saveAccountTitle;
    }

    /**
     * Unsets Save Account Title.
     * If saving token while running a transaction, this will be the title of the token.
     */
    public function unsetSaveAccountTitle(): void
    {
        $this->saveAccountTitle = [];
    }

    /**
     * Returns Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getSubtotalAmount(): ?int
    {
        if (count($this->subtotalAmount) == 0) {
            return null;
        }
        return $this->subtotalAmount['value'];
    }

    /**
     * Sets Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps subtotal_amount
     */
    public function setSubtotalAmount(?int $subtotalAmount): void
    {
        $this->subtotalAmount['value'] = $subtotalAmount;
    }

    /**
     * Unsets Subtotal Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetSubtotalAmount(): void
    {
        $this->subtotalAmount = [];
    }

    /**
     * Returns Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getSurchargeAmount(): ?int
    {
        if (count($this->surchargeAmount) == 0) {
            return null;
        }
        return $this->surchargeAmount['value'];
    }

    /**
     * Sets Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps surcharge_amount
     */
    public function setSurchargeAmount(?int $surchargeAmount): void
    {
        $this->surchargeAmount['value'] = $surchargeAmount;
    }

    /**
     * Unsets Surcharge Amount.
     * This field is allowed and required for transactions that have a product where surcharge is
     * configured. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetSurchargeAmount(): void
    {
        $this->surchargeAmount = [];
    }

    /**
     * Returns Tags.
     * Tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     * Tags
     *
     * @maps tags
     *
     * @param string[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     */
    public function getTax(): ?int
    {
        if (count($this->tax) == 0) {
            return null;
        }
        return $this->tax['value'];
    }

    /**
     * Sets Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     *
     * @maps tax
     */
    public function setTax(?int $tax): void
    {
        $this->tax['value'] = $tax;
    }

    /**
     * Unsets Tax.
     * Amount of Sales tax - If supplied, this amount should be included in the total transaction_amount
     * field. Use only integer numbers, so $10.99 will be 1099.
     */
    public function unsetTax(): void
    {
        $this->tax = [];
    }

    /**
     * Returns Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     */
    public function getTipAmount(): ?int
    {
        if (count($this->tipAmount) == 0) {
            return null;
        }
        return $this->tipAmount['value'];
    }

    /**
     * Sets Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     *
     * @maps tip_amount
     */
    public function setTipAmount(?int $tipAmount): void
    {
        $this->tipAmount['value'] = $tipAmount;
    }

    /**
     * Unsets Tip Amount.
     * Optional tip amount. Tip is not supported for lodging and ecommerce merchants. Use only integer
     * numbers, so $10.99 will be 1099.
     */
    public function unsetTipAmount(): void
    {
        $this->tipAmount = [];
    }

    /**
     * Returns Transaction Amount.
     * Amount of the transaction. This should always be the desired settle amount of the transaction. Use
     * only integer numbers, so $10.99 will be 1099.
     */
    public function getTransactionAmount(): int
    {
        return $this->transactionAmount;
    }

    /**
     * Sets Transaction Amount.
     * Amount of the transaction. This should always be the desired settle amount of the transaction. Use
     * only integer numbers, so $10.99 will be 1099.
     *
     * @required
     * @maps transaction_amount
     */
    public function setTransactionAmount(int $transactionAmount): void
    {
        $this->transactionAmount = $transactionAmount;
    }

    /**
     * Returns Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     */
    public function getSecondaryAmount(): ?int
    {
        if (count($this->secondaryAmount) == 0) {
            return null;
        }
        return $this->secondaryAmount['value'];
    }

    /**
     * Sets Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     *
     * @maps secondary_amount
     */
    public function setSecondaryAmount(?int $secondaryAmount): void
    {
        $this->secondaryAmount['value'] = $secondaryAmount;
    }

    /**
     * Unsets Secondary Amount.
     * Secondary Amount of the transaction. This should always be less than transaction amount. Use only
     * integer numbers, so $10.99 will be 1099
     */
    public function unsetSecondaryAmount(): void
    {
        $this->secondaryAmount = [];
    }

    /**
     * Returns Transaction Api Id.
     * See api_id page for more details
     */
    public function getTransactionApiId(): ?string
    {
        if (count($this->transactionApiId) == 0) {
            return null;
        }
        return $this->transactionApiId['value'];
    }

    /**
     * Sets Transaction Api Id.
     * See api_id page for more details
     *
     * @maps transaction_api_id
     */
    public function setTransactionApiId(?string $transactionApiId): void
    {
        $this->transactionApiId['value'] = $transactionApiId;
    }

    /**
     * Unsets Transaction Api Id.
     * See api_id page for more details
     */
    public function unsetTransactionApiId(): void
    {
        $this->transactionApiId = [];
    }

    /**
     * Returns Transaction C1.
     * Custom field 1 for api users to store custom data
     */
    public function getTransactionC1(): ?string
    {
        if (count($this->transactionC1) == 0) {
            return null;
        }
        return $this->transactionC1['value'];
    }

    /**
     * Sets Transaction C1.
     * Custom field 1 for api users to store custom data
     *
     * @maps transaction_c1
     */
    public function setTransactionC1(?string $transactionC1): void
    {
        $this->transactionC1['value'] = $transactionC1;
    }

    /**
     * Unsets Transaction C1.
     * Custom field 1 for api users to store custom data
     */
    public function unsetTransactionC1(): void
    {
        $this->transactionC1 = [];
    }

    /**
     * Returns Transaction C2.
     * Custom field 2 for api users to store custom data
     */
    public function getTransactionC2(): ?string
    {
        if (count($this->transactionC2) == 0) {
            return null;
        }
        return $this->transactionC2['value'];
    }

    /**
     * Sets Transaction C2.
     * Custom field 2 for api users to store custom data
     *
     * @maps transaction_c2
     */
    public function setTransactionC2(?string $transactionC2): void
    {
        $this->transactionC2['value'] = $transactionC2;
    }

    /**
     * Unsets Transaction C2.
     * Custom field 2 for api users to store custom data
     */
    public function unsetTransactionC2(): void
    {
        $this->transactionC2 = [];
    }

    /**
     * Returns Transaction C3.
     * Custom field 3 for api users to store custom data
     */
    public function getTransactionC3(): ?string
    {
        if (count($this->transactionC3) == 0) {
            return null;
        }
        return $this->transactionC3['value'];
    }

    /**
     * Sets Transaction C3.
     * Custom field 3 for api users to store custom data
     *
     * @maps transaction_c3
     */
    public function setTransactionC3(?string $transactionC3): void
    {
        $this->transactionC3['value'] = $transactionC3;
    }

    /**
     * Unsets Transaction C3.
     * Custom field 3 for api users to store custom data
     */
    public function unsetTransactionC3(): void
    {
        $this->transactionC3 = [];
    }

    /**
     * Returns Bank Funded Only Override.
     * Bank Funded Only Override
     */
    public function getBankFundedOnlyOverride(): ?bool
    {
        return $this->bankFundedOnlyOverride;
    }

    /**
     * Sets Bank Funded Only Override.
     * Bank Funded Only Override
     *
     * @maps bank_funded_only_override
     */
    public function setBankFundedOnlyOverride(?bool $bankFundedOnlyOverride): void
    {
        $this->bankFundedOnlyOverride = $bankFundedOnlyOverride;
    }

    /**
     * Returns Allow Partial Authorization Override.
     * Allow Partial Authorization Override
     */
    public function getAllowPartialAuthorizationOverride(): ?bool
    {
        return $this->allowPartialAuthorizationOverride;
    }

    /**
     * Sets Allow Partial Authorization Override.
     * Allow Partial Authorization Override
     *
     * @maps allow_partial_authorization_override
     */
    public function setAllowPartialAuthorizationOverride(?bool $allowPartialAuthorizationOverride): void
    {
        $this->allowPartialAuthorizationOverride = $allowPartialAuthorizationOverride;
    }

    /**
     * Returns Auto Decline Cvv Override.
     * Auto Decline CVV Override
     */
    public function getAutoDeclineCvvOverride(): ?bool
    {
        return $this->autoDeclineCvvOverride;
    }

    /**
     * Sets Auto Decline Cvv Override.
     * Auto Decline CVV Override
     *
     * @maps auto_decline_cvv_override
     */
    public function setAutoDeclineCvvOverride(?bool $autoDeclineCvvOverride): void
    {
        $this->autoDeclineCvvOverride = $autoDeclineCvvOverride;
    }

    /**
     * Returns Auto Decline Street Override.
     * Auto Decline Street Override
     */
    public function getAutoDeclineStreetOverride(): ?bool
    {
        return $this->autoDeclineStreetOverride;
    }

    /**
     * Sets Auto Decline Street Override.
     * Auto Decline Street Override
     *
     * @maps auto_decline_street_override
     */
    public function setAutoDeclineStreetOverride(?bool $autoDeclineStreetOverride): void
    {
        $this->autoDeclineStreetOverride = $autoDeclineStreetOverride;
    }

    /**
     * Returns Auto Decline Zip Override.
     * Auto Decline Zip Override
     */
    public function getAutoDeclineZipOverride(): ?bool
    {
        return $this->autoDeclineZipOverride;
    }

    /**
     * Sets Auto Decline Zip Override.
     * Auto Decline Zip Override
     *
     * @maps auto_decline_zip_override
     */
    public function setAutoDeclineZipOverride(?bool $autoDeclineZipOverride): void
    {
        $this->autoDeclineZipOverride = $autoDeclineZipOverride;
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property
     * @param mixed $value Value of property
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->additionalAmounts)) {
            $json['additional_amounts']                   = $this->additionalAmounts;
        }
        if (isset($this->billingAddress)) {
            $json['billing_address']                      = $this->billingAddress;
        }
        if (!empty($this->checkinDate)) {
            $json['checkin_date']                         = $this->checkinDate['value'];
        }
        if (!empty($this->checkoutDate)) {
            $json['checkout_date']                        = $this->checkoutDate['value'];
        }
        if (!empty($this->clerkNumber)) {
            $json['clerk_number']                         = $this->clerkNumber['value'];
        }
        if (!empty($this->contactApiId)) {
            $json['contact_api_id']                       = $this->contactApiId['value'];
        }
        if (!empty($this->contactId)) {
            $json['contact_id']                           = $this->contactId['value'];
        }
        if (isset($this->customData)) {
            $json['custom_data']                          = $this->customData;
        }
        if (!empty($this->customerId)) {
            $json['customer_id']                          = $this->customerId['value'];
        }
        if (!empty($this->description)) {
            $json['description']                          = $this->description['value'];
        }
        if (isset($this->identityVerification)) {
            $json['identity_verification']                = $this->identityVerification;
        }
        if (!empty($this->iiasInd)) {
            $json['iias_ind']                             = IiasIndEnum::checkValue($this->iiasInd['value']);
        }
        if (!empty($this->imageFront)) {
            $json['image_front']                          = $this->imageFront['value'];
        }
        if (!empty($this->imageBack)) {
            $json['image_back']                           = $this->imageBack['value'];
        }
        if (isset($this->installment)) {
            $json['installment']                          = $this->installment;
        }
        if (!empty($this->installmentNumber)) {
            $json['installment_number']                   = $this->installmentNumber['value'];
        }
        if (!empty($this->installmentCount)) {
            $json['installment_count']                    = $this->installmentCount['value'];
        }
        if (!empty($this->locationApiId)) {
            $json['location_api_id']                      = $this->locationApiId['value'];
        }
        if (!empty($this->locationId)) {
            $json['location_id']                          = $this->locationId['value'];
        }
        if (!empty($this->productTransactionId)) {
            $json['product_transaction_id']               = $this->productTransactionId['value'];
        }
        if (isset($this->advanceDeposit)) {
            $json['advance_deposit']                      = $this->advanceDeposit;
        }
        if (isset($this->noShow)) {
            $json['no_show']                              = $this->noShow;
        }
        if (!empty($this->notificationEmailAddress)) {
            $json['notification_email_address']           = $this->notificationEmailAddress['value'];
        }
        if (!empty($this->orderNumber)) {
            $json['order_number']                         = $this->orderNumber['value'];
        }
        if (!empty($this->poNumber)) {
            $json['po_number']                            = $this->poNumber['value'];
        }
        if (!empty($this->quickInvoiceId)) {
            $json['quick_invoice_id']                     = $this->quickInvoiceId['value'];
        }
        if (isset($this->recurring)) {
            $json['recurring']                            = $this->recurring;
        }
        if (!empty($this->recurringNumber)) {
            $json['recurring_number']                     = $this->recurringNumber['value'];
        }
        if (!empty($this->roomNum)) {
            $json['room_num']                             = $this->roomNum['value'];
        }
        if (!empty($this->roomRate)) {
            $json['room_rate']                            = $this->roomRate['value'];
        }
        if (isset($this->saveAccount)) {
            $json['save_account']                         = $this->saveAccount;
        }
        if (!empty($this->saveAccountTitle)) {
            $json['save_account_title']                   = $this->saveAccountTitle['value'];
        }
        if (!empty($this->subtotalAmount)) {
            $json['subtotal_amount']                      = $this->subtotalAmount['value'];
        }
        if (!empty($this->surchargeAmount)) {
            $json['surcharge_amount']                     = $this->surchargeAmount['value'];
        }
        if (isset($this->tags)) {
            $json['tags']                                 = $this->tags;
        }
        if (!empty($this->tax)) {
            $json['tax']                                  = $this->tax['value'];
        }
        if (!empty($this->tipAmount)) {
            $json['tip_amount']                           = $this->tipAmount['value'];
        }
        $json['transaction_amount']                       = $this->transactionAmount;
        if (!empty($this->secondaryAmount)) {
            $json['secondary_amount']                     = $this->secondaryAmount['value'];
        }
        if (!empty($this->transactionApiId)) {
            $json['transaction_api_id']                   = $this->transactionApiId['value'];
        }
        if (!empty($this->transactionC1)) {
            $json['transaction_c1']                       = $this->transactionC1['value'];
        }
        if (!empty($this->transactionC2)) {
            $json['transaction_c2']                       = $this->transactionC2['value'];
        }
        if (!empty($this->transactionC3)) {
            $json['transaction_c3']                       = $this->transactionC3['value'];
        }
        if (isset($this->bankFundedOnlyOverride)) {
            $json['bank_funded_only_override']            = $this->bankFundedOnlyOverride;
        }
        if (isset($this->allowPartialAuthorizationOverride)) {
            $json['allow_partial_authorization_override'] = $this->allowPartialAuthorizationOverride;
        }
        if (isset($this->autoDeclineCvvOverride)) {
            $json['auto_decline_cvv_override']            = $this->autoDeclineCvvOverride;
        }
        if (isset($this->autoDeclineStreetOverride)) {
            $json['auto_decline_street_override']         = $this->autoDeclineStreetOverride;
        }
        if (isset($this->autoDeclineZipOverride)) {
            $json['auto_decline_zip_override']            = $this->autoDeclineZipOverride;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
