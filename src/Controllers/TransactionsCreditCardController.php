<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Exceptions\Response412Exception;
use FortisAPILib\Models\Expand50Enum;
use FortisAPILib\Models\ResponseAsyncProcessing;
use FortisAPILib\Models\ResponseTransaction;
use FortisAPILib\Models\V1TransactionsCcAuthOnlyKeyedRequest;
use FortisAPILib\Models\V1TransactionsCcAuthOnlyPrevTrxnRequest;
use FortisAPILib\Models\V1TransactionsCcAuthOnlyTerminalRequest;
use FortisAPILib\Models\V1TransactionsCcAuthOnlyTicketRequest;
use FortisAPILib\Models\V1TransactionsCcAuthOnlyTokenRequest;
use FortisAPILib\Models\V1TransactionsCcAvsOnlyKeyedRequest;
use FortisAPILib\Models\V1TransactionsCcAvsOnlyPrevTrxnRequest;
use FortisAPILib\Models\V1TransactionsCcAvsOnlyTerminalRequest;
use FortisAPILib\Models\V1TransactionsCcAvsOnlyTicketRequest;
use FortisAPILib\Models\V1TransactionsCcAvsOnlyTokenRequest;
use FortisAPILib\Models\V1TransactionsCcForceKeyedRequest;
use FortisAPILib\Models\V1TransactionsCcForcePrevTrxnRequest;
use FortisAPILib\Models\V1TransactionsCcForceTicketRequest;
use FortisAPILib\Models\V1TransactionsCcForceTokenRequest;
use FortisAPILib\Models\V1TransactionsCcRefundKeyedRequest;
use FortisAPILib\Models\V1TransactionsCcRefundPrevTrxnRequest;
use FortisAPILib\Models\V1TransactionsCcRefundTerminalRequest;
use FortisAPILib\Models\V1TransactionsCcRefundTicketRequest;
use FortisAPILib\Models\V1TransactionsCcRefundTokenRequest;
use FortisAPILib\Models\V1TransactionsCcSaleKeyedRequest;
use FortisAPILib\Models\V1TransactionsCcSalePrevTrxnRequest;
use FortisAPILib\Models\V1TransactionsCcSaleTerminalRequest;
use FortisAPILib\Models\V1TransactionsCcSaleTicketRequest;
use FortisAPILib\Models\V1TransactionsCcSaleTokenRequest;

class TransactionsCreditCardController extends BaseController
{
    /**
     * Create a new keyed Credit Card authorization only transaction
     *
     * @param V1TransactionsCcAuthOnlyKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAuthOnly(V1TransactionsCcAuthOnlyKeyedRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/auth-only/keyed')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Credit Card authorization only transaction using previous transaction id
     *
     * @param V1TransactionsCcAuthOnlyPrevTrxnRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAuthOnlyPreviousTransaction(
        V1TransactionsCcAuthOnlyPrevTrxnRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/auth-only/prev-trxn')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new terminal Credit Card authorization only transaction
     *
     * @param V1TransactionsCcAuthOnlyTerminalRequest $body
     *
     * @return ResponseAsyncProcessing Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAuthOnlyTerminal(V1TransactionsCcAuthOnlyTerminalRequest $body): ResponseAsyncProcessing
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/auth-only/terminal')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseAsyncProcessing::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new ticket Credit Card authorization only transaction
     *
     * @param V1TransactionsCcAuthOnlyTicketRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAuthOnlyTicket(
        V1TransactionsCcAuthOnlyTicketRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/auth-only/ticket')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new tokenized Credit Card authorization only transaction
     *
     * @param V1TransactionsCcAuthOnlyTokenRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAuthOnlyTokenized(
        V1TransactionsCcAuthOnlyTokenRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/auth-only/token')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new keyed Credit Card AVS only transaction
     *
     * @param V1TransactionsCcAvsOnlyKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAVS(V1TransactionsCcAvsOnlyKeyedRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/avs-only/keyed')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Credit Card AVS only transaction using previous transaction id
     *
     * @param V1TransactionsCcAvsOnlyPrevTrxnRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAVSPreviousTransaction(
        V1TransactionsCcAvsOnlyPrevTrxnRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/avs-only/prev-trxn')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new terminal Credit Card AVS only transaction
     *
     * @param V1TransactionsCcAvsOnlyTerminalRequest $body
     *
     * @return ResponseAsyncProcessing Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAVSTerminal(V1TransactionsCcAvsOnlyTerminalRequest $body): ResponseAsyncProcessing
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/avs-only/terminal')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseAsyncProcessing::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new ticket Credit Card AVS only transaction
     *
     * @param V1TransactionsCcAvsOnlyTicketRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAVSTicket(V1TransactionsCcAvsOnlyTicketRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/avs-only/ticket')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new tokenized Credit Card AVS only transaction
     *
     * @param V1TransactionsCcAvsOnlyTokenRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCAVSTokenized(
        V1TransactionsCcAvsOnlyTokenRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/avs-only/token')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new keyed Credit Card force transaction
     *
     * @param V1TransactionsCcForceKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCForce(V1TransactionsCcForceKeyedRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/force/keyed')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Credit Card force transaction using previous transaction id
     *
     * @param V1TransactionsCcForcePrevTrxnRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCForcePreviousTransaction(
        V1TransactionsCcForcePrevTrxnRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/force/prev-trxn')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new ticket Credit Card force transaction
     *
     * @param V1TransactionsCcForceTicketRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCForceTicket(V1TransactionsCcForceTicketRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/force/ticket')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new tokenized Credit Card force transaction
     *
     * @param V1TransactionsCcForceTokenRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCForceTokenized(
        V1TransactionsCcForceTokenRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/force/token')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new keyed Credit Card refund transaction
     *
     * @param V1TransactionsCcRefundKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCRefund(V1TransactionsCcRefundKeyedRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/refund/keyed')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Credit Card refund transaction using previous transaction id
     *
     * @param V1TransactionsCcRefundPrevTrxnRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCRefundPreviousTransaction(
        V1TransactionsCcRefundPrevTrxnRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/refund/prev-trxn')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new terminal Credit Card refund transaction
     *
     * @param V1TransactionsCcRefundTerminalRequest $body
     *
     * @return ResponseAsyncProcessing Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCRefundTerminal(V1TransactionsCcRefundTerminalRequest $body): ResponseAsyncProcessing
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/refund/terminal')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseAsyncProcessing::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new ticket Credit Card refund transaction
     *
     * @param V1TransactionsCcRefundTicketRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCRefundTicket(
        V1TransactionsCcRefundTicketRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/refund/ticket')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new tokenized Credit Card refund transaction
     *
     * @param V1TransactionsCcRefundTokenRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCRefundTokenized(
        V1TransactionsCcRefundTokenRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/refund/token')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new keyed Credit Card sale transaction
     *
     * @param V1TransactionsCcSaleKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCSale(V1TransactionsCcSaleKeyedRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/sale/keyed')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Credit Card sale transaction using previous transaction id
     *
     * @param V1TransactionsCcSalePrevTrxnRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCSalePreviousTransaction(
        V1TransactionsCcSalePrevTrxnRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/sale/prev-trxn')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new terminal Credit Card sale transaction
     *
     * @param V1TransactionsCcSaleTerminalRequest $body
     *
     * @return ResponseAsyncProcessing Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCSaleTerminal(V1TransactionsCcSaleTerminalRequest $body): ResponseAsyncProcessing
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/sale/terminal')
            ->auth('global')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseAsyncProcessing::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new Ticket Credit Card sale transaction
     *
     * @param V1TransactionsCcSaleTicketRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCSaleTicket(V1TransactionsCcSaleTicketRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/sale/ticket')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new tokenized Credit Card sale transaction
     *
     * @param V1TransactionsCcSaleTokenRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cCSaleTokenized(V1TransactionsCcSaleTokenRequest $body, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/cc/sale/token')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
