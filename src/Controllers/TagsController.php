<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Exceptions\Response412Exception;
use FortisAPILib\Models\Expand31Enum;
use FortisAPILib\Models\Filter9;
use FortisAPILib\Models\Page;
use FortisAPILib\Models\ResponseTag;
use FortisAPILib\Models\ResponseTagsCollection;
use FortisAPILib\Models\Sort25;
use FortisAPILib\Models\V1TagsRequest;
use FortisAPILib\Models\V1TagsRequest1;

class TagsController extends BaseController
{
    /**
     * Create a new tag
     *
     * @param V1TagsRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createANewTag(V1TagsRequest $body, ?array $expand = null): ResponseTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/tags')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand31Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * List all tags related
     *
     * @param Page|null $page Use this field to specify paginate your results, by using page size
     *        and number. You can use one of the following methods:
     *        >/endpoint?page={ "number": 1, "size": 50 }
     *        >
     *        >/endpoint?page[number]=1&page[size]=50
     *        >
     * @param Sort25|null $sort You can use any `field_name` from this endpoint results, and you can
     *        combine more than one field for more complex sorting. You can use one of the
     *        following methods:
     *        >/endpoint?sort={ "field_name": "asc", "field_name2": "desc" }
     *        >
     *        >/endpoint?sort[field_name]=asc&sort[field_name2]=desc
     *        >
     * @param Filter9|null $filter You can use any `field_name` from this endpoint results as a
     *        filter, and you can also use more than one field to create AND conditions. For date
     *        fields (ended with `_ts`), you can also search for ranges using the `$gte` (Greater
     *        than or equal to) and/or  `$lte` (Lower than or equal to). You can use one of the
     *        following methods:
     *        >/endpoint?filter={ "field_name": "Value" }
     *        >
     *        >/endpoint?filter[field_name]=Value
     *        >
     *        >/endpoint?filter={ "created_ts": "today" }
     *        >
     *        >/endpoint?filter[created_ts]=today
     *        >
     *        >/endpoint?filter={ "created_ts": { "$gte": "yesterday", "$lte": "today" } }
     *        >
     *        >/endpoint?filter[created_ts][$gte]=yesterday&filter[created_ts][$lte]=today
     *        >
     *        >/endpoint?filter[address][city]=memphis
     *        >
     *        >/endpoint?filter={ "address": { "city" : "memphis" } }
     *        >
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTagsCollection Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listAllTagsRelated(
        ?Page $page = null,
        ?Sort25 $sort = null,
        ?Filter9 $filter = null,
        ?array $expand = null
    ): ResponseTagsCollection {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/tags')
            ->auth('global')
            ->parameters(
                QueryParam::init('page', $page),
                QueryParam::init('sort', $sort),
                QueryParam::init('filter', $filter),
                QueryParam::init('expand', $expand)->serializeBy([Expand31Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseTagsCollection::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete tag record
     *
     * @param string $tagId Tag ID
     *
     * @return ResponseTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteTagRecord(string $tagId): ResponseTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/v1/tags/{tag_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('tag_id', $tagId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * View single tags record
     *
     * @param string $tagId Tag ID
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function viewSingleTagsRecord(string $tagId, ?array $expand = null): ResponseTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/v1/tags/{tag_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('tag_id', $tagId),
                QueryParam::init('expand', $expand)->serializeBy([Expand31Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update tag record
     *
     * @param string $tagId Tag ID
     * @param V1TagsRequest1 $body
     *
     * @return ResponseTag Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateTagRecord(string $tagId, V1TagsRequest1 $body): ResponseTag
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/tags/{tag_id}')
            ->auth('global')
            ->parameters(
                TemplateParam::init('tag_id', $tagId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTag::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
