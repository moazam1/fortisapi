<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Exceptions\Response412Exception;
use FortisAPILib\Models\Expand91Enum;
use FortisAPILib\Models\ResponseWebhook;
use FortisAPILib\Models\V1WebhooksBatchRequest;
use FortisAPILib\Models\V1WebhooksBatchRequest1;
use FortisAPILib\Models\V1WebhooksContactRequest;
use FortisAPILib\Models\V1WebhooksContactRequest1;
use FortisAPILib\Models\V1WebhooksTransactionRequest;
use FortisAPILib\Models\V1WebhooksTransactionRequest1;

class WebhooksController extends BaseController
{
    /**
     * Create a new transaction batch postback config
     *
     * @param V1WebhooksBatchRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createANewTransactionBatchPostbackConfig(
        V1WebhooksBatchRequest $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/webhooks/batch')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new contact postback config
     *
     * @param V1WebhooksContactRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createANewContactPostbackConfig(
        V1WebhooksContactRequest $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/webhooks/contact')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new transaction postback config
     *
     * @param V1WebhooksTransactionRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createANewTransactionPostbackConfig(
        V1WebhooksTransactionRequest $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/webhooks/transaction')
            ->auth('global')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Delete a postback config
     *
     * @param string $webhookId Postback Config ID
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAPostbackConfig(string $webhookId): ResponseWebhook
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/v1/webhooks/{webhook_id}')
            ->auth('global')
            ->parameters(TemplateParam::init('webhook_id', $webhookId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update transaction batch postback config
     *
     * @param string $webhookId Postback Config ID
     * @param V1WebhooksBatchRequest1 $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateTransactionBatchPostbackConfig(
        string $webhookId,
        V1WebhooksBatchRequest1 $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/webhooks/{webhook_id}/batch')
            ->auth('global')
            ->parameters(
                TemplateParam::init('webhook_id', $webhookId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update contact postback config
     *
     * @param string $webhookId Postback Config ID
     * @param V1WebhooksContactRequest1 $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateContactPostbackConfig(
        string $webhookId,
        V1WebhooksContactRequest1 $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/webhooks/{webhook_id}/contact')
            ->auth('global')
            ->parameters(
                TemplateParam::init('webhook_id', $webhookId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Update transaction postback config
     *
     * @param string $webhookId Postback Config ID
     * @param V1WebhooksTransactionRequest1 $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseWebhook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateTransactionPostbackConfig(
        string $webhookId,
        V1WebhooksTransactionRequest1 $body,
        ?array $expand = null
    ): ResponseWebhook {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/webhooks/{webhook_id}/transaction')
            ->auth('global')
            ->parameters(
                TemplateParam::init('webhook_id', $webhookId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand91Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseWebhook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
