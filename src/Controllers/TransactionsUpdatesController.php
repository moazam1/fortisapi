<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Exceptions\Response412Exception;
use FortisAPILib\Models\Expand50Enum;
use FortisAPILib\Models\ResponseTransaction;
use FortisAPILib\Models\V1TransactionsAuthCompleteRequest;
use FortisAPILib\Models\V1TransactionsAuthIncrementRequest;
use FortisAPILib\Models\V1TransactionsPartialReversalRequest;
use FortisAPILib\Models\V1TransactionsRefundRequest;
use FortisAPILib\Models\V1TransactionsTipAdjustRequest;
use FortisAPILib\Models\V1TransactionsVoidRequest;

class TransactionsUpdatesController extends BaseController
{
    /**
     * Void a transaction
     *
     * @param string $transactionId Transaction ID
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function void(string $transactionId, ?array $expand = null): ResponseTransaction
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PUT, '/v1/transactions/{transaction_id}/void')
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Void a transaction
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsVoidRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function void1(
        string $transactionId,
        V1TransactionsVoidRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/transactions/{transaction_id}/void')
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Perform an auth complete transaction
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsAuthCompleteRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function authComplete(
        string $transactionId,
        V1TransactionsAuthCompleteRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/v1/transactions/{transaction_id}/auth-complete'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Perform an auth increment transaction
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsAuthIncrementRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function authIncrement(
        string $transactionId,
        V1TransactionsAuthIncrementRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/v1/transactions/{transaction_id}/auth-increment'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Perform a partial reversal
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsPartialReversalRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function partialReversal(
        string $transactionId,
        V1TransactionsPartialReversalRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::PATCH,
            '/v1/transactions/{transaction_id}/partial-reversal'
        )
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Perform a refund transaction
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsRefundRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function refundTransaction(
        string $transactionId,
        V1TransactionsRefundRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/transactions/{transaction_id}/refund')
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Increment the authorized transaction amount to include a tip
     *
     * @param string $transactionId Transaction ID
     * @param V1TransactionsTipAdjustRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function tipAdjustment(
        string $transactionId,
        V1TransactionsTipAdjustRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/v1/transactions/{transaction_id}/tip-adjust')
            ->auth('global')
            ->parameters(
                TemplateParam::init('transaction_id', $transactionId),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand50Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
